/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8InspectorFrontendHost.h"

#if ENABLE(INSPECTOR)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8InspectorFrontendHost::info = { V8InspectorFrontendHost::GetTemplate, V8InspectorFrontendHost::derefObject, 0, 0 };

namespace InspectorFrontendHostInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> loadedCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.loaded");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->loaded();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> closeWindowCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.closeWindow");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->closeWindow();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> disconnectFromBackendCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.disconnectFromBackend");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->disconnectFromBackend();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> bringToFrontCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.bringToFront");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->bringToFront();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> inspectedURLChangedCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.inspectedURLChanged");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, newURL, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->inspectedURLChanged(newURL);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> requestAttachWindowCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.requestAttachWindow");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->requestAttachWindow();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> requestDetachWindowCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.requestDetachWindow");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->requestDetachWindow();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setAttachedWindowHeightCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.setAttachedWindowHeight");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    EXCEPTION_BLOCK(unsigned, height, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->setAttachedWindowHeight(height);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> moveWindowByCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.moveWindowBy");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    EXCEPTION_BLOCK(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    imp->moveWindowBy(x, y);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setExtensionAPICallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.setExtensionAPI");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, script, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->setExtensionAPI(script);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> localizedStringsURLCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.localizedStringsURL");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->localizedStringsURL());
}

static v8::Handle<v8::Value> hiddenPanelsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.hiddenPanels");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->hiddenPanels());
}

static v8::Handle<v8::Value> copyTextCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.copyText");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, text, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->copyText(text);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> saveAsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.saveAs");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, fileName, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, content, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    imp->saveAs(fileName, content);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> sendMessageToBackendCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.InspectorFrontendHost.sendMessageToBackend");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, message, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->sendMessageToBackend(message);
    return v8::Handle<v8::Value>();
}

} // namespace InspectorFrontendHostInternal

static const BatchedCallback InspectorFrontendHostCallbacks[] = {
    {"loaded", InspectorFrontendHostInternal::loadedCallback},
    {"closeWindow", InspectorFrontendHostInternal::closeWindowCallback},
    {"disconnectFromBackend", InspectorFrontendHostInternal::disconnectFromBackendCallback},
    {"bringToFront", InspectorFrontendHostInternal::bringToFrontCallback},
    {"inspectedURLChanged", InspectorFrontendHostInternal::inspectedURLChangedCallback},
    {"requestAttachWindow", InspectorFrontendHostInternal::requestAttachWindowCallback},
    {"requestDetachWindow", InspectorFrontendHostInternal::requestDetachWindowCallback},
    {"setAttachedWindowHeight", InspectorFrontendHostInternal::setAttachedWindowHeightCallback},
    {"moveWindowBy", InspectorFrontendHostInternal::moveWindowByCallback},
    {"setExtensionAPI", InspectorFrontendHostInternal::setExtensionAPICallback},
    {"localizedStringsURL", InspectorFrontendHostInternal::localizedStringsURLCallback},
    {"hiddenPanels", InspectorFrontendHostInternal::hiddenPanelsCallback},
    {"copyText", InspectorFrontendHostInternal::copyTextCallback},
    {"saveAs", InspectorFrontendHostInternal::saveAsCallback},
    {"platform", V8InspectorFrontendHost::platformCallback},
    {"port", V8InspectorFrontendHost::portCallback},
    {"showContextMenu", V8InspectorFrontendHost::showContextMenuCallback},
    {"sendMessageToBackend", InspectorFrontendHostInternal::sendMessageToBackendCallback},
    {"recordActionTaken", V8InspectorFrontendHost::recordActionTakenCallback},
    {"recordPanelShown", V8InspectorFrontendHost::recordPanelShownCallback},
    {"recordSettingChanged", V8InspectorFrontendHost::recordSettingChangedCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8InspectorFrontendHostTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "InspectorFrontendHost", v8::Persistent<v8::FunctionTemplate>(), V8InspectorFrontendHost::internalFieldCount,
        0, 0,
        InspectorFrontendHostCallbacks, WTF_ARRAY_LENGTH(InspectorFrontendHostCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8InspectorFrontendHostTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8InspectorFrontendHost::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8InspectorFrontendHost::wrapSlow(InspectorFrontendHost* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8InspectorFrontendHost::derefObject(void* object)
{
    static_cast<InspectorFrontendHost*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INSPECTOR)
