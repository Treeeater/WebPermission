/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8PeerConnection.h"

#if ENABLE(MEDIA_STREAM)

#include "EventListener.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8MediaStream.h"
#include "V8MediaStreamList.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8PeerConnection::info = { V8PeerConnection::GetTemplate, V8PeerConnection::derefObject, 0, 0 };

namespace PeerConnectionInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.readyState._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    return v8::Integer::New(imp->readyState());
}

static v8::Handle<v8::Value> localStreamsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.localStreams._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    RefPtr<MediaStreamList> result = imp->localStreams();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "localStreams", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> remoteStreamsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.remoteStreams._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    RefPtr<MediaStreamList> result = imp->remoteStreams();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "remoteStreams", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> onconnectingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onconnecting._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    return imp->onconnecting() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onconnecting())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onconnectingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onconnecting._set");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onconnecting(), value, V8PeerConnection::eventListenerCacheIndex);
    imp->setOnconnecting(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onopenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onopen._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    return imp->onopen() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onopen())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onopenAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onopen._set");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onopen(), value, V8PeerConnection::eventListenerCacheIndex);
    imp->setOnopen(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onmessage._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onmessage._set");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8PeerConnection::eventListenerCacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onaddstreamAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onaddstream._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    return imp->onaddstream() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onaddstream())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onaddstreamAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onaddstream._set");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onaddstream(), value, V8PeerConnection::eventListenerCacheIndex);
    imp->setOnaddstream(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onremovestreamAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onremovestream._get");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    return imp->onremovestream() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onremovestream())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onremovestreamAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PeerConnection.onremovestream._set");
    PeerConnection* imp = V8PeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onremovestream(), value, V8PeerConnection::eventListenerCacheIndex);
    imp->setOnremovestream(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> processSignalingMessageCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.processSignalingMessage");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    PeerConnection* imp = V8PeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, message, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->processSignalingMessage(message, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> sendCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.send");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    PeerConnection* imp = V8PeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, text, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->send(text, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> addStreamCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.addStream");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    PeerConnection* imp = V8PeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8MediaStream::HasInstance(args[0])) {
        V8Proxy::throwTypeError();
        return notHandledByInterceptor();
    }
    EXCEPTION_BLOCK(MediaStream*, stream, V8MediaStream::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8MediaStream::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    imp->addStream(stream, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> removeStreamCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.removeStream");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    PeerConnection* imp = V8PeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8MediaStream::HasInstance(args[0])) {
        V8Proxy::throwTypeError();
        return notHandledByInterceptor();
    }
    EXCEPTION_BLOCK(MediaStream*, stream, V8MediaStream::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8MediaStream::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    imp->removeStream(stream, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.close");
    PeerConnection* imp = V8PeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->close(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.addEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8PeerConnection::toNative(args.Holder())->addEventListener(v8ValueToAtomicWebCoreString(args[0]), listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8PeerConnection::eventListenerCacheIndex);
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.removeEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8PeerConnection::toNative(args.Holder())->removeEventListener(v8ValueToAtomicWebCoreString(args[0]), listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8PeerConnection::eventListenerCacheIndex);
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.PeerConnection.dispatchEvent");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    PeerConnection* imp = V8PeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Event*, event, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    bool result = imp->dispatchEvent(event, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace PeerConnectionInternal

static const BatchedAttribute PeerConnectionAttrs[] = {
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", PeerConnectionInternal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'localStreams' (Type: 'readonly attribute' ExtAttr: '')
    {"localStreams", PeerConnectionInternal::localStreamsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'remoteStreams' (Type: 'readonly attribute' ExtAttr: '')
    {"remoteStreams", PeerConnectionInternal::remoteStreamsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onconnecting' (Type: 'attribute' ExtAttr: '')
    {"onconnecting", PeerConnectionInternal::onconnectingAttrGetter, PeerConnectionInternal::onconnectingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onopen' (Type: 'attribute' ExtAttr: '')
    {"onopen", PeerConnectionInternal::onopenAttrGetter, PeerConnectionInternal::onopenAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onmessage' (Type: 'attribute' ExtAttr: '')
    {"onmessage", PeerConnectionInternal::onmessageAttrGetter, PeerConnectionInternal::onmessageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onaddstream' (Type: 'attribute' ExtAttr: '')
    {"onaddstream", PeerConnectionInternal::onaddstreamAttrGetter, PeerConnectionInternal::onaddstreamAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onremovestream' (Type: 'attribute' ExtAttr: '')
    {"onremovestream", PeerConnectionInternal::onremovestreamAttrGetter, PeerConnectionInternal::onremovestreamAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback PeerConnectionCallbacks[] = {
    {"processSignalingMessage", PeerConnectionInternal::processSignalingMessageCallback},
    {"send", PeerConnectionInternal::sendCallback},
    {"addStream", PeerConnectionInternal::addStreamCallback},
    {"removeStream", PeerConnectionInternal::removeStreamCallback},
    {"close", PeerConnectionInternal::closeCallback},
    {"addEventListener", PeerConnectionInternal::addEventListenerCallback},
    {"removeEventListener", PeerConnectionInternal::removeEventListenerCallback},
};

static const BatchedConstant PeerConnectionConsts[] = {
    {"NEW", static_cast<signed int>(0)},
    {"NEGOTIATING", static_cast<signed int>(1)},
    {"ACTIVE", static_cast<signed int>(2)},
    {"CLOSED", static_cast<signed int>(3)},
};


COMPILE_ASSERT(0 == PeerConnection::NEW, PeerConnectionEnumNEWIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == PeerConnection::NEGOTIATING, PeerConnectionEnumNEGOTIATINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == PeerConnection::ACTIVE, PeerConnectionEnumACTIVEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == PeerConnection::CLOSED, PeerConnectionEnumCLOSEDIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8PeerConnectionTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "PeerConnection", v8::Persistent<v8::FunctionTemplate>(), V8PeerConnection::internalFieldCount,
        PeerConnectionAttrs, WTF_ARRAY_LENGTH(PeerConnectionAttrs),
        PeerConnectionCallbacks, WTF_ARRAY_LENGTH(PeerConnectionCallbacks));
    desc->SetCallHandler(V8PeerConnection::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(PeerConnectionInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEventSignature));
    batchConfigureConstants(desc, proto, PeerConnectionConsts, WTF_ARRAY_LENGTH(PeerConnectionConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8PeerConnection::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8PeerConnection::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8PeerConnectionTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8PeerConnection::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8PeerConnection::wrapSlow(PeerConnection* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8PeerConnection::derefObject(void* object)
{
    static_cast<PeerConnection*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(MEDIA_STREAM)
