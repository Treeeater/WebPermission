/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8DOMSelection.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8Proxy.h"
#include "V8Range.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8DOMSelection::info = { V8DOMSelection::GetTemplate, V8DOMSelection::derefObject, 0, 0 };

namespace DOMSelectionInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> anchorNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.anchorNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->anchorNode());
}

static v8::Handle<v8::Value> anchorOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.anchorOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->anchorOffset());
}

static v8::Handle<v8::Value> focusNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.focusNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->focusNode());
}

static v8::Handle<v8::Value> focusOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.focusOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->focusOffset());
}

static v8::Handle<v8::Value> isCollapsedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.isCollapsed._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8Boolean(imp->isCollapsed());
}

static v8::Handle<v8::Value> rangeCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.rangeCount._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->rangeCount());
}

static v8::Handle<v8::Value> baseNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.baseNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->baseNode());
}

static v8::Handle<v8::Value> baseOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.baseOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->baseOffset());
}

static v8::Handle<v8::Value> extentNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.extentNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->extentNode());
}

static v8::Handle<v8::Value> extentOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.extentOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->extentOffset());
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMSelection.type._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8String(imp->type());
}

static v8::Handle<v8::Value> collapseCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.collapse");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, index, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    imp->collapse(node, index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> collapseToEndCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.collapseToEnd");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->collapseToEnd(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> collapseToStartCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.collapseToStart");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->collapseToStart(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> deleteFromDocumentCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.deleteFromDocument");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->deleteFromDocument();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> containsNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.containsNode");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(bool, allowPartial, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    return v8Boolean(imp->containsNode(node, allowPartial));
}

static v8::Handle<v8::Value> selectAllChildrenCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.selectAllChildren");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    imp->selectAllChildren(node, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> extendCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.extend");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, offset, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    imp->extend(node, offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getRangeAtCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.getRangeAt");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(int, index, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    RefPtr<Range> result = imp->getRangeAt(index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> removeAllRangesCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.removeAllRanges");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->removeAllRanges();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> addRangeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.addRange");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    EXCEPTION_BLOCK(Range*, range, V8Range::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Range::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    imp->addRange(range);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> toStringCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.toString");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    return v8String(imp->toString());
}

static v8::Handle<v8::Value> modifyCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.modify");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, alter, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, direction, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, granularity, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined));
    imp->modify(alter, direction, granularity);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setBaseAndExtentCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.setBaseAndExtent");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, baseNode, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, baseOffset, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    EXCEPTION_BLOCK(Node*, extentNode, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, extentOffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, MissingIsUndefined)));
    imp->setBaseAndExtent(baseNode, baseOffset, extentNode, extentOffset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setPositionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.setPosition");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, offset, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    imp->setPosition(node, offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> emptyCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMSelection.empty");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->empty();
    return v8::Handle<v8::Value>();
}

} // namespace DOMSelectionInternal

static const BatchedAttribute DOMSelectionAttrs[] = {
    // Attribute 'anchorNode' (Type: 'readonly attribute' ExtAttr: '')
    {"anchorNode", DOMSelectionInternal::anchorNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'anchorOffset' (Type: 'readonly attribute' ExtAttr: '')
    {"anchorOffset", DOMSelectionInternal::anchorOffsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'focusNode' (Type: 'readonly attribute' ExtAttr: '')
    {"focusNode", DOMSelectionInternal::focusNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'focusOffset' (Type: 'readonly attribute' ExtAttr: '')
    {"focusOffset", DOMSelectionInternal::focusOffsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'isCollapsed' (Type: 'readonly attribute' ExtAttr: '')
    {"isCollapsed", DOMSelectionInternal::isCollapsedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rangeCount' (Type: 'readonly attribute' ExtAttr: '')
    {"rangeCount", DOMSelectionInternal::rangeCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'baseNode' (Type: 'readonly attribute' ExtAttr: '')
    {"baseNode", DOMSelectionInternal::baseNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'baseOffset' (Type: 'readonly attribute' ExtAttr: '')
    {"baseOffset", DOMSelectionInternal::baseOffsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'extentNode' (Type: 'readonly attribute' ExtAttr: '')
    {"extentNode", DOMSelectionInternal::extentNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'extentOffset' (Type: 'readonly attribute' ExtAttr: '')
    {"extentOffset", DOMSelectionInternal::extentOffsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", DOMSelectionInternal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback DOMSelectionCallbacks[] = {
    {"collapseToEnd", DOMSelectionInternal::collapseToEndCallback},
    {"collapseToStart", DOMSelectionInternal::collapseToStartCallback},
    {"deleteFromDocument", DOMSelectionInternal::deleteFromDocumentCallback},
    {"getRangeAt", DOMSelectionInternal::getRangeAtCallback},
    {"removeAllRanges", DOMSelectionInternal::removeAllRangesCallback},
    {"modify", DOMSelectionInternal::modifyCallback},
    {"empty", DOMSelectionInternal::emptyCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8DOMSelectionTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "DOMSelection", v8::Persistent<v8::FunctionTemplate>(), V8DOMSelection::internalFieldCount,
        DOMSelectionAttrs, WTF_ARRAY_LENGTH(DOMSelectionAttrs),
        DOMSelectionCallbacks, WTF_ARRAY_LENGTH(DOMSelectionCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'collapse'
    const int collapseArgc = 2;
    v8::Handle<v8::FunctionTemplate> collapseArgv[collapseArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> collapseSignature = v8::Signature::New(desc, collapseArgc, collapseArgv);
    proto->Set(v8::String::New("collapse"), v8::FunctionTemplate::New(DOMSelectionInternal::collapseCallback, v8::Handle<v8::Value>(), collapseSignature));

    // Custom Signature 'containsNode'
    const int containsNodeArgc = 2;
    v8::Handle<v8::FunctionTemplate> containsNodeArgv[containsNodeArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> containsNodeSignature = v8::Signature::New(desc, containsNodeArgc, containsNodeArgv);
    proto->Set(v8::String::New("containsNode"), v8::FunctionTemplate::New(DOMSelectionInternal::containsNodeCallback, v8::Handle<v8::Value>(), containsNodeSignature));

    // Custom Signature 'selectAllChildren'
    const int selectAllChildrenArgc = 1;
    v8::Handle<v8::FunctionTemplate> selectAllChildrenArgv[selectAllChildrenArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> selectAllChildrenSignature = v8::Signature::New(desc, selectAllChildrenArgc, selectAllChildrenArgv);
    proto->Set(v8::String::New("selectAllChildren"), v8::FunctionTemplate::New(DOMSelectionInternal::selectAllChildrenCallback, v8::Handle<v8::Value>(), selectAllChildrenSignature));

    // Custom Signature 'extend'
    const int extendArgc = 2;
    v8::Handle<v8::FunctionTemplate> extendArgv[extendArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> extendSignature = v8::Signature::New(desc, extendArgc, extendArgv);
    proto->Set(v8::String::New("extend"), v8::FunctionTemplate::New(DOMSelectionInternal::extendCallback, v8::Handle<v8::Value>(), extendSignature));

    // Custom Signature 'addRange'
    const int addRangeArgc = 1;
    v8::Handle<v8::FunctionTemplate> addRangeArgv[addRangeArgc] = { V8Range::GetRawTemplate() };
    v8::Handle<v8::Signature> addRangeSignature = v8::Signature::New(desc, addRangeArgc, addRangeArgv);
    proto->Set(v8::String::New("addRange"), v8::FunctionTemplate::New(DOMSelectionInternal::addRangeCallback, v8::Handle<v8::Value>(), addRangeSignature));
    proto->Set(v8::String::New("toString"), v8::FunctionTemplate::New(DOMSelectionInternal::toStringCallback, v8::Handle<v8::Value>(), defaultSignature), static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::DontEnum));

    // Custom Signature 'setBaseAndExtent'
    const int setBaseAndExtentArgc = 4;
    v8::Handle<v8::FunctionTemplate> setBaseAndExtentArgv[setBaseAndExtentArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setBaseAndExtentSignature = v8::Signature::New(desc, setBaseAndExtentArgc, setBaseAndExtentArgv);
    proto->Set(v8::String::New("setBaseAndExtent"), v8::FunctionTemplate::New(DOMSelectionInternal::setBaseAndExtentCallback, v8::Handle<v8::Value>(), setBaseAndExtentSignature));

    // Custom Signature 'setPosition'
    const int setPositionArgc = 2;
    v8::Handle<v8::FunctionTemplate> setPositionArgv[setPositionArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setPositionSignature = v8::Signature::New(desc, setPositionArgc, setPositionArgv);
    proto->Set(v8::String::New("setPosition"), v8::FunctionTemplate::New(DOMSelectionInternal::setPositionCallback, v8::Handle<v8::Value>(), setPositionSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DOMSelection::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8DOMSelection::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8DOMSelectionTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8DOMSelection::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DOMSelection::wrapSlow(DOMSelection* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8DOMSelection::derefObject(void* object)
{
    static_cast<DOMSelection*>(object)->deref();
}

} // namespace WebCore
