/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8WebKitAnimation.h"

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8WebKitAnimation::info = { V8WebKitAnimation::GetTemplate, V8WebKitAnimation::derefObject, 0, 0 };

namespace WebKitAnimationInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.name._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8String(imp->name());
}

static v8::Handle<v8::Value> durationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.duration._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8::Number::New(imp->duration());
}

static v8::Handle<v8::Value> elapsedTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.elapsedTime._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8::Number::New(imp->elapsedTime());
}

static void elapsedTimeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.elapsedTime._set");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    imp->setElapsedTime(v);
    return;
}

static v8::Handle<v8::Value> delayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.delay._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8::Number::New(imp->delay());
}

static v8::Handle<v8::Value> pausedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.paused._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8Boolean(imp->paused());
}

static v8::Handle<v8::Value> endedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.ended._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8Boolean(imp->ended());
}

static v8::Handle<v8::Value> directionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.direction._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8::Integer::New(imp->direction());
}

static v8::Handle<v8::Value> fillModeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.WebKitAnimation.fillMode._get");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(info.Holder());
    return v8::Integer::New(imp->fillMode());
}

static v8::Handle<v8::Value> playCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.WebKitAnimation.play");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(args.Holder());
    imp->play();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> pauseCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.WebKitAnimation.pause");
    WebKitAnimation* imp = V8WebKitAnimation::toNative(args.Holder());
    imp->pause();
    return v8::Handle<v8::Value>();
}

} // namespace WebKitAnimationInternal

static const BatchedAttribute WebKitAnimationAttrs[] = {
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", WebKitAnimationInternal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'duration' (Type: 'readonly attribute' ExtAttr: '')
    {"duration", WebKitAnimationInternal::durationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'elapsedTime' (Type: 'attribute' ExtAttr: '')
    {"elapsedTime", WebKitAnimationInternal::elapsedTimeAttrGetter, WebKitAnimationInternal::elapsedTimeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'delay' (Type: 'readonly attribute' ExtAttr: '')
    {"delay", WebKitAnimationInternal::delayAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'iterationCount' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"iterationCount", V8WebKitAnimation::iterationCountAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'paused' (Type: 'readonly attribute' ExtAttr: '')
    {"paused", WebKitAnimationInternal::pausedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ended' (Type: 'readonly attribute' ExtAttr: '')
    {"ended", WebKitAnimationInternal::endedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'direction' (Type: 'readonly attribute' ExtAttr: '')
    {"direction", WebKitAnimationInternal::directionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fillMode' (Type: 'readonly attribute' ExtAttr: '')
    {"fillMode", WebKitAnimationInternal::fillModeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback WebKitAnimationCallbacks[] = {
    {"play", WebKitAnimationInternal::playCallback},
    {"pause", WebKitAnimationInternal::pauseCallback},
};

static const BatchedConstant WebKitAnimationConsts[] = {
    {"DIRECTION_NORMAL", static_cast<signed int>(0)},
    {"DIRECTION_ALTERNATE", static_cast<signed int>(1)},
    {"FILL_NONE", static_cast<signed int>(0)},
    {"FILL_BACKWARDS", static_cast<signed int>(1)},
    {"FILL_FORWARDS", static_cast<signed int>(2)},
    {"FILL_BOTH", static_cast<signed int>(3)},
};


COMPILE_ASSERT(0 == WebKitAnimation::DIRECTION_NORMAL, WebKitAnimationEnumDIRECTION_NORMALIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == WebKitAnimation::DIRECTION_ALTERNATE, WebKitAnimationEnumDIRECTION_ALTERNATEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0 == WebKitAnimation::FILL_NONE, WebKitAnimationEnumFILL_NONEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == WebKitAnimation::FILL_BACKWARDS, WebKitAnimationEnumFILL_BACKWARDSIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == WebKitAnimation::FILL_FORWARDS, WebKitAnimationEnumFILL_FORWARDSIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == WebKitAnimation::FILL_BOTH, WebKitAnimationEnumFILL_BOTHIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebKitAnimationTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "WebKitAnimation", v8::Persistent<v8::FunctionTemplate>(), V8WebKitAnimation::internalFieldCount,
        WebKitAnimationAttrs, WTF_ARRAY_LENGTH(WebKitAnimationAttrs),
        WebKitAnimationCallbacks, WTF_ARRAY_LENGTH(WebKitAnimationCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, WebKitAnimationConsts, WTF_ARRAY_LENGTH(WebKitAnimationConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebKitAnimation::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8WebKitAnimation::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8WebKitAnimationTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8WebKitAnimation::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebKitAnimation::wrapSlow(WebKitAnimation* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8WebKitAnimation::derefObject(void* object)
{
    static_cast<WebKitAnimation*>(object)->deref();
}

} // namespace WebCore
