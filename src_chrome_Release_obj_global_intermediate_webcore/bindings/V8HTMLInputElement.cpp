/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLInputElement.h"

#include "EventListener.h"
#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8FileList.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8HTMLOptionElement.h"
#include "V8IsolatedContext.h"
#include "V8NodeList.h"
#include "V8Proxy.h"
#include "V8ValidityState.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8HTMLInputElement::info = { V8HTMLInputElement::GetTemplate, V8HTMLInputElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLInputElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> defaultValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.defaultValue._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->defaultValue());
}

static void defaultValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.defaultValue._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setDefaultValue(v);
    return;
}

static v8::Handle<v8::Value> defaultCheckedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.defaultChecked._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::checkedAttr));
}

static void defaultCheckedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.defaultChecked._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::checkedAttr, v);
    return;
}

static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.form._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->form());
}

static v8::Handle<v8::Value> formActionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formAction._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::formactionAttr));
}

static void formActionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formAction._set");
    setElementStringAttr(info, HTMLNames::formactionAttr, value);
}

static v8::Handle<v8::Value> formEnctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formEnctype._get");
    return getElementStringAttr(info, HTMLNames::formenctypeAttr);
}

static void formEnctypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formEnctype._set");
    setElementStringAttr(info, HTMLNames::formenctypeAttr, value);
}

static v8::Handle<v8::Value> formMethodAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formMethod._get");
    return getElementStringAttr(info, HTMLNames::formmethodAttr);
}

static void formMethodAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formMethod._set");
    setElementStringAttr(info, HTMLNames::formmethodAttr, value);
}

static v8::Handle<v8::Value> formNoValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formNoValidate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::formnovalidateAttr));
}

static void formNoValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formNoValidate._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::formnovalidateAttr, v);
    return;
}

static v8::Handle<v8::Value> formTargetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formTarget._get");
    return getElementStringAttr(info, HTMLNames::formtargetAttr);
}

static void formTargetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.formTarget._set");
    setElementStringAttr(info, HTMLNames::formtargetAttr, value);
}

static v8::Handle<v8::Value> validityAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.validity._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->validity());
}

static v8::Handle<v8::Value> acceptAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.accept._get");
    return getElementStringAttr(info, HTMLNames::acceptAttr);
}

static void acceptAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.accept._set");
    setElementStringAttr(info, HTMLNames::acceptAttr, value);
}

static v8::Handle<v8::Value> accessKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.accessKey._get");
    return getElementStringAttr(info, HTMLNames::accesskeyAttr);
}

static void accessKeyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.accessKey._set");
    setElementStringAttr(info, HTMLNames::accesskeyAttr, value);
}

static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.align._get");
    return getElementStringAttr(info, HTMLNames::alignAttr);
}

static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.align._set");
    setElementStringAttr(info, HTMLNames::alignAttr, value);
}

static v8::Handle<v8::Value> altAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.alt._get");
    return getElementStringAttr(info, HTMLNames::altAttr);
}

static void altAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.alt._set");
    setElementStringAttr(info, HTMLNames::altAttr, value);
}

static v8::Handle<v8::Value> checkedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.checked._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->checked());
}

static void checkedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.checked._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setChecked(v);
    return;
}

static v8::Handle<v8::Value> disabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.disabled._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::disabledAttr));
}

static void disabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.disabled._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, v);
    return;
}

static v8::Handle<v8::Value> autofocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.autofocus._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::autofocusAttr));
}

static void autofocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.autofocus._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, v);
    return;
}

static v8::Handle<v8::Value> autocompleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.autocomplete._get");
    return getElementStringAttr(info, HTMLNames::autocompleteAttr);
}

static void autocompleteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.autocomplete._set");
    setElementStringAttr(info, HTMLNames::autocompleteAttr, value);
}

#if ENABLE(DATALIST)

static v8::Handle<v8::Value> listAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.list._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->list());
}

#endif // ENABLE(DATALIST)

static v8::Handle<v8::Value> maxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.max._get");
    return getElementStringAttr(info, HTMLNames::maxAttr);
}

static void maxAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.max._set");
    setElementStringAttr(info, HTMLNames::maxAttr, value);
}

static v8::Handle<v8::Value> maxLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.maxLength._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8::Integer::New(imp->maxLength());
}

static void maxLengthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.maxLength._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setMaxLength(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> minAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.min._get");
    return getElementStringAttr(info, HTMLNames::minAttr);
}

static void minAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.min._set");
    setElementStringAttr(info, HTMLNames::minAttr, value);
}

static v8::Handle<v8::Value> multipleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.multiple._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::multipleAttr));
}

static void multipleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.multiple._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::multipleAttr, v);
    return;
}

#if ENABLE(DIRECTORY_UPLOAD)

static v8::Handle<v8::Value> webkitdirectoryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.webkitdirectory._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::webkitdirectoryAttr));
}

#endif // ENABLE(DIRECTORY_UPLOAD)

#if ENABLE(DIRECTORY_UPLOAD)

static void webkitdirectoryAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.webkitdirectory._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::webkitdirectoryAttr, v);
    return;
}

#endif // ENABLE(DIRECTORY_UPLOAD)

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
}

static v8::Handle<v8::Value> patternAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.pattern._get");
    return getElementStringAttr(info, HTMLNames::patternAttr);
}

static void patternAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.pattern._set");
    setElementStringAttr(info, HTMLNames::patternAttr, value);
}

static v8::Handle<v8::Value> placeholderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.placeholder._get");
    return getElementStringAttr(info, HTMLNames::placeholderAttr);
}

static void placeholderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.placeholder._set");
    setElementStringAttr(info, HTMLNames::placeholderAttr, value);
}

static v8::Handle<v8::Value> readOnlyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.readOnly._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::readonlyAttr));
}

static void readOnlyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.readOnly._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::readonlyAttr, v);
    return;
}

static v8::Handle<v8::Value> requiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.required._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::requiredAttr));
}

static void requiredAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.required._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::requiredAttr, v);
    return;
}

static v8::Handle<v8::Value> sizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.size._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->size());
}

static void sizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.size._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setSize(v);
    return;
}

static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.src._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::srcAttr));
}

static void srcAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.src._set");
    setElementStringAttr(info, HTMLNames::srcAttr, value);
}

static v8::Handle<v8::Value> stepAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.step._get");
    return getElementStringAttr(info, HTMLNames::stepAttr);
}

static void stepAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.step._set");
    setElementStringAttr(info, HTMLNames::stepAttr, value);
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.type._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->type());
}

static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.type._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setType(v);
    return;
}

static v8::Handle<v8::Value> useMapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.useMap._get");
    return getElementStringAttr(info, HTMLNames::usemapAttr);
}

static void useMapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.useMap._set");
    setElementStringAttr(info, HTMLNames::usemapAttr, value);
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.value._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->value());
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.value._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setValue(v);
    return;
}

static v8::Handle<v8::Value> valueAsDateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.valueAsDate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8DateOrNull(imp->valueAsDate());
}

static void valueAsDateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.valueAsDate._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    double v = toWebCoreDate(value);
    ExceptionCode ec = 0;
    imp->setValueAsDate(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> valueAsNumberAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.valueAsNumber._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8::Number::New(imp->valueAsNumber());
}

static void valueAsNumberAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.valueAsNumber._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setValueAsNumber(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

#if ENABLE(DATALIST)

static v8::Handle<v8::Value> selectedOptionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.selectedOption._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->selectedOption());
}

#endif // ENABLE(DATALIST)

static v8::Handle<v8::Value> incrementalAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.incremental._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::incrementalAttr));
}

static void incrementalAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.incremental._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::incrementalAttr, v);
    return;
}

static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.willValidate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate());
}

static v8::Handle<v8::Value> validationMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.validationMessage._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->validationMessage());
}

static v8::Handle<v8::Value> indeterminateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.indeterminate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->indeterminate());
}

static void indeterminateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.indeterminate._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setIndeterminate(v);
    return;
}

static v8::Handle<v8::Value> filesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.files._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->files());
}

static v8::Handle<v8::Value> labelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.labels._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->labels());
}

#if ENABLE(INPUT_SPEECH)

static v8::Handle<v8::Value> webkitSpeechAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.webkitSpeech._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::webkitspeechAttr));
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static void webkitSpeechAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.webkitSpeech._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::webkitspeechAttr, v);
    return;
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static v8::Handle<v8::Value> webkitGrammarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.webkitGrammar._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::webkitgrammarAttr));
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static void webkitGrammarAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.webkitGrammar._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::webkitgrammarAttr, v);
    return;
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static v8::Handle<v8::Value> onwebkitspeechchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.onwebkitspeechchange._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return imp->onwebkitspeechchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitspeechchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static void onwebkitspeechchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLInputElement.onwebkitspeechchange._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    imp->setOnwebkitspeechchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(INPUT_SPEECH)

static v8::Handle<v8::Value> stepUpCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLInputElement.stepUp");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->stepUp(ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(int, n, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->stepUp(n, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> stepDownCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLInputElement.stepDown");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->stepDown(ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(int, n, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->stepDown(n, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLInputElement.checkValidity");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity());
}

static v8::Handle<v8::Value> setCustomValidityCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLInputElement.setCustomValidity");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, error, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->setCustomValidity(error);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> selectCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLInputElement.select");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    imp->select();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> clickCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLInputElement.click");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    imp->click();
    return v8::Handle<v8::Value>();
}

} // namespace HTMLInputElementInternal

static const BatchedAttribute HTMLInputElementAttrs[] = {
    // Attribute 'defaultValue' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"defaultValue", HTMLInputElementInternal::defaultValueAttrGetter, HTMLInputElementInternal::defaultValueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultChecked' (Type: 'attribute' ExtAttr: 'Reflect')
    {"defaultChecked", HTMLInputElementInternal::defaultCheckedAttrGetter, HTMLInputElementInternal::defaultCheckedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
    {"form", HTMLInputElementInternal::formAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formAction' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"formAction", HTMLInputElementInternal::formActionAttrGetter, HTMLInputElementInternal::formActionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formEnctype' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formEnctype", HTMLInputElementInternal::formEnctypeAttrGetter, HTMLInputElementInternal::formEnctypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formMethod' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formMethod", HTMLInputElementInternal::formMethodAttrGetter, HTMLInputElementInternal::formMethodAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formNoValidate' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formNoValidate", HTMLInputElementInternal::formNoValidateAttrGetter, HTMLInputElementInternal::formNoValidateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formTarget' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formTarget", HTMLInputElementInternal::formTargetAttrGetter, HTMLInputElementInternal::formTargetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validity' (Type: 'readonly attribute' ExtAttr: '')
    {"validity", HTMLInputElementInternal::validityAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'accept' (Type: 'attribute' ExtAttr: 'Reflect')
    {"accept", HTMLInputElementInternal::acceptAttrGetter, HTMLInputElementInternal::acceptAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'accessKey' (Type: 'attribute' ExtAttr: 'Reflect')
    {"accessKey", HTMLInputElementInternal::accessKeyAttrGetter, HTMLInputElementInternal::accessKeyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'align' (Type: 'attribute' ExtAttr: 'Reflect')
    {"align", HTMLInputElementInternal::alignAttrGetter, HTMLInputElementInternal::alignAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'alt' (Type: 'attribute' ExtAttr: 'Reflect')
    {"alt", HTMLInputElementInternal::altAttrGetter, HTMLInputElementInternal::altAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'checked' (Type: 'attribute' ExtAttr: '')
    {"checked", HTMLInputElementInternal::checkedAttrGetter, HTMLInputElementInternal::checkedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'disabled' (Type: 'attribute' ExtAttr: 'Reflect')
    {"disabled", HTMLInputElementInternal::disabledAttrGetter, HTMLInputElementInternal::disabledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autofocus' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autofocus", HTMLInputElementInternal::autofocusAttrGetter, HTMLInputElementInternal::autofocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autocomplete' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autocomplete", HTMLInputElementInternal::autocompleteAttrGetter, HTMLInputElementInternal::autocompleteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(DATALIST)
    // Attribute 'list' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"list", HTMLInputElementInternal::listAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(DATALIST)
    // Attribute 'max' (Type: 'attribute' ExtAttr: 'Reflect')
    {"max", HTMLInputElementInternal::maxAttrGetter, HTMLInputElementInternal::maxAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'maxLength' (Type: 'attribute' ExtAttr: '')
    {"maxLength", HTMLInputElementInternal::maxLengthAttrGetter, HTMLInputElementInternal::maxLengthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'min' (Type: 'attribute' ExtAttr: 'Reflect')
    {"min", HTMLInputElementInternal::minAttrGetter, HTMLInputElementInternal::minAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'multiple' (Type: 'attribute' ExtAttr: 'Reflect')
    {"multiple", HTMLInputElementInternal::multipleAttrGetter, HTMLInputElementInternal::multipleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(DIRECTORY_UPLOAD)
    // Attribute 'webkitdirectory' (Type: 'attribute' ExtAttr: 'Reflect Conditional')
    {"webkitdirectory", HTMLInputElementInternal::webkitdirectoryAttrGetter, HTMLInputElementInternal::webkitdirectoryAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(DIRECTORY_UPLOAD)
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLInputElementInternal::nameAttrGetter, HTMLInputElementInternal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pattern' (Type: 'attribute' ExtAttr: 'Reflect')
    {"pattern", HTMLInputElementInternal::patternAttrGetter, HTMLInputElementInternal::patternAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'placeholder' (Type: 'attribute' ExtAttr: 'Reflect')
    {"placeholder", HTMLInputElementInternal::placeholderAttrGetter, HTMLInputElementInternal::placeholderAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readOnly' (Type: 'attribute' ExtAttr: 'Reflect')
    {"readOnly", HTMLInputElementInternal::readOnlyAttrGetter, HTMLInputElementInternal::readOnlyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'required' (Type: 'attribute' ExtAttr: 'Reflect')
    {"required", HTMLInputElementInternal::requiredAttrGetter, HTMLInputElementInternal::requiredAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'size' (Type: 'attribute' ExtAttr: '')
    {"size", HTMLInputElementInternal::sizeAttrGetter, HTMLInputElementInternal::sizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'src' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"src", HTMLInputElementInternal::srcAttrGetter, HTMLInputElementInternal::srcAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'step' (Type: 'attribute' ExtAttr: 'Reflect')
    {"step", HTMLInputElementInternal::stepAttrGetter, HTMLInputElementInternal::stepAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"type", HTMLInputElementInternal::typeAttrGetter, HTMLInputElementInternal::typeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'useMap' (Type: 'attribute' ExtAttr: 'Reflect')
    {"useMap", HTMLInputElementInternal::useMapAttrGetter, HTMLInputElementInternal::useMapAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"value", HTMLInputElementInternal::valueAttrGetter, HTMLInputElementInternal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueAsDate' (Type: 'attribute' ExtAttr: '')
    {"valueAsDate", HTMLInputElementInternal::valueAsDateAttrGetter, HTMLInputElementInternal::valueAsDateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueAsNumber' (Type: 'attribute' ExtAttr: '')
    {"valueAsNumber", HTMLInputElementInternal::valueAsNumberAttrGetter, HTMLInputElementInternal::valueAsNumberAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(DATALIST)
    // Attribute 'selectedOption' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"selectedOption", HTMLInputElementInternal::selectedOptionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(DATALIST)
    // Attribute 'incremental' (Type: 'attribute' ExtAttr: 'Reflect')
    {"incremental", HTMLInputElementInternal::incrementalAttrGetter, HTMLInputElementInternal::incrementalAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
    {"willValidate", HTMLInputElementInternal::willValidateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validationMessage' (Type: 'readonly attribute' ExtAttr: '')
    {"validationMessage", HTMLInputElementInternal::validationMessageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'indeterminate' (Type: 'attribute' ExtAttr: '')
    {"indeterminate", HTMLInputElementInternal::indeterminateAttrGetter, HTMLInputElementInternal::indeterminateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionStart' (Type: 'attribute' ExtAttr: 'Custom')
    {"selectionStart", V8HTMLInputElement::selectionStartAccessorGetter, V8HTMLInputElement::selectionStartAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionEnd' (Type: 'attribute' ExtAttr: 'Custom')
    {"selectionEnd", V8HTMLInputElement::selectionEndAccessorGetter, V8HTMLInputElement::selectionEndAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionDirection' (Type: 'attribute' ExtAttr: 'Custom')
    {"selectionDirection", V8HTMLInputElement::selectionDirectionAccessorGetter, V8HTMLInputElement::selectionDirectionAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'files' (Type: 'readonly attribute' ExtAttr: '')
    {"files", HTMLInputElementInternal::filesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'labels' (Type: 'readonly attribute' ExtAttr: '')
    {"labels", HTMLInputElementInternal::labelsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(INPUT_SPEECH)
    // Attribute 'onwebkitspeechchange' (Type: 'attribute' ExtAttr: 'DontEnum Conditional')
    {"onwebkitspeechchange", HTMLInputElementInternal::onwebkitspeechchangeAttrGetter, HTMLInputElementInternal::onwebkitspeechchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(INPUT_SPEECH)
};

static const BatchedCallback HTMLInputElementCallbacks[] = {
    {"stepUp", HTMLInputElementInternal::stepUpCallback},
    {"stepDown", HTMLInputElementInternal::stepDownCallback},
    {"checkValidity", HTMLInputElementInternal::checkValidityCallback},
    {"setCustomValidity", HTMLInputElementInternal::setCustomValidityCallback},
    {"select", HTMLInputElementInternal::selectCallback},
    {"click", HTMLInputElementInternal::clickCallback},
    {"setSelectionRange", V8HTMLInputElement::setSelectionRangeCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLInputElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLInputElement", V8HTMLElement::GetTemplate(), V8HTMLInputElement::internalFieldCount,
        HTMLInputElementAttrs, WTF_ARRAY_LENGTH(HTMLInputElementAttrs),
        HTMLInputElementCallbacks, WTF_ARRAY_LENGTH(HTMLInputElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

#if ENABLE(INPUT_SPEECH)
    if (RuntimeEnabledFeatures::webkitSpeechEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitSpeech' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Reflect Conditional')
        {"webkitSpeech", HTMLInputElementInternal::webkitSpeechAttrGetter, HTMLInputElementInternal::webkitSpeechAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)
    if (RuntimeEnabledFeatures::webkitGrammarEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitGrammar' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Reflect Conditional')
        {"webkitGrammar", HTMLInputElementInternal::webkitGrammarAttrGetter, HTMLInputElementInternal::webkitGrammarAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(INPUT_SPEECH)

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLInputElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLInputElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLInputElement::wrapSlow(HTMLInputElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLInputElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLInputElement::derefObject(void* object)
{
    static_cast<HTMLInputElement*>(object)->deref();
}

} // namespace WebCore
