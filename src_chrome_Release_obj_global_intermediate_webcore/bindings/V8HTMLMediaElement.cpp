/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLMediaElement.h"

#if ENABLE(VIDEO)

#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8MediaError.h"
#include "V8Proxy.h"
#include "V8TimeRanges.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8HTMLMediaElement::info = { V8HTMLMediaElement::GetTemplate, V8HTMLMediaElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLMediaElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> errorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.error._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8(imp->error());
}

static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.src._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::srcAttr));
}

static void srcAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.src._set");
    setElementStringAttr(info, HTMLNames::srcAttr, value);
}

static v8::Handle<v8::Value> currentSrcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.currentSrc._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8String(imp->currentSrc());
}

static v8::Handle<v8::Value> networkStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.networkState._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Integer::New(imp->networkState());
}

static v8::Handle<v8::Value> preloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.preload._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8String(imp->preload());
}

static void preloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.preload._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setPreload(v);
    return;
}

static v8::Handle<v8::Value> bufferedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.buffered._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8(imp->buffered());
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.readyState._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Integer::New(imp->readyState());
}

static v8::Handle<v8::Value> seekingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.seeking._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->seeking());
}

static v8::Handle<v8::Value> currentTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.currentTime._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->currentTime());
}

static void currentTimeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.currentTime._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setCurrentTime(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> initialTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.initialTime._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->initialTime());
}

static v8::Handle<v8::Value> startTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.startTime._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->startTime());
}

static v8::Handle<v8::Value> durationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.duration._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->duration());
}

static v8::Handle<v8::Value> pausedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.paused._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->paused());
}

static v8::Handle<v8::Value> defaultPlaybackRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.defaultPlaybackRate._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->defaultPlaybackRate());
}

static void defaultPlaybackRateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.defaultPlaybackRate._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setDefaultPlaybackRate(v);
    return;
}

static v8::Handle<v8::Value> playbackRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.playbackRate._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->playbackRate());
}

static void playbackRateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.playbackRate._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setPlaybackRate(v);
    return;
}

static v8::Handle<v8::Value> playedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.played._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8(imp->played());
}

static v8::Handle<v8::Value> seekableAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.seekable._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8(imp->seekable());
}

static v8::Handle<v8::Value> endedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.ended._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->ended());
}

static v8::Handle<v8::Value> autoplayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.autoplay._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::autoplayAttr));
}

static void autoplayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.autoplay._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::autoplayAttr, v);
    return;
}

static v8::Handle<v8::Value> loopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.loop._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::loopAttr));
}

static void loopAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.loop._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::loopAttr, v);
    return;
}

static v8::Handle<v8::Value> controlsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.controls._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->controls());
}

static void controlsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.controls._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setControls(v);
    return;
}

static v8::Handle<v8::Value> volumeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.volume._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->volume());
}

static void volumeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.volume._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setVolume(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> mutedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.muted._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->muted());
}

static void mutedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.muted._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setMuted(v);
    return;
}

static v8::Handle<v8::Value> defaultMutedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.defaultMuted._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::mutedAttr));
}

static void defaultMutedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.defaultMuted._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::mutedAttr, v);
    return;
}

static v8::Handle<v8::Value> webkitPreservesPitchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.webkitPreservesPitch._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->webkitPreservesPitch());
}

static void webkitPreservesPitchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.webkitPreservesPitch._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setWebkitPreservesPitch(v);
    return;
}

static v8::Handle<v8::Value> webkitHasClosedCaptionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.webkitHasClosedCaptions._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->webkitHasClosedCaptions());
}

static v8::Handle<v8::Value> webkitClosedCaptionsVisibleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.webkitClosedCaptionsVisible._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->webkitClosedCaptionsVisible());
}

static void webkitClosedCaptionsVisibleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.webkitClosedCaptionsVisible._set");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setWebkitClosedCaptionsVisible(v);
    return;
}

#if ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> webkitAudioDecodedByteCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.webkitAudioDecodedByteCount._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->webkitAudioDecodedByteCount());
}

#endif // ENABLE(MEDIA_STATISTICS)

#if ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> webkitVideoDecodedByteCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMediaElement.webkitVideoDecodedByteCount._get");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->webkitVideoDecodedByteCount());
}

#endif // ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> loadCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLMediaElement.load");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->load(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> canPlayTypeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLMediaElement.canPlayType");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, type, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8String(imp->canPlayType(type));
}

static v8::Handle<v8::Value> playCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLMediaElement.play");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    imp->play();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> pauseCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLMediaElement.pause");
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    imp->pause();
    return v8::Handle<v8::Value>();
}

} // namespace HTMLMediaElementInternal

static const BatchedAttribute HTMLMediaElementAttrs[] = {
    // Attribute 'error' (Type: 'readonly attribute' ExtAttr: '')
    {"error", HTMLMediaElementInternal::errorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'src' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"src", HTMLMediaElementInternal::srcAttrGetter, HTMLMediaElementInternal::srcAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentSrc' (Type: 'readonly attribute' ExtAttr: 'URL')
    {"currentSrc", HTMLMediaElementInternal::currentSrcAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'networkState' (Type: 'readonly attribute' ExtAttr: '')
    {"networkState", HTMLMediaElementInternal::networkStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'preload' (Type: 'attribute' ExtAttr: '')
    {"preload", HTMLMediaElementInternal::preloadAttrGetter, HTMLMediaElementInternal::preloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'buffered' (Type: 'readonly attribute' ExtAttr: '')
    {"buffered", HTMLMediaElementInternal::bufferedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", HTMLMediaElementInternal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'seeking' (Type: 'readonly attribute' ExtAttr: '')
    {"seeking", HTMLMediaElementInternal::seekingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentTime' (Type: 'attribute' ExtAttr: '')
    {"currentTime", HTMLMediaElementInternal::currentTimeAttrGetter, HTMLMediaElementInternal::currentTimeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'initialTime' (Type: 'readonly attribute' ExtAttr: '')
    {"initialTime", HTMLMediaElementInternal::initialTimeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'startTime' (Type: 'readonly attribute' ExtAttr: '')
    {"startTime", HTMLMediaElementInternal::startTimeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'duration' (Type: 'readonly attribute' ExtAttr: '')
    {"duration", HTMLMediaElementInternal::durationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'paused' (Type: 'readonly attribute' ExtAttr: '')
    {"paused", HTMLMediaElementInternal::pausedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultPlaybackRate' (Type: 'attribute' ExtAttr: '')
    {"defaultPlaybackRate", HTMLMediaElementInternal::defaultPlaybackRateAttrGetter, HTMLMediaElementInternal::defaultPlaybackRateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'playbackRate' (Type: 'attribute' ExtAttr: '')
    {"playbackRate", HTMLMediaElementInternal::playbackRateAttrGetter, HTMLMediaElementInternal::playbackRateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'played' (Type: 'readonly attribute' ExtAttr: '')
    {"played", HTMLMediaElementInternal::playedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'seekable' (Type: 'readonly attribute' ExtAttr: '')
    {"seekable", HTMLMediaElementInternal::seekableAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ended' (Type: 'readonly attribute' ExtAttr: '')
    {"ended", HTMLMediaElementInternal::endedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autoplay' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autoplay", HTMLMediaElementInternal::autoplayAttrGetter, HTMLMediaElementInternal::autoplayAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'loop' (Type: 'attribute' ExtAttr: 'Reflect')
    {"loop", HTMLMediaElementInternal::loopAttrGetter, HTMLMediaElementInternal::loopAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'controls' (Type: 'attribute' ExtAttr: '')
    {"controls", HTMLMediaElementInternal::controlsAttrGetter, HTMLMediaElementInternal::controlsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'volume' (Type: 'attribute' ExtAttr: '')
    {"volume", HTMLMediaElementInternal::volumeAttrGetter, HTMLMediaElementInternal::volumeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'muted' (Type: 'attribute' ExtAttr: '')
    {"muted", HTMLMediaElementInternal::mutedAttrGetter, HTMLMediaElementInternal::mutedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultMuted' (Type: 'attribute' ExtAttr: 'Reflect')
    {"defaultMuted", HTMLMediaElementInternal::defaultMutedAttrGetter, HTMLMediaElementInternal::defaultMutedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitPreservesPitch' (Type: 'attribute' ExtAttr: '')
    {"webkitPreservesPitch", HTMLMediaElementInternal::webkitPreservesPitchAttrGetter, HTMLMediaElementInternal::webkitPreservesPitchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitHasClosedCaptions' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitHasClosedCaptions", HTMLMediaElementInternal::webkitHasClosedCaptionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitClosedCaptionsVisible' (Type: 'attribute' ExtAttr: '')
    {"webkitClosedCaptionsVisible", HTMLMediaElementInternal::webkitClosedCaptionsVisibleAttrGetter, HTMLMediaElementInternal::webkitClosedCaptionsVisibleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(MEDIA_STATISTICS)
    // Attribute 'webkitAudioDecodedByteCount' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitAudioDecodedByteCount", HTMLMediaElementInternal::webkitAudioDecodedByteCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(MEDIA_STATISTICS)
#if ENABLE(MEDIA_STATISTICS)
    // Attribute 'webkitVideoDecodedByteCount' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitVideoDecodedByteCount", HTMLMediaElementInternal::webkitVideoDecodedByteCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(MEDIA_STATISTICS)
};

static const BatchedCallback HTMLMediaElementCallbacks[] = {
    {"load", HTMLMediaElementInternal::loadCallback},
    {"canPlayType", HTMLMediaElementInternal::canPlayTypeCallback},
    {"play", HTMLMediaElementInternal::playCallback},
    {"pause", HTMLMediaElementInternal::pauseCallback},
};

static const BatchedConstant HTMLMediaElementConsts[] = {
    {"NETWORK_EMPTY", static_cast<signed int>(0)},
    {"NETWORK_IDLE", static_cast<signed int>(1)},
    {"NETWORK_LOADING", static_cast<signed int>(2)},
    {"NETWORK_NO_SOURCE", static_cast<signed int>(3)},
    {"HAVE_NOTHING", static_cast<signed int>(0)},
    {"HAVE_METADATA", static_cast<signed int>(1)},
    {"HAVE_CURRENT_DATA", static_cast<signed int>(2)},
    {"HAVE_FUTURE_DATA", static_cast<signed int>(3)},
    {"HAVE_ENOUGH_DATA", static_cast<signed int>(4)},
};


COMPILE_ASSERT(0 == HTMLMediaElement::NETWORK_EMPTY, HTMLMediaElementEnumNETWORK_EMPTYIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == HTMLMediaElement::NETWORK_IDLE, HTMLMediaElementEnumNETWORK_IDLEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == HTMLMediaElement::NETWORK_LOADING, HTMLMediaElementEnumNETWORK_LOADINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == HTMLMediaElement::NETWORK_NO_SOURCE, HTMLMediaElementEnumNETWORK_NO_SOURCEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0 == HTMLMediaElement::HAVE_NOTHING, HTMLMediaElementEnumHAVE_NOTHINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == HTMLMediaElement::HAVE_METADATA, HTMLMediaElementEnumHAVE_METADATAIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == HTMLMediaElement::HAVE_CURRENT_DATA, HTMLMediaElementEnumHAVE_CURRENT_DATAIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == HTMLMediaElement::HAVE_FUTURE_DATA, HTMLMediaElementEnumHAVE_FUTURE_DATAIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == HTMLMediaElement::HAVE_ENOUGH_DATA, HTMLMediaElementEnumHAVE_ENOUGH_DATAIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLMediaElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLMediaElement", V8HTMLElement::GetTemplate(), V8HTMLMediaElement::internalFieldCount,
        HTMLMediaElementAttrs, WTF_ARRAY_LENGTH(HTMLMediaElementAttrs),
        HTMLMediaElementCallbacks, WTF_ARRAY_LENGTH(HTMLMediaElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, HTMLMediaElementConsts, WTF_ARRAY_LENGTH(HTMLMediaElementConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLMediaElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLMediaElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLMediaElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLMediaElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLMediaElement::wrapSlow(HTMLMediaElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLMediaElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLMediaElement::derefObject(void* object)
{
    static_cast<HTMLMediaElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(VIDEO)
