/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBKeyRange.h"

#if ENABLE(INDEXED_DATABASE)

#include "ExceptionCode.h"
#include "IDBBindingUtilities.h"
#include "IDBKey.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IDBKey.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8IDBKeyRange::info = { V8IDBKeyRange::GetTemplate, V8IDBKeyRange::derefObject, 0, 0 };

namespace IDBKeyRangeInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> lowerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBKeyRange.lower._get");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(info.Holder());
    return toV8(imp->lower());
}

static v8::Handle<v8::Value> upperAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBKeyRange.upper._get");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(info.Holder());
    return toV8(imp->upper());
}

static v8::Handle<v8::Value> lowerOpenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBKeyRange.lowerOpen._get");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(info.Holder());
    return v8Boolean(imp->lowerOpen());
}

static v8::Handle<v8::Value> upperOpenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBKeyRange.upperOpen._get");
    IDBKeyRange* imp = V8IDBKeyRange::toNative(info.Holder());
    return v8Boolean(imp->upperOpen());
}

static v8::Handle<v8::Value> onlyCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.only");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    ExceptionCode ec = 0;
    {
    RefPtr<IDBKey> value = createIDBKeyFromValue(args[0]);
    if (UNLIKELY(!value)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    return toV8(IDBKeyRange::only(value));
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> lowerBoundCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.lowerBound");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    ExceptionCode ec = 0;
    {
    RefPtr<IDBKey> bound = createIDBKeyFromValue(args[0]);
    if (UNLIKELY(!bound)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    if (args.Length() <= 1) {
        return toV8(IDBKeyRange::lowerBound(bound));
    }
    EXCEPTION_BLOCK(bool, open, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    return toV8(IDBKeyRange::lowerBound(bound, open));
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> upperBoundCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.upperBound");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    ExceptionCode ec = 0;
    {
    RefPtr<IDBKey> bound = createIDBKeyFromValue(args[0]);
    if (UNLIKELY(!bound)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    if (args.Length() <= 1) {
        return toV8(IDBKeyRange::upperBound(bound));
    }
    EXCEPTION_BLOCK(bool, open, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    return toV8(IDBKeyRange::upperBound(bound, open));
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> boundCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBKeyRange.bound");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    ExceptionCode ec = 0;
    {
    RefPtr<IDBKey> lower = createIDBKeyFromValue(args[0]);
    if (UNLIKELY(!lower)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    RefPtr<IDBKey> upper = createIDBKeyFromValue(args[1]);
    if (UNLIKELY(!upper)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    if (args.Length() <= 2) {
        return toV8(IDBKeyRange::bound(lower, upper));
    }
    EXCEPTION_BLOCK(bool, lowerOpen, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    if (args.Length() <= 3) {
        return toV8(IDBKeyRange::bound(lower, upper, lowerOpen));
    }
    EXCEPTION_BLOCK(bool, upperOpen, MAYBE_MISSING_PARAMETER(args, 3, MissingIsUndefined)->BooleanValue());
    return toV8(IDBKeyRange::bound(lower, upper, lowerOpen, upperOpen));
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace IDBKeyRangeInternal

static const BatchedAttribute IDBKeyRangeAttrs[] = {
    // Attribute 'lower' (Type: 'readonly attribute' ExtAttr: '')
    {"lower", IDBKeyRangeInternal::lowerAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'upper' (Type: 'readonly attribute' ExtAttr: '')
    {"upper", IDBKeyRangeInternal::upperAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lowerOpen' (Type: 'readonly attribute' ExtAttr: '')
    {"lowerOpen", IDBKeyRangeInternal::lowerOpenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'upperOpen' (Type: 'readonly attribute' ExtAttr: '')
    {"upperOpen", IDBKeyRangeInternal::upperOpenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBKeyRangeTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "IDBKeyRange", v8::Persistent<v8::FunctionTemplate>(), V8IDBKeyRange::internalFieldCount,
        IDBKeyRangeAttrs, WTF_ARRAY_LENGTH(IDBKeyRangeAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    desc->Set(v8::String::New("only"), v8::FunctionTemplate::New(IDBKeyRangeInternal::onlyCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));
    desc->Set(v8::String::New("lowerBound"), v8::FunctionTemplate::New(IDBKeyRangeInternal::lowerBoundCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));
    desc->Set(v8::String::New("upperBound"), v8::FunctionTemplate::New(IDBKeyRangeInternal::upperBoundCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));
    desc->Set(v8::String::New("bound"), v8::FunctionTemplate::New(IDBKeyRangeInternal::boundCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBKeyRange::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8IDBKeyRange::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8IDBKeyRangeTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8IDBKeyRange::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBKeyRange::wrapSlow(IDBKeyRange* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8IDBKeyRange::derefObject(void* object)
{
    static_cast<IDBKeyRange*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
