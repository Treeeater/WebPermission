/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8XMLHttpRequest.h"

#include "EventListener.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8Blob.h"
#include "V8DOMWrapper.h"
#include "V8Document.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8XMLHttpRequestUpload.h"

namespace WebCore {

WrapperTypeInfo V8XMLHttpRequest::info = { V8XMLHttpRequest::GetTemplate, V8XMLHttpRequest::derefObject, V8XMLHttpRequest::toActiveDOMObject, 0 };

namespace XMLHttpRequestInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onabort._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onabort._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8XMLHttpRequest::eventListenerCacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onerror._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onerror._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8XMLHttpRequest::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onload._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onload._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8XMLHttpRequest::eventListenerCacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onloadstart._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onloadstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onloadstart._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onloadstart(), value, V8XMLHttpRequest::eventListenerCacheIndex);
    imp->setOnloadstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onprogress._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onprogress._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8XMLHttpRequest::eventListenerCacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onreadystatechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onreadystatechange._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onreadystatechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreadystatechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onreadystatechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.onreadystatechange._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onreadystatechange(), value, V8XMLHttpRequest::eventListenerCacheIndex);
    imp->setOnreadystatechange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.readyState._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return v8::Integer::New(imp->readyState());
}

#if ENABLE(XHR_RESPONSE_BLOB)

static v8::Handle<v8::Value> asBlobAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.asBlob._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return v8Boolean(imp->asBlob());
}

#endif // ENABLE(XHR_RESPONSE_BLOB)

#if ENABLE(XHR_RESPONSE_BLOB)

static void asBlobAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.asBlob._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    bool v = value->BooleanValue();
    ExceptionCode ec = 0;
    imp->setAsBlob(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

#endif // ENABLE(XHR_RESPONSE_BLOB)

static v8::Handle<v8::Value> withCredentialsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.withCredentials._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return v8Boolean(imp->withCredentials());
}

static void withCredentialsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.withCredentials._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    bool v = value->BooleanValue();
    ExceptionCode ec = 0;
    imp->setWithCredentials(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> uploadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.upload._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    RefPtr<XMLHttpRequestUpload> result = imp->upload();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "upload", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> responseXMLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.responseXML._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    ExceptionCode ec = 0;
    RefPtr<Document> v = imp->responseXML(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    return toV8(v.release());
}

#if ENABLE(XHR_RESPONSE_BLOB)

static v8::Handle<v8::Value> responseBlobAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.responseBlob._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    ExceptionCode ec = 0;
    RefPtr<Blob> v = imp->responseBlob(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    RefPtr<Blob> result = imp->responseBlob(ec);
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "responseBlob", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(XHR_RESPONSE_BLOB)

static v8::Handle<v8::Value> responseTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.responseType._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return v8String(imp->responseType());
}

static void responseTypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.responseType._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    ExceptionCode ec = 0;
    imp->setResponseType(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> statusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.status._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    ExceptionCode ec = 0;
    int v = imp->status(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    return v8::Integer::New(v);
}

static v8::Handle<v8::Value> statusTextAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.XMLHttpRequest.statusText._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    ExceptionCode ec = 0;
    String v = imp->statusText(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    return v8String(v);
}

static v8::Handle<v8::Value> setRequestHeaderCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.setRequestHeader");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, header, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, value, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    imp->setRequestHeader(header, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> abortCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.abort");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    imp->abort();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getAllResponseHeadersCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.getAllResponseHeaders");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    String result = imp->getAllResponseHeaders(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8StringOrUndefined(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getResponseHeaderCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.getResponseHeader");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, header, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    String result = imp->getResponseHeader(header, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8StringOrNull(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> overrideMimeTypeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.overrideMimeType");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, override, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->overrideMimeType(override);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.addEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8XMLHttpRequest::toNative(args.Holder())->addEventListener(v8ValueToAtomicWebCoreString(args[0]), listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8XMLHttpRequest::eventListenerCacheIndex);
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.removeEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8XMLHttpRequest::toNative(args.Holder())->removeEventListener(v8ValueToAtomicWebCoreString(args[0]), listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8XMLHttpRequest::eventListenerCacheIndex);
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.XMLHttpRequest.dispatchEvent");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace XMLHttpRequestInternal

static const BatchedAttribute XMLHttpRequestAttrs[] = {
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: '')
    {"onabort", XMLHttpRequestInternal::onabortAttrGetter, XMLHttpRequestInternal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
    {"onerror", XMLHttpRequestInternal::onerrorAttrGetter, XMLHttpRequestInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: '')
    {"onload", XMLHttpRequestInternal::onloadAttrGetter, XMLHttpRequestInternal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onloadstart' (Type: 'attribute' ExtAttr: '')
    {"onloadstart", XMLHttpRequestInternal::onloadstartAttrGetter, XMLHttpRequestInternal::onloadstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onprogress' (Type: 'attribute' ExtAttr: '')
    {"onprogress", XMLHttpRequestInternal::onprogressAttrGetter, XMLHttpRequestInternal::onprogressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onreadystatechange' (Type: 'attribute' ExtAttr: '')
    {"onreadystatechange", XMLHttpRequestInternal::onreadystatechangeAttrGetter, XMLHttpRequestInternal::onreadystatechangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", XMLHttpRequestInternal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'withCredentials' (Type: 'attribute' ExtAttr: '')
    {"withCredentials", XMLHttpRequestInternal::withCredentialsAttrGetter, XMLHttpRequestInternal::withCredentialsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'upload' (Type: 'readonly attribute' ExtAttr: '')
    {"upload", XMLHttpRequestInternal::uploadAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseText' (Type: 'readonly attribute' ExtAttr: 'CustomGetter')
    {"responseText", V8XMLHttpRequest::responseTextAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseXML' (Type: 'readonly attribute' ExtAttr: '')
    {"responseXML", XMLHttpRequestInternal::responseXMLAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseType' (Type: 'attribute' ExtAttr: '')
    {"responseType", XMLHttpRequestInternal::responseTypeAttrGetter, XMLHttpRequestInternal::responseTypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'response' (Type: 'readonly attribute' ExtAttr: 'CustomGetter')
    {"response", V8XMLHttpRequest::responseAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'status' (Type: 'readonly attribute' ExtAttr: '')
    {"status", XMLHttpRequestInternal::statusAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'statusText' (Type: 'readonly attribute' ExtAttr: '')
    {"statusText", XMLHttpRequestInternal::statusTextAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback XMLHttpRequestCallbacks[] = {
    {"open", V8XMLHttpRequest::openCallback},
    {"setRequestHeader", XMLHttpRequestInternal::setRequestHeaderCallback},
    {"send", V8XMLHttpRequest::sendCallback},
    {"abort", XMLHttpRequestInternal::abortCallback},
    {"getAllResponseHeaders", XMLHttpRequestInternal::getAllResponseHeadersCallback},
    {"getResponseHeader", XMLHttpRequestInternal::getResponseHeaderCallback},
    {"overrideMimeType", XMLHttpRequestInternal::overrideMimeTypeCallback},
    {"addEventListener", XMLHttpRequestInternal::addEventListenerCallback},
    {"removeEventListener", XMLHttpRequestInternal::removeEventListenerCallback},
};

static const BatchedConstant XMLHttpRequestConsts[] = {
    {"UNSENT", static_cast<signed int>(0)},
    {"OPENED", static_cast<signed int>(1)},
    {"HEADERS_RECEIVED", static_cast<signed int>(2)},
    {"LOADING", static_cast<signed int>(3)},
    {"DONE", static_cast<signed int>(4)},
};


COMPILE_ASSERT(0 == XMLHttpRequest::UNSENT, XMLHttpRequestEnumUNSENTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == XMLHttpRequest::OPENED, XMLHttpRequestEnumOPENEDIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == XMLHttpRequest::HEADERS_RECEIVED, XMLHttpRequestEnumHEADERS_RECEIVEDIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == XMLHttpRequest::LOADING, XMLHttpRequestEnumLOADINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == XMLHttpRequest::DONE, XMLHttpRequestEnumDONEIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8XMLHttpRequestTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "XMLHttpRequest", v8::Persistent<v8::FunctionTemplate>(), V8XMLHttpRequest::internalFieldCount,
        XMLHttpRequestAttrs, WTF_ARRAY_LENGTH(XMLHttpRequestAttrs),
        XMLHttpRequestCallbacks, WTF_ARRAY_LENGTH(XMLHttpRequestCallbacks));
    desc->SetCallHandler(V8XMLHttpRequest::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

#if ENABLE(XHR_RESPONSE_BLOB)
    if (RuntimeEnabledFeatures::asBlobEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'asBlob' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"asBlob", XMLHttpRequestInternal::asBlobAttrGetter, XMLHttpRequestInternal::asBlobAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(XHR_RESPONSE_BLOB)

#if ENABLE(XHR_RESPONSE_BLOB)
    if (RuntimeEnabledFeatures::responseBlobEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'responseBlob' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"responseBlob", XMLHttpRequestInternal::responseBlobAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(XHR_RESPONSE_BLOB)

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(XMLHttpRequestInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEventSignature));
    batchConfigureConstants(desc, proto, XMLHttpRequestConsts, WTF_ARRAY_LENGTH(XMLHttpRequestConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequest::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequest::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8XMLHttpRequestTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8XMLHttpRequest::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

ActiveDOMObject* V8XMLHttpRequest::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8XMLHttpRequest::wrapSlow(XMLHttpRequest* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getActiveDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8XMLHttpRequest::derefObject(void* object)
{
    static_cast<XMLHttpRequest*>(object)->deref();
}

} // namespace WebCore
