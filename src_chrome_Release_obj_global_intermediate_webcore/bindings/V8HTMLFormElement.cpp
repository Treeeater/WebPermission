/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLFormElement.h"

#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8Collection.h"
#include "V8DOMWrapper.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8HTMLFormElement::info = { V8HTMLFormElement::GetTemplate, V8HTMLFormElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLFormElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> elementsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.elements._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return toV8(imp->elements());
}

static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.length._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8::Integer::New(imp->length());
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
}

static v8::Handle<v8::Value> noValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.noValidate._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::novalidateAttr));
}

static void noValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.noValidate._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::novalidateAttr, v);
    return;
}

static v8::Handle<v8::Value> acceptCharsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.acceptCharset._get");
    return getElementStringAttr(info, HTMLNames::accept_charsetAttr);
}

static void acceptCharsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.acceptCharset._set");
    setElementStringAttr(info, HTMLNames::accept_charsetAttr, value);
}

static v8::Handle<v8::Value> actionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.action._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::actionAttr));
}

static void actionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.action._set");
    setElementStringAttr(info, HTMLNames::actionAttr, value);
}

static v8::Handle<v8::Value> encodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.encoding._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->encoding());
}

static void encodingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.encoding._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setEncoding(v);
    return;
}

static v8::Handle<v8::Value> enctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.enctype._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->enctype());
}

static void enctypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.enctype._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setEnctype(v);
    return;
}

static v8::Handle<v8::Value> methodAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.method._get");
    return getElementStringAttr(info, HTMLNames::methodAttr);
}

static void methodAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.method._set");
    setElementStringAttr(info, HTMLNames::methodAttr, value);
}

static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.target._get");
    return getElementStringAttr(info, HTMLNames::targetAttr);
}

static void targetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.target._set");
    setElementStringAttr(info, HTMLNames::targetAttr, value);
}

static v8::Handle<v8::Value> autocompleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.autocomplete._get");
    return getElementStringAttr(info, HTMLNames::autocompleteAttr);
}

static void autocompleteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLFormElement.autocomplete._set");
    setElementStringAttr(info, HTMLNames::autocompleteAttr, value);
}

static v8::Handle<v8::Value> submitCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLFormElement.submit");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    imp->submitFromJavaScript();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> resetCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLFormElement.reset");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    imp->reset();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLFormElement.checkValidity");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity());
}

} // namespace HTMLFormElementInternal

static const BatchedAttribute HTMLFormElementAttrs[] = {
    // Attribute 'elements' (Type: 'readonly attribute' ExtAttr: '')
    {"elements", HTMLFormElementInternal::elementsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
    {"length", HTMLFormElementInternal::lengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLFormElementInternal::nameAttrGetter, HTMLFormElementInternal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'noValidate' (Type: 'attribute' ExtAttr: 'Reflect')
    {"noValidate", HTMLFormElementInternal::noValidateAttrGetter, HTMLFormElementInternal::noValidateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'acceptCharset' (Type: 'attribute' ExtAttr: 'Reflect')
    {"acceptCharset", HTMLFormElementInternal::acceptCharsetAttrGetter, HTMLFormElementInternal::acceptCharsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'action' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"action", HTMLFormElementInternal::actionAttrGetter, HTMLFormElementInternal::actionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'encoding' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"encoding", HTMLFormElementInternal::encodingAttrGetter, HTMLFormElementInternal::encodingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'enctype' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"enctype", HTMLFormElementInternal::enctypeAttrGetter, HTMLFormElementInternal::enctypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'method' (Type: 'attribute' ExtAttr: 'Reflect')
    {"method", HTMLFormElementInternal::methodAttrGetter, HTMLFormElementInternal::methodAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'target' (Type: 'attribute' ExtAttr: 'Reflect')
    {"target", HTMLFormElementInternal::targetAttrGetter, HTMLFormElementInternal::targetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autocomplete' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autocomplete", HTMLFormElementInternal::autocompleteAttrGetter, HTMLFormElementInternal::autocompleteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback HTMLFormElementCallbacks[] = {
    {"submit", HTMLFormElementInternal::submitCallback},
    {"reset", HTMLFormElementInternal::resetCallback},
    {"checkValidity", HTMLFormElementInternal::checkValidityCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLFormElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLFormElement", V8HTMLElement::GetTemplate(), V8HTMLFormElement::internalFieldCount,
        HTMLFormElementAttrs, WTF_ARRAY_LENGTH(HTMLFormElementAttrs),
        HTMLFormElementCallbacks, WTF_ARRAY_LENGTH(HTMLFormElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    desc->InstanceTemplate()->SetIndexedPropertyHandler(V8HTMLFormElement::indexedPropertyGetter, 0, 0, 0, nodeCollectionIndexedPropertyEnumerator<HTMLFormElement>);
    desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLFormElement::namedPropertyGetter, 0, 0, 0, 0);

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLFormElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLFormElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLFormElement::wrapSlow(HTMLFormElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLFormElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLFormElement::derefObject(void* object)
{
    static_cast<HTMLFormElement*>(object)->deref();
}

} // namespace WebCore
