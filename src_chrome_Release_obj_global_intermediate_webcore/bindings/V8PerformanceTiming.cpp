/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8PerformanceTiming.h"

#if ENABLE(WEB_TIMING)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8PerformanceTiming::info = { V8PerformanceTiming::GetTemplate, V8PerformanceTiming::derefObject, 0, 0 };

namespace PerformanceTimingInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> navigationStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.navigationStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->navigationStart()));
}

static v8::Handle<v8::Value> unloadEventStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.unloadEventStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->unloadEventStart()));
}

static v8::Handle<v8::Value> unloadEventEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.unloadEventEnd._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->unloadEventEnd()));
}

static v8::Handle<v8::Value> redirectStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.redirectStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->redirectStart()));
}

static v8::Handle<v8::Value> redirectEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.redirectEnd._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->redirectEnd()));
}

static v8::Handle<v8::Value> fetchStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.fetchStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->fetchStart()));
}

static v8::Handle<v8::Value> domainLookupStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.domainLookupStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domainLookupStart()));
}

static v8::Handle<v8::Value> domainLookupEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.domainLookupEnd._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domainLookupEnd()));
}

static v8::Handle<v8::Value> connectStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.connectStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->connectStart()));
}

static v8::Handle<v8::Value> connectEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.connectEnd._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->connectEnd()));
}

static v8::Handle<v8::Value> secureConnectionStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.secureConnectionStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->secureConnectionStart()));
}

static v8::Handle<v8::Value> requestStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.requestStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->requestStart()));
}

static v8::Handle<v8::Value> responseStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.responseStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->responseStart()));
}

static v8::Handle<v8::Value> responseEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.responseEnd._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->responseEnd()));
}

static v8::Handle<v8::Value> domLoadingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.domLoading._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domLoading()));
}

static v8::Handle<v8::Value> domInteractiveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.domInteractive._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domInteractive()));
}

static v8::Handle<v8::Value> domContentLoadedEventStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.domContentLoadedEventStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domContentLoadedEventStart()));
}

static v8::Handle<v8::Value> domContentLoadedEventEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.domContentLoadedEventEnd._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domContentLoadedEventEnd()));
}

static v8::Handle<v8::Value> domCompleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.domComplete._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->domComplete()));
}

static v8::Handle<v8::Value> loadEventStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.loadEventStart._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->loadEventStart()));
}

static v8::Handle<v8::Value> loadEventEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.PerformanceTiming.loadEventEnd._get");
    PerformanceTiming* imp = V8PerformanceTiming::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->loadEventEnd()));
}

} // namespace PerformanceTimingInternal

static const BatchedAttribute PerformanceTimingAttrs[] = {
    // Attribute 'navigationStart' (Type: 'readonly attribute' ExtAttr: '')
    {"navigationStart", PerformanceTimingInternal::navigationStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'unloadEventStart' (Type: 'readonly attribute' ExtAttr: '')
    {"unloadEventStart", PerformanceTimingInternal::unloadEventStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'unloadEventEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"unloadEventEnd", PerformanceTimingInternal::unloadEventEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'redirectStart' (Type: 'readonly attribute' ExtAttr: '')
    {"redirectStart", PerformanceTimingInternal::redirectStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'redirectEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"redirectEnd", PerformanceTimingInternal::redirectEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fetchStart' (Type: 'readonly attribute' ExtAttr: '')
    {"fetchStart", PerformanceTimingInternal::fetchStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domainLookupStart' (Type: 'readonly attribute' ExtAttr: '')
    {"domainLookupStart", PerformanceTimingInternal::domainLookupStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domainLookupEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"domainLookupEnd", PerformanceTimingInternal::domainLookupEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'connectStart' (Type: 'readonly attribute' ExtAttr: '')
    {"connectStart", PerformanceTimingInternal::connectStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'connectEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"connectEnd", PerformanceTimingInternal::connectEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'secureConnectionStart' (Type: 'readonly attribute' ExtAttr: '')
    {"secureConnectionStart", PerformanceTimingInternal::secureConnectionStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requestStart' (Type: 'readonly attribute' ExtAttr: '')
    {"requestStart", PerformanceTimingInternal::requestStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseStart' (Type: 'readonly attribute' ExtAttr: '')
    {"responseStart", PerformanceTimingInternal::responseStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"responseEnd", PerformanceTimingInternal::responseEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domLoading' (Type: 'readonly attribute' ExtAttr: '')
    {"domLoading", PerformanceTimingInternal::domLoadingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domInteractive' (Type: 'readonly attribute' ExtAttr: '')
    {"domInteractive", PerformanceTimingInternal::domInteractiveAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domContentLoadedEventStart' (Type: 'readonly attribute' ExtAttr: '')
    {"domContentLoadedEventStart", PerformanceTimingInternal::domContentLoadedEventStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domContentLoadedEventEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"domContentLoadedEventEnd", PerformanceTimingInternal::domContentLoadedEventEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domComplete' (Type: 'readonly attribute' ExtAttr: '')
    {"domComplete", PerformanceTimingInternal::domCompleteAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'loadEventStart' (Type: 'readonly attribute' ExtAttr: '')
    {"loadEventStart", PerformanceTimingInternal::loadEventStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'loadEventEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"loadEventEnd", PerformanceTimingInternal::loadEventEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8PerformanceTimingTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "PerformanceTiming", v8::Persistent<v8::FunctionTemplate>(), V8PerformanceTiming::internalFieldCount,
        PerformanceTimingAttrs, WTF_ARRAY_LENGTH(PerformanceTimingAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8PerformanceTiming::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8PerformanceTiming::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8PerformanceTimingTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8PerformanceTiming::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8PerformanceTiming::wrapSlow(PerformanceTiming* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8PerformanceTiming::derefObject(void* object)
{
    static_cast<PerformanceTiming*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_TIMING)
