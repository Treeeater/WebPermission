/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Node.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8Document.h"
#include "V8Element.h"
#include "V8Event.h"
#include "V8IsolatedContext.h"
#include "V8NamedNodeMap.h"
#include "V8NodeList.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8Node::info = { V8Node::GetTemplate, V8Node::derefObject, 0, 0 };

namespace NodeInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> nodeNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.nodeName._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->nodeName());
}

static v8::Handle<v8::Value> nodeValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.nodeValue._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->nodeValue());
}

static void nodeValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.nodeValue._set");
    Node* imp = V8Node::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setNodeValue(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> nodeTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.nodeType._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8::Integer::New(imp->nodeType());
}

static v8::Handle<v8::Value> parentNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.parentNode._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->parentNode());
}

static v8::Handle<v8::Value> childNodesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.childNodes._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->childNodes());
}

static v8::Handle<v8::Value> firstChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.firstChild._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->firstChild());
}

static v8::Handle<v8::Value> lastChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.lastChild._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->lastChild());
}

static v8::Handle<v8::Value> previousSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.previousSibling._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->previousSibling());
}

static v8::Handle<v8::Value> nextSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.nextSibling._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->nextSibling());
}

static v8::Handle<v8::Value> attributesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.attributes._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->attributes());
}

static v8::Handle<v8::Value> ownerDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.ownerDocument._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->ownerDocument());
}

static v8::Handle<v8::Value> namespaceURIAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.namespaceURI._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->namespaceURI());
}

static v8::Handle<v8::Value> prefixAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.prefix._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->prefix());
}

static void prefixAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.prefix._set");
    Node* imp = V8Node::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setPrefix(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> localNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.localName._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->localName());
}

static v8::Handle<v8::Value> baseURIAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.baseURI._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->baseURI());
}

static v8::Handle<v8::Value> textContentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.textContent._get");
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->textContent());
}

static void textContentAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.textContent._set");
    Node* imp = V8Node::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setTextContent(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> parentElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Node.parentElement._get");
    Node* imp = V8Node::toNative(info.Holder());
    return toV8(imp->parentElement());
}

static v8::Handle<v8::Value> hasChildNodesCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.hasChildNodes");
    Node* imp = V8Node::toNative(args.Holder());
    return v8Boolean(imp->hasChildNodes());
}

static v8::Handle<v8::Value> cloneNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.cloneNode");
    Node* imp = V8Node::toNative(args.Holder());
    EXCEPTION_BLOCK(bool, deep, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->BooleanValue());
    return toV8(imp->cloneNode(deep));
}

static v8::Handle<v8::Value> normalizeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.normalize");
    Node* imp = V8Node::toNative(args.Holder());
    imp->normalize();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> isSupportedCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.isSupported");
    Node* imp = V8Node::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, feature, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, version, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return v8Boolean(imp->isSupported(feature, version));
}

static v8::Handle<v8::Value> hasAttributesCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.hasAttributes");
    Node* imp = V8Node::toNative(args.Holder());
    return v8Boolean(imp->hasAttributes());
}

static v8::Handle<v8::Value> isSameNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.isSameNode");
    Node* imp = V8Node::toNative(args.Holder());
    EXCEPTION_BLOCK(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    return v8Boolean(imp->isSameNode(other));
}

static v8::Handle<v8::Value> isEqualNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.isEqualNode");
    Node* imp = V8Node::toNative(args.Holder());
    EXCEPTION_BLOCK(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    return v8Boolean(imp->isEqualNode(other));
}

static v8::Handle<v8::Value> lookupPrefixCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.lookupPrefix");
    Node* imp = V8Node::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8StringOrNull(imp->lookupPrefix(namespaceURI));
}

static v8::Handle<v8::Value> isDefaultNamespaceCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.isDefaultNamespace");
    Node* imp = V8Node::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->isDefaultNamespace(namespaceURI));
}

static v8::Handle<v8::Value> lookupNamespaceURICallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.lookupNamespaceURI");
    Node* imp = V8Node::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, prefix, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8StringOrNull(imp->lookupNamespaceURI(prefix));
}

static v8::Handle<v8::Value> compareDocumentPositionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.compareDocumentPosition");
    Node* imp = V8Node::toNative(args.Holder());
    EXCEPTION_BLOCK(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    return v8::Integer::New(imp->compareDocumentPosition(other));
}

static v8::Handle<v8::Value> containsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.contains");
    Node* imp = V8Node::toNative(args.Holder());
    EXCEPTION_BLOCK(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    return v8Boolean(imp->contains(other));
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.addEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8Node::toNative(args.Holder())->addEventListener(v8ValueToAtomicWebCoreString(args[0]), listener, args[2]->BooleanValue());
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.removeEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8Node::toNative(args.Holder())->removeEventListener(v8ValueToAtomicWebCoreString(args[0]), listener.get(), args[2]->BooleanValue());
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Node.dispatchEvent");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Node* imp = V8Node::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Event*, event, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    bool result = imp->dispatchEvent(event, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace NodeInternal

static const BatchedAttribute NodeAttrs[] = {
    // Attribute 'nodeName' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"nodeName", NodeInternal::nodeNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nodeValue' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
    {"nodeValue", NodeInternal::nodeValueAttrGetter, NodeInternal::nodeValueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nodeType' (Type: 'readonly attribute' ExtAttr: '')
    {"nodeType", NodeInternal::nodeTypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'parentNode' (Type: 'readonly attribute' ExtAttr: '')
    {"parentNode", NodeInternal::parentNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'childNodes' (Type: 'readonly attribute' ExtAttr: '')
    {"childNodes", NodeInternal::childNodesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'firstChild' (Type: 'readonly attribute' ExtAttr: '')
    {"firstChild", NodeInternal::firstChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastChild' (Type: 'readonly attribute' ExtAttr: '')
    {"lastChild", NodeInternal::lastChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'previousSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"previousSibling", NodeInternal::previousSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nextSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"nextSibling", NodeInternal::nextSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'attributes' (Type: 'readonly attribute' ExtAttr: '')
    {"attributes", NodeInternal::attributesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ownerDocument' (Type: 'readonly attribute' ExtAttr: '')
    {"ownerDocument", NodeInternal::ownerDocumentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'namespaceURI' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"namespaceURI", NodeInternal::namespaceURIAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'prefix' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
    {"prefix", NodeInternal::prefixAttrGetter, NodeInternal::prefixAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'localName' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"localName", NodeInternal::localNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'baseURI' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"baseURI", NodeInternal::baseURIAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'textContent' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
    {"textContent", NodeInternal::textContentAttrGetter, NodeInternal::textContentAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'parentElement' (Type: 'readonly attribute' ExtAttr: '')
    {"parentElement", NodeInternal::parentElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback NodeCallbacks[] = {
    {"insertBefore", V8Node::insertBeforeCallback},
    {"replaceChild", V8Node::replaceChildCallback},
    {"removeChild", V8Node::removeChildCallback},
    {"appendChild", V8Node::appendChildCallback},
    {"hasChildNodes", NodeInternal::hasChildNodesCallback},
    {"cloneNode", NodeInternal::cloneNodeCallback},
    {"normalize", NodeInternal::normalizeCallback},
    {"isSupported", NodeInternal::isSupportedCallback},
    {"hasAttributes", NodeInternal::hasAttributesCallback},
    {"lookupPrefix", NodeInternal::lookupPrefixCallback},
    {"isDefaultNamespace", NodeInternal::isDefaultNamespaceCallback},
    {"lookupNamespaceURI", NodeInternal::lookupNamespaceURICallback},
    {"addEventListener", NodeInternal::addEventListenerCallback},
    {"removeEventListener", NodeInternal::removeEventListenerCallback},
};

static const BatchedConstant NodeConsts[] = {
    {"ELEMENT_NODE", static_cast<signed int>(1)},
    {"ATTRIBUTE_NODE", static_cast<signed int>(2)},
    {"TEXT_NODE", static_cast<signed int>(3)},
    {"CDATA_SECTION_NODE", static_cast<signed int>(4)},
    {"ENTITY_REFERENCE_NODE", static_cast<signed int>(5)},
    {"ENTITY_NODE", static_cast<signed int>(6)},
    {"PROCESSING_INSTRUCTION_NODE", static_cast<signed int>(7)},
    {"COMMENT_NODE", static_cast<signed int>(8)},
    {"DOCUMENT_NODE", static_cast<signed int>(9)},
    {"DOCUMENT_TYPE_NODE", static_cast<signed int>(10)},
    {"DOCUMENT_FRAGMENT_NODE", static_cast<signed int>(11)},
    {"NOTATION_NODE", static_cast<signed int>(12)},
    {"DOCUMENT_POSITION_DISCONNECTED", static_cast<signed int>(0x01)},
    {"DOCUMENT_POSITION_PRECEDING", static_cast<signed int>(0x02)},
    {"DOCUMENT_POSITION_FOLLOWING", static_cast<signed int>(0x04)},
    {"DOCUMENT_POSITION_CONTAINS", static_cast<signed int>(0x08)},
    {"DOCUMENT_POSITION_CONTAINED_BY", static_cast<signed int>(0x10)},
    {"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", static_cast<signed int>(0x20)},
};


COMPILE_ASSERT(1 == Node::ELEMENT_NODE, NodeEnumELEMENT_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == Node::ATTRIBUTE_NODE, NodeEnumATTRIBUTE_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == Node::TEXT_NODE, NodeEnumTEXT_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(4 == Node::CDATA_SECTION_NODE, NodeEnumCDATA_SECTION_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(5 == Node::ENTITY_REFERENCE_NODE, NodeEnumENTITY_REFERENCE_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(6 == Node::ENTITY_NODE, NodeEnumENTITY_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(7 == Node::PROCESSING_INSTRUCTION_NODE, NodeEnumPROCESSING_INSTRUCTION_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(8 == Node::COMMENT_NODE, NodeEnumCOMMENT_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(9 == Node::DOCUMENT_NODE, NodeEnumDOCUMENT_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(10 == Node::DOCUMENT_TYPE_NODE, NodeEnumDOCUMENT_TYPE_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(11 == Node::DOCUMENT_FRAGMENT_NODE, NodeEnumDOCUMENT_FRAGMENT_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(12 == Node::NOTATION_NODE, NodeEnumNOTATION_NODEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x01 == Node::DOCUMENT_POSITION_DISCONNECTED, NodeEnumDOCUMENT_POSITION_DISCONNECTEDIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x02 == Node::DOCUMENT_POSITION_PRECEDING, NodeEnumDOCUMENT_POSITION_PRECEDINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x04 == Node::DOCUMENT_POSITION_FOLLOWING, NodeEnumDOCUMENT_POSITION_FOLLOWINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x08 == Node::DOCUMENT_POSITION_CONTAINS, NodeEnumDOCUMENT_POSITION_CONTAINSIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x10 == Node::DOCUMENT_POSITION_CONTAINED_BY, NodeEnumDOCUMENT_POSITION_CONTAINED_BYIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x20 == Node::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, NodeEnumDOCUMENT_POSITION_IMPLEMENTATION_SPECIFICIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NodeTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Node", v8::Persistent<v8::FunctionTemplate>(), V8Node::internalFieldCount,
        NodeAttrs, WTF_ARRAY_LENGTH(NodeAttrs),
        NodeCallbacks, WTF_ARRAY_LENGTH(NodeCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'isSameNode'
    const int isSameNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> isSameNodeArgv[isSameNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> isSameNodeSignature = v8::Signature::New(desc, isSameNodeArgc, isSameNodeArgv);
    proto->Set(v8::String::New("isSameNode"), v8::FunctionTemplate::New(NodeInternal::isSameNodeCallback, v8::Handle<v8::Value>(), isSameNodeSignature));

    // Custom Signature 'isEqualNode'
    const int isEqualNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> isEqualNodeArgv[isEqualNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> isEqualNodeSignature = v8::Signature::New(desc, isEqualNodeArgc, isEqualNodeArgv);
    proto->Set(v8::String::New("isEqualNode"), v8::FunctionTemplate::New(NodeInternal::isEqualNodeCallback, v8::Handle<v8::Value>(), isEqualNodeSignature));

    // Custom Signature 'compareDocumentPosition'
    const int compareDocumentPositionArgc = 1;
    v8::Handle<v8::FunctionTemplate> compareDocumentPositionArgv[compareDocumentPositionArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> compareDocumentPositionSignature = v8::Signature::New(desc, compareDocumentPositionArgc, compareDocumentPositionArgv);
    proto->Set(v8::String::New("compareDocumentPosition"), v8::FunctionTemplate::New(NodeInternal::compareDocumentPositionCallback, v8::Handle<v8::Value>(), compareDocumentPositionSignature));

    // Custom Signature 'contains'
    const int containsArgc = 1;
    v8::Handle<v8::FunctionTemplate> containsArgv[containsArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> containsSignature = v8::Signature::New(desc, containsArgc, containsArgv);
    proto->Set(v8::String::New("contains"), v8::FunctionTemplate::New(NodeInternal::containsCallback, v8::Handle<v8::Value>(), containsSignature));

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(NodeInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEventSignature));
    batchConfigureConstants(desc, proto, NodeConsts, WTF_ARRAY_LENGTH(NodeConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Node::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Node::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NodeTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Node::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Node::wrapSlow(Node* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8Node::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8Node::derefObject(void* object)
{
    static_cast<Node*>(object)->deref();
}

} // namespace WebCore
