/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8AudioPannerNode.h"

#if ENABLE(WEB_AUDIO)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AudioGain.h"
#include "V8AudioNode.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8AudioPannerNode::info = { V8AudioPannerNode::GetTemplate, V8AudioPannerNode::derefObject, 0, &V8AudioNode::info };

namespace AudioPannerNodeInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> panningModelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.panningModel._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->panningModel());
}

static void panningModelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.panningModel._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setPanningModel(v);
    return;
}

static v8::Handle<v8::Value> distanceModelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.distanceModel._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->distanceModel());
}

static void distanceModelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.distanceModel._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setDistanceModel(v);
    return;
}

static v8::Handle<v8::Value> refDistanceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.refDistance._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Number::New(imp->refDistance());
}

static void refDistanceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.refDistance._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setRefDistance(v);
    return;
}

static v8::Handle<v8::Value> maxDistanceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.maxDistance._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Number::New(imp->maxDistance());
}

static void maxDistanceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.maxDistance._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setMaxDistance(v);
    return;
}

static v8::Handle<v8::Value> rolloffFactorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.rolloffFactor._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Number::New(imp->rolloffFactor());
}

static void rolloffFactorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.rolloffFactor._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setRolloffFactor(v);
    return;
}

static v8::Handle<v8::Value> coneInnerAngleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.coneInnerAngle._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Number::New(imp->coneInnerAngle());
}

static void coneInnerAngleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.coneInnerAngle._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setConeInnerAngle(v);
    return;
}

static v8::Handle<v8::Value> coneOuterAngleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.coneOuterAngle._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Number::New(imp->coneOuterAngle());
}

static void coneOuterAngleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.coneOuterAngle._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setConeOuterAngle(v);
    return;
}

static v8::Handle<v8::Value> coneOuterGainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.coneOuterGain._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    return v8::Number::New(imp->coneOuterGain());
}

static void coneOuterGainAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.coneOuterGain._set");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setConeOuterGain(v);
    return;
}

static v8::Handle<v8::Value> coneGainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.coneGain._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    RefPtr<AudioGain> result = imp->coneGain();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "coneGain", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> distanceGainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.AudioPannerNode.distanceGain._get");
    AudioPannerNode* imp = V8AudioPannerNode::toNative(info.Holder());
    RefPtr<AudioGain> result = imp->distanceGain();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "distanceGain", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> setPositionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.AudioPannerNode.setPosition");
    if (args.Length() < 3)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    AudioPannerNode* imp = V8AudioPannerNode::toNative(args.Holder());
    EXCEPTION_BLOCK(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, z, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->NumberValue()));
    imp->setPosition(x, y, z);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setOrientationCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.AudioPannerNode.setOrientation");
    if (args.Length() < 3)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    AudioPannerNode* imp = V8AudioPannerNode::toNative(args.Holder());
    EXCEPTION_BLOCK(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, z, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->NumberValue()));
    imp->setOrientation(x, y, z);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setVelocityCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.AudioPannerNode.setVelocity");
    if (args.Length() < 3)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    AudioPannerNode* imp = V8AudioPannerNode::toNative(args.Holder());
    EXCEPTION_BLOCK(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, z, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->NumberValue()));
    imp->setVelocity(x, y, z);
    return v8::Handle<v8::Value>();
}

} // namespace AudioPannerNodeInternal

static const BatchedAttribute AudioPannerNodeAttrs[] = {
    // Attribute 'panningModel' (Type: 'attribute' ExtAttr: '')
    {"panningModel", AudioPannerNodeInternal::panningModelAttrGetter, AudioPannerNodeInternal::panningModelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'distanceModel' (Type: 'attribute' ExtAttr: '')
    {"distanceModel", AudioPannerNodeInternal::distanceModelAttrGetter, AudioPannerNodeInternal::distanceModelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'refDistance' (Type: 'attribute' ExtAttr: '')
    {"refDistance", AudioPannerNodeInternal::refDistanceAttrGetter, AudioPannerNodeInternal::refDistanceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'maxDistance' (Type: 'attribute' ExtAttr: '')
    {"maxDistance", AudioPannerNodeInternal::maxDistanceAttrGetter, AudioPannerNodeInternal::maxDistanceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rolloffFactor' (Type: 'attribute' ExtAttr: '')
    {"rolloffFactor", AudioPannerNodeInternal::rolloffFactorAttrGetter, AudioPannerNodeInternal::rolloffFactorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'coneInnerAngle' (Type: 'attribute' ExtAttr: '')
    {"coneInnerAngle", AudioPannerNodeInternal::coneInnerAngleAttrGetter, AudioPannerNodeInternal::coneInnerAngleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'coneOuterAngle' (Type: 'attribute' ExtAttr: '')
    {"coneOuterAngle", AudioPannerNodeInternal::coneOuterAngleAttrGetter, AudioPannerNodeInternal::coneOuterAngleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'coneOuterGain' (Type: 'attribute' ExtAttr: '')
    {"coneOuterGain", AudioPannerNodeInternal::coneOuterGainAttrGetter, AudioPannerNodeInternal::coneOuterGainAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'coneGain' (Type: 'readonly attribute' ExtAttr: '')
    {"coneGain", AudioPannerNodeInternal::coneGainAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'distanceGain' (Type: 'readonly attribute' ExtAttr: '')
    {"distanceGain", AudioPannerNodeInternal::distanceGainAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback AudioPannerNodeCallbacks[] = {
    {"setPosition", AudioPannerNodeInternal::setPositionCallback},
    {"setOrientation", AudioPannerNodeInternal::setOrientationCallback},
    {"setVelocity", AudioPannerNodeInternal::setVelocityCallback},
};

static const BatchedConstant AudioPannerNodeConsts[] = {
    {"EQUALPOWER", static_cast<signed int>(0)},
    {"HRTF", static_cast<signed int>(1)},
    {"SOUNDFIELD", static_cast<signed int>(2)},
};


COMPILE_ASSERT(0 == AudioPannerNode::EQUALPOWER, AudioPannerNodeEnumEQUALPOWERIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == AudioPannerNode::HRTF, AudioPannerNodeEnumHRTFIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == AudioPannerNode::SOUNDFIELD, AudioPannerNodeEnumSOUNDFIELDIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8AudioPannerNodeTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "AudioPannerNode", V8AudioNode::GetTemplate(), V8AudioPannerNode::internalFieldCount,
        AudioPannerNodeAttrs, WTF_ARRAY_LENGTH(AudioPannerNodeAttrs),
        AudioPannerNodeCallbacks, WTF_ARRAY_LENGTH(AudioPannerNodeCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, AudioPannerNodeConsts, WTF_ARRAY_LENGTH(AudioPannerNodeConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8AudioPannerNode::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8AudioPannerNode::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8AudioPannerNodeTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8AudioPannerNode::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8AudioPannerNode::wrapSlow(AudioPannerNode* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8AudioPannerNode::derefObject(void* object)
{
    static_cast<AudioPannerNode*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_AUDIO)
