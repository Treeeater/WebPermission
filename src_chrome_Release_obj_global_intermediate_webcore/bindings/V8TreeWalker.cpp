/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8TreeWalker.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8NodeFilter.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8TreeWalker::info = { V8TreeWalker::GetTemplate, V8TreeWalker::derefObject, 0, 0 };

namespace TreeWalkerInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> rootAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TreeWalker.root._get");
    TreeWalker* imp = V8TreeWalker::toNative(info.Holder());
    return toV8(imp->root());
}

static v8::Handle<v8::Value> whatToShowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TreeWalker.whatToShow._get");
    TreeWalker* imp = V8TreeWalker::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->whatToShow());
}

static v8::Handle<v8::Value> filterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TreeWalker.filter._get");
    TreeWalker* imp = V8TreeWalker::toNative(info.Holder());
    return toV8(imp->filter());
}

static v8::Handle<v8::Value> expandEntityReferencesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TreeWalker.expandEntityReferences._get");
    TreeWalker* imp = V8TreeWalker::toNative(info.Holder());
    return v8Boolean(imp->expandEntityReferences());
}

static v8::Handle<v8::Value> currentNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TreeWalker.currentNode._get");
    TreeWalker* imp = V8TreeWalker::toNative(info.Holder());
    return toV8(imp->currentNode());
}

static void currentNodeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.TreeWalker.currentNode._set");
    TreeWalker* imp = V8TreeWalker::toNative(info.Holder());
    Node* v = V8Node::HasInstance(value) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setCurrentNode(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> parentNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TreeWalker.parentNode");
    TreeWalker* imp = V8TreeWalker::toNative(args.Holder());
    EmptyScriptState state;
    RefPtr<Node> result = imp->parentNode(&state);
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
}

static v8::Handle<v8::Value> firstChildCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TreeWalker.firstChild");
    TreeWalker* imp = V8TreeWalker::toNative(args.Holder());
    EmptyScriptState state;
    RefPtr<Node> result = imp->firstChild(&state);
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
}

static v8::Handle<v8::Value> lastChildCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TreeWalker.lastChild");
    TreeWalker* imp = V8TreeWalker::toNative(args.Holder());
    EmptyScriptState state;
    RefPtr<Node> result = imp->lastChild(&state);
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
}

static v8::Handle<v8::Value> previousSiblingCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TreeWalker.previousSibling");
    TreeWalker* imp = V8TreeWalker::toNative(args.Holder());
    EmptyScriptState state;
    RefPtr<Node> result = imp->previousSibling(&state);
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
}

static v8::Handle<v8::Value> nextSiblingCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TreeWalker.nextSibling");
    TreeWalker* imp = V8TreeWalker::toNative(args.Holder());
    EmptyScriptState state;
    RefPtr<Node> result = imp->nextSibling(&state);
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
}

static v8::Handle<v8::Value> previousNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TreeWalker.previousNode");
    TreeWalker* imp = V8TreeWalker::toNative(args.Holder());
    EmptyScriptState state;
    RefPtr<Node> result = imp->previousNode(&state);
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
}

static v8::Handle<v8::Value> nextNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.TreeWalker.nextNode");
    TreeWalker* imp = V8TreeWalker::toNative(args.Holder());
    EmptyScriptState state;
    RefPtr<Node> result = imp->nextNode(&state);
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
}

} // namespace TreeWalkerInternal

static const BatchedAttribute TreeWalkerAttrs[] = {
    // Attribute 'root' (Type: 'readonly attribute' ExtAttr: '')
    {"root", TreeWalkerInternal::rootAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'whatToShow' (Type: 'readonly attribute' ExtAttr: '')
    {"whatToShow", TreeWalkerInternal::whatToShowAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'filter' (Type: 'readonly attribute' ExtAttr: '')
    {"filter", TreeWalkerInternal::filterAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'expandEntityReferences' (Type: 'readonly attribute' ExtAttr: '')
    {"expandEntityReferences", TreeWalkerInternal::expandEntityReferencesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentNode' (Type: 'attribute' ExtAttr: '')
    {"currentNode", TreeWalkerInternal::currentNodeAttrGetter, TreeWalkerInternal::currentNodeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback TreeWalkerCallbacks[] = {
    {"parentNode", TreeWalkerInternal::parentNodeCallback},
    {"firstChild", TreeWalkerInternal::firstChildCallback},
    {"lastChild", TreeWalkerInternal::lastChildCallback},
    {"previousSibling", TreeWalkerInternal::previousSiblingCallback},
    {"nextSibling", TreeWalkerInternal::nextSiblingCallback},
    {"previousNode", TreeWalkerInternal::previousNodeCallback},
    {"nextNode", TreeWalkerInternal::nextNodeCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8TreeWalkerTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "TreeWalker", v8::Persistent<v8::FunctionTemplate>(), V8TreeWalker::internalFieldCount,
        TreeWalkerAttrs, WTF_ARRAY_LENGTH(TreeWalkerAttrs),
        TreeWalkerCallbacks, WTF_ARRAY_LENGTH(TreeWalkerCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8TreeWalker::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8TreeWalker::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8TreeWalkerTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8TreeWalker::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8TreeWalker::wrapSlow(TreeWalker* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8TreeWalker::derefObject(void* object)
{
    static_cast<TreeWalker*>(object)->deref();
}

} // namespace WebCore
