/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Document.h"

#include "CSSMutableStyleDeclaration.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "PlatformString.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Attr.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CDATASection.h"
#include "V8CSSStyleDeclaration.h"
#include "V8Comment.h"
#include "V8DOMImplementation.h"
#include "V8DOMSelection.h"
#include "V8DOMWindow.h"
#include "V8DOMWrapper.h"
#include "V8DocumentFragment.h"
#include "V8DocumentType.h"
#include "V8Element.h"
#include "V8EntityReference.h"
#include "V8Event.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8HTMLHeadElement.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8NodeIterator.h"
#include "V8NodeList.h"
#include "V8ProcessingInstruction.h"
#include "V8Proxy.h"
#include "V8Range.h"
#include "V8StyleSheetList.h"
#include "V8Text.h"
#include "V8Touch.h"
#include "V8TreeWalker.h"
#include "V8XPathExpression.h"
#include "V8XPathNSResolver.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8Document::info = { V8Document::GetTemplate, V8Document::derefObject, 0, &V8Node::info };

namespace DocumentInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> doctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.doctype._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->doctype());
}

static v8::Handle<v8::Value> implementationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.implementation._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->implementation());
}

static v8::Handle<v8::Value> documentElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.documentElement._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->documentElement());
}

static v8::Handle<v8::Value> inputEncodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.inputEncoding._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->inputEncoding());
}

static v8::Handle<v8::Value> xmlEncodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.xmlEncoding._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->xmlEncoding());
}

static v8::Handle<v8::Value> xmlVersionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.xmlVersion._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->xmlVersion());
}

static void xmlVersionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.xmlVersion._set");
    Document* imp = V8Document::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setXMLVersion(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> xmlStandaloneAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.xmlStandalone._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->xmlStandalone());
}

static void xmlStandaloneAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.xmlStandalone._set");
    Document* imp = V8Document::toNative(info.Holder());
    bool v = value->BooleanValue();
    ExceptionCode ec = 0;
    imp->setXMLStandalone(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> documentURIAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.documentURI._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->documentURI());
}

static void documentURIAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.documentURI._set");
    Document* imp = V8Document::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setDocumentURI(v);
    return;
}

static v8::Handle<v8::Value> defaultViewAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.defaultView._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->defaultView());
}

static v8::Handle<v8::Value> styleSheetsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.styleSheets._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->styleSheets());
}

static v8::Handle<v8::Value> titleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.title._get");
    Document* imp = V8Document::toNative(info.Holder());
	if ((V8IsolatedContext::getThirdPartyId()!="")&&(V8IsolatedContext::getThirdPartyId()!=0))
	{
		String toWrite = "document.title read by ";
		toWrite.append(V8IsolatedContext::getThirdPartyId());
		imp->writeThirdPartyLog(toWrite);
	}
    return v8String(imp->title());
}

static void titleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.title._set");
    Document* imp = V8Document::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setTitle(v);
    return;
}

static v8::Handle<v8::Value> referrerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.referrer._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->referrer());
}

static v8::Handle<v8::Value> domainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.domain._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->domain());
}

static void domainAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.domain._set");
    Document* imp = V8Document::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setDomain(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> URLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.URL._get");
    Document* imp = V8Document::toNative(info.Holder());
	if ((V8IsolatedContext::getThirdPartyId()!="")&&(V8IsolatedContext::getThirdPartyId()!=0))
	{
		String toWrite = "document.URL read by ";
		toWrite.append(V8IsolatedContext::getThirdPartyId());
		imp->writeThirdPartyLog(toWrite);
	}
    return v8String(imp->url());
}

static v8::Handle<v8::Value> cookieAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.cookie._get");
    Document* imp = V8Document::toNative(info.Holder());
    ExceptionCode ec = 0;
    String v = imp->cookie(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    return v8String(v);
}

static void cookieAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.cookie._set");
    Document* imp = V8Document::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setCookie(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> bodyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.body._get");
    Document* imp = V8Document::toNative(info.Holder());
	if ((V8IsolatedContext::getThirdPartyId()!="")&&(V8IsolatedContext::getThirdPartyId()!=0))
	{
		String toWrite = "document.body read by ";
		toWrite.append(V8IsolatedContext::getThirdPartyId());
		imp->writeThirdPartyLog(toWrite);
	}
    return toV8(imp->body());
}

static void bodyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.body._set");
    Document* imp = V8Document::toNative(info.Holder());
    HTMLElement* v = V8HTMLElement::HasInstance(value) ? V8HTMLElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setBody(WTF::getPtr(v), ec);
	if ((V8IsolatedContext::getThirdPartyId()!="")&&(V8IsolatedContext::getThirdPartyId()!=0))
	{
		String toWrite = "document.body set by ";
		toWrite.append(V8IsolatedContext::getThirdPartyId());
		imp->writeThirdPartyLog(toWrite);
	}
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> headAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.head._get");
    Document* imp = V8Document::toNative(info.Holder());
	if ((V8IsolatedContext::getThirdPartyId()!="")&&(V8IsolatedContext::getThirdPartyId()!=0))
	{
		String toWrite = "document.head read by ";
		toWrite.append(V8IsolatedContext::getThirdPartyId());
		imp->writeThirdPartyLog(toWrite);
	}
    return toV8(imp->head());
}

static v8::Handle<v8::Value> imagesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.images._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->images());
}

static v8::Handle<v8::Value> appletsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.applets._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->applets());
}

static v8::Handle<v8::Value> linksAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.links._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->links());
}

static v8::Handle<v8::Value> formsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.forms._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->forms());
}

static v8::Handle<v8::Value> anchorsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.anchors._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->anchors());
}

static v8::Handle<v8::Value> lastModifiedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.lastModified._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->lastModified());
}

static v8::Handle<v8::Value> charsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.charset._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->charset());
}

static void charsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.charset._set");
    Document* imp = V8Document::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setCharset(v);
    return;
}

static v8::Handle<v8::Value> defaultCharsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.defaultCharset._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->defaultCharset());
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.readyState._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->readyState());
}

static v8::Handle<v8::Value> characterSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.characterSet._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->characterSet());
}

static v8::Handle<v8::Value> preferredStylesheetSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.preferredStylesheetSet._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->preferredStylesheetSet());
}

static v8::Handle<v8::Value> selectedStylesheetSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.selectedStylesheetSet._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->selectedStylesheetSet());
}

static void selectedStylesheetSetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.selectedStylesheetSet._set");
    Document* imp = V8Document::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setSelectedStylesheetSet(v);
    return;
}

static v8::Handle<v8::Value> compatModeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.compatMode._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->compatMode());
}

static v8::Handle<v8::Value> webkitIsFullScreenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.webkitIsFullScreen._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->webkitIsFullScreen());
}

static v8::Handle<v8::Value> webkitFullScreenKeyboardInputAllowedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.webkitFullScreenKeyboardInputAllowed._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->webkitFullScreenKeyboardInputAllowed());
}

static v8::Handle<v8::Value> webkitCurrentFullScreenElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.webkitCurrentFullScreenElement._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->webkitCurrentFullScreenElement());
}

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onabort._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onabort._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onblur._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onblur._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onchange._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onchange._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onclick._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onclick._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oncontextmenu._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oncontextmenu._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondblclick._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondblclick._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndblclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondrag._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondrag._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndrag(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragend._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragend._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragenter._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragenter._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragenter(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragleave._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragleave._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragleave(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragover._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragover._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragstart._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondragstart._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondrop._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ondrop._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndrop(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onerror._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onerror._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onfocus._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onfocus._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oninput._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oninput._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOninput(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oninvalid._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oninvalid._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOninvalid(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onkeydown._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onkeydown._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnkeydown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onkeypress._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onkeypress._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnkeypress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onkeyup._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onkeyup._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnkeyup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onload._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onload._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmousedown._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmousedown._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmousedown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmousemove._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmousemove._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmousemove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmouseout._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmouseout._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmouseout(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmouseover._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmouseover._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmouseover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmouseup._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmouseup._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmouseup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmousewheel._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onmousewheel._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onreadystatechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onreadystatechange._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onreadystatechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreadystatechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onreadystatechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onreadystatechange._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnreadystatechange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onscroll._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onscroll._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnscroll(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onselect._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onselect._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnselect(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onsubmit._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onsubmit._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnsubmit(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onbeforecut._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforecut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforecutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onbeforecut._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnbeforecut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oncut._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oncut._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOncut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onbeforecopy._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforecopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforecopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onbeforecopy._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnbeforecopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oncopy._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.oncopy._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOncopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforepasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onbeforepaste._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforepaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforepaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforepasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onbeforepaste._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnbeforepaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onpaste._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onpaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onpasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onpaste._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnpaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onreset._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onreset._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnreset(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onsearch._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onsearch._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnsearch(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onselectstart._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselectstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onselectstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onselectstart._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnselectstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectionchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onselectionchange._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselectionchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectionchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onselectionchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onselectionchange._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnselectionchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchstart._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchstart._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchmove._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchmove._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchmove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchend._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchend._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchcancel._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.ontouchcancel._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> onwebkitfullscreenchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onwebkitfullscreenchange._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onwebkitfullscreenchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitfullscreenchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static void onwebkitfullscreenchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.onwebkitfullscreenchange._set");
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnwebkitfullscreenchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(PAGE_VISIBILITY_API)

static v8::Handle<v8::Value> webkitVisibilityStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.webkitVisibilityState._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->webkitVisibilityState());
}

#endif // ENABLE(PAGE_VISIBILITY_API)

#if ENABLE(PAGE_VISIBILITY_API)

static v8::Handle<v8::Value> webkitHiddenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Document.webkitHidden._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->webkitHidden());
}

#endif // ENABLE(PAGE_VISIBILITY_API)

static v8::Handle<v8::Value> createElementCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createElement");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, tagName, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<Element> result = imp->createElement(tagName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createDocumentFragmentCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createDocumentFragment");
    Document* imp = V8Document::toNative(args.Holder());
    return toV8(imp->createDocumentFragment());
}

static v8::Handle<v8::Value> createTextNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createTextNode");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, data, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->createTextNode(data), true);
}

static v8::Handle<v8::Value> createCommentCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createComment");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, data, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->createComment(data), true);
}

static v8::Handle<v8::Value> createCDATASectionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createCDATASection");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, data, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<CDATASection> result = imp->createCDATASection(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createProcessingInstructionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createProcessingInstruction");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, target, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, data, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    RefPtr<ProcessingInstruction> result = imp->createProcessingInstruction(target, data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createAttribute");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<Attr> result = imp->createAttribute(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createEntityReferenceCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createEntityReference");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<EntityReference> result = imp->createEntityReference(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.getElementsByTagName");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, tagname, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getElementsByTagName(tagname));
}

static v8::Handle<v8::Value> importNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.importNode");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, importedNode, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(bool, deep, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    RefPtr<Node> result = imp->importNode(importedNode, deep, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createElementNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createElementNS");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, qualifiedName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    RefPtr<Element> result = imp->createElementNS(namespaceURI, qualifiedName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createAttributeNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createAttributeNS");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, qualifiedName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    RefPtr<Attr> result = imp->createAttributeNS(namespaceURI, qualifiedName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), true);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.getElementsByTagNameNS");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, localName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return toV8(imp->getElementsByTagNameNS(namespaceURI, localName));
}

static v8::Handle<v8::Value> getElementByIdCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.getElementById");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, elementId, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getElementById(elementId));
}

static v8::Handle<v8::Value> adoptNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.adoptNode");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, source, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    RefPtr<Node> result = imp->adoptNode(source, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createEvent");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, eventType, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<Event> result = imp->createEvent(eventType, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createRangeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createRange");
    Document* imp = V8Document::toNative(args.Holder());
    return toV8(imp->createRange());
}

static v8::Handle<v8::Value> createNodeIteratorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createNodeIterator");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, root, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(unsigned, whatToShow, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    EXCEPTION_BLOCK(RefPtr<NodeFilter>, filter, V8DOMWrapper::wrapNativeNodeFilter(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)));
    EXCEPTION_BLOCK(bool, expandEntityReferences, MAYBE_MISSING_PARAMETER(args, 3, MissingIsUndefined)->BooleanValue());
    RefPtr<NodeIterator> result = imp->createNodeIterator(root, whatToShow, filter.get(), expandEntityReferences, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createTreeWalkerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createTreeWalker");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, root, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(unsigned, whatToShow, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    EXCEPTION_BLOCK(RefPtr<NodeFilter>, filter, V8DOMWrapper::wrapNativeNodeFilter(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)));
    EXCEPTION_BLOCK(bool, expandEntityReferences, MAYBE_MISSING_PARAMETER(args, 3, MissingIsUndefined)->BooleanValue());
    RefPtr<TreeWalker> result = imp->createTreeWalker(root, whatToShow, filter.get(), expandEntityReferences, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getOverrideStyleCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.getOverrideStyle");
    Document* imp = V8Document::toNative(args.Holder());
    EXCEPTION_BLOCK(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, pseudoElement, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return toV8(imp->getOverrideStyle(element, pseudoElement));
}

static v8::Handle<v8::Value> createExpressionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createExpression");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, expression, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    EXCEPTION_BLOCK(RefPtr<XPathNSResolver>, resolver, V8DOMWrapper::getXPathNSResolver(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    RefPtr<XPathExpression> result = imp->createExpression(expression, resolver.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createNSResolverCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createNSResolver");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Document* imp = V8Document::toNative(args.Holder());
    EXCEPTION_BLOCK(Node*, nodeResolver, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    return toV8(imp->createNSResolver(nodeResolver));
}

static v8::Handle<v8::Value> execCommandCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.execCommand");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, command, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    EXCEPTION_BLOCK(bool, userInterface, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, value, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined));
    return v8Boolean(imp->execCommand(command, userInterface, value));
}

static v8::Handle<v8::Value> queryCommandEnabledCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.queryCommandEnabled");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, command, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->queryCommandEnabled(command));
}

static v8::Handle<v8::Value> queryCommandIndetermCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.queryCommandIndeterm");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, command, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->queryCommandIndeterm(command));
}

static v8::Handle<v8::Value> queryCommandStateCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.queryCommandState");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, command, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->queryCommandState(command));
}

static v8::Handle<v8::Value> queryCommandSupportedCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.queryCommandSupported");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, command, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->queryCommandSupported(command));
}

static v8::Handle<v8::Value> queryCommandValueCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.queryCommandValue");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, command, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8StringOrFalse(imp->queryCommandValue(command));
}

static v8::Handle<v8::Value> getElementsByNameCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.getElementsByName");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, elementName, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getElementsByName(elementName));
}

static v8::Handle<v8::Value> elementFromPointCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.elementFromPoint");
    Document* imp = V8Document::toNative(args.Holder());
    EXCEPTION_BLOCK(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    return toV8(imp->elementFromPoint(x, y));
}

static v8::Handle<v8::Value> caretRangeFromPointCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.caretRangeFromPoint");
    Document* imp = V8Document::toNative(args.Holder());
    EXCEPTION_BLOCK(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    return toV8(imp->caretRangeFromPoint(x, y));
}

static v8::Handle<v8::Value> getSelectionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.getSelection");
    Document* imp = V8Document::toNative(args.Holder());
    return toV8(imp->getSelection());
}

static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.getElementsByClassName");
    Document* imp = V8Document::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, tagname, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getElementsByClassName(tagname));
}

static v8::Handle<v8::Value> querySelectorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.querySelector");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<Element> result = imp->querySelector(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> querySelectorAllCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.querySelectorAll");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<NodeList> result = imp->querySelectorAll(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitCancelFullScreenCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.webkitCancelFullScreen");
    Document* imp = V8Document::toNative(args.Holder());
    imp->webkitCancelFullScreen();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createTouchCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Document.createTouch");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(DOMWindow*, window, V8DOMWindow::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(Node*, target, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, identifier, toInt32(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, pageX, toInt32(MAYBE_MISSING_PARAMETER(args, 3, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, pageY, toInt32(MAYBE_MISSING_PARAMETER(args, 4, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, screenX, toInt32(MAYBE_MISSING_PARAMETER(args, 5, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, screenY, toInt32(MAYBE_MISSING_PARAMETER(args, 6, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, webkitRadiusX, toInt32(MAYBE_MISSING_PARAMETER(args, 7, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, webkitRadiusY, toInt32(MAYBE_MISSING_PARAMETER(args, 8, MissingIsUndefined)));
    EXCEPTION_BLOCK(float, webkitRotationAngle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 9, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, webkitForce, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 10, MissingIsUndefined)->NumberValue()));
    RefPtr<Touch> result = imp->createTouch(window, target, identifier, pageX, pageY, screenX, screenY, webkitRadiusX, webkitRadiusY, webkitRotationAngle, webkitForce, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace DocumentInternal

static const BatchedAttribute DocumentAttrs[] = {
    // Attribute 'doctype' (Type: 'readonly attribute' ExtAttr: '')
    {"doctype", DocumentInternal::doctypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'implementation' (Type: 'readonly attribute' ExtAttr: '')
    {"implementation", DocumentInternal::implementationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'documentElement' (Type: 'readonly attribute' ExtAttr: '')
    {"documentElement", DocumentInternal::documentElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'inputEncoding' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"inputEncoding", DocumentInternal::inputEncodingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlEncoding' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"xmlEncoding", DocumentInternal::xmlEncodingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlVersion' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
    {"xmlVersion", DocumentInternal::xmlVersionAttrGetter, DocumentInternal::xmlVersionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlStandalone' (Type: 'attribute' ExtAttr: '')
    {"xmlStandalone", DocumentInternal::xmlStandaloneAttrGetter, DocumentInternal::xmlStandaloneAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'documentURI' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
    {"documentURI", DocumentInternal::documentURIAttrGetter, DocumentInternal::documentURIAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultView' (Type: 'readonly attribute' ExtAttr: '')
    {"defaultView", DocumentInternal::defaultViewAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'styleSheets' (Type: 'readonly attribute' ExtAttr: '')
    {"styleSheets", DocumentInternal::styleSheetsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'title' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"title", DocumentInternal::titleAttrGetter, DocumentInternal::titleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'referrer' (Type: 'readonly attribute' ExtAttr: '')
    {"referrer", DocumentInternal::referrerAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domain' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"domain", DocumentInternal::domainAttrGetter, DocumentInternal::domainAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'URL' (Type: 'readonly attribute' ExtAttr: '')
    {"URL", DocumentInternal::URLAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cookie' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"cookie", DocumentInternal::cookieAttrGetter, DocumentInternal::cookieAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'body' (Type: 'attribute' ExtAttr: '')
    {"body", DocumentInternal::bodyAttrGetter, DocumentInternal::bodyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'head' (Type: 'readonly attribute' ExtAttr: '')
    {"head", DocumentInternal::headAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'images' (Type: 'readonly attribute' ExtAttr: '')
    {"images", DocumentInternal::imagesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'applets' (Type: 'readonly attribute' ExtAttr: '')
    {"applets", DocumentInternal::appletsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'links' (Type: 'readonly attribute' ExtAttr: '')
    {"links", DocumentInternal::linksAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'forms' (Type: 'readonly attribute' ExtAttr: '')
    {"forms", DocumentInternal::formsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'anchors' (Type: 'readonly attribute' ExtAttr: '')
    {"anchors", DocumentInternal::anchorsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastModified' (Type: 'readonly attribute' ExtAttr: '')
    {"lastModified", DocumentInternal::lastModifiedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'location' (Type: 'attribute' ExtAttr: 'Custom')
    {"location", V8Document::locationAccessorGetter, V8Document::locationAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'charset' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
    {"charset", DocumentInternal::charsetAttrGetter, DocumentInternal::charsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultCharset' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"defaultCharset", DocumentInternal::defaultCharsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"readyState", DocumentInternal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'characterSet' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"characterSet", DocumentInternal::characterSetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'preferredStylesheetSet' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"preferredStylesheetSet", DocumentInternal::preferredStylesheetSetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectedStylesheetSet' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
    {"selectedStylesheetSet", DocumentInternal::selectedStylesheetSetAttrGetter, DocumentInternal::selectedStylesheetSetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'compatMode' (Type: 'readonly attribute' ExtAttr: '')
    {"compatMode", DocumentInternal::compatModeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onabort", DocumentInternal::onabortAttrGetter, DocumentInternal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onblur", DocumentInternal::onblurAttrGetter, DocumentInternal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onchange", DocumentInternal::onchangeAttrGetter, DocumentInternal::onchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onclick", DocumentInternal::onclickAttrGetter, DocumentInternal::onclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oncontextmenu", DocumentInternal::oncontextmenuAttrGetter, DocumentInternal::oncontextmenuAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondblclick", DocumentInternal::ondblclickAttrGetter, DocumentInternal::ondblclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondrag", DocumentInternal::ondragAttrGetter, DocumentInternal::ondragAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragend", DocumentInternal::ondragendAttrGetter, DocumentInternal::ondragendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragenter", DocumentInternal::ondragenterAttrGetter, DocumentInternal::ondragenterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragleave", DocumentInternal::ondragleaveAttrGetter, DocumentInternal::ondragleaveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragover", DocumentInternal::ondragoverAttrGetter, DocumentInternal::ondragoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragstart", DocumentInternal::ondragstartAttrGetter, DocumentInternal::ondragstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondrop", DocumentInternal::ondropAttrGetter, DocumentInternal::ondropAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onerror", DocumentInternal::onerrorAttrGetter, DocumentInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onfocus", DocumentInternal::onfocusAttrGetter, DocumentInternal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oninput", DocumentInternal::oninputAttrGetter, DocumentInternal::oninputAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oninvalid", DocumentInternal::oninvalidAttrGetter, DocumentInternal::oninvalidAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onkeydown", DocumentInternal::onkeydownAttrGetter, DocumentInternal::onkeydownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onkeypress", DocumentInternal::onkeypressAttrGetter, DocumentInternal::onkeypressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onkeyup", DocumentInternal::onkeyupAttrGetter, DocumentInternal::onkeyupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onload", DocumentInternal::onloadAttrGetter, DocumentInternal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmousedown", DocumentInternal::onmousedownAttrGetter, DocumentInternal::onmousedownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmousemove", DocumentInternal::onmousemoveAttrGetter, DocumentInternal::onmousemoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmouseout", DocumentInternal::onmouseoutAttrGetter, DocumentInternal::onmouseoutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmouseover", DocumentInternal::onmouseoverAttrGetter, DocumentInternal::onmouseoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmouseup", DocumentInternal::onmouseupAttrGetter, DocumentInternal::onmouseupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmousewheel", DocumentInternal::onmousewheelAttrGetter, DocumentInternal::onmousewheelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onreadystatechange' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onreadystatechange", DocumentInternal::onreadystatechangeAttrGetter, DocumentInternal::onreadystatechangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onscroll", DocumentInternal::onscrollAttrGetter, DocumentInternal::onscrollAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onselect", DocumentInternal::onselectAttrGetter, DocumentInternal::onselectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onsubmit", DocumentInternal::onsubmitAttrGetter, DocumentInternal::onsubmitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecut' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onbeforecut", DocumentInternal::onbeforecutAttrGetter, DocumentInternal::onbeforecutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncut' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oncut", DocumentInternal::oncutAttrGetter, DocumentInternal::oncutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecopy' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onbeforecopy", DocumentInternal::onbeforecopyAttrGetter, DocumentInternal::onbeforecopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncopy' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oncopy", DocumentInternal::oncopyAttrGetter, DocumentInternal::oncopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforepaste' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onbeforepaste", DocumentInternal::onbeforepasteAttrGetter, DocumentInternal::onbeforepasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onpaste' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onpaste", DocumentInternal::onpasteAttrGetter, DocumentInternal::onpasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onreset", DocumentInternal::onresetAttrGetter, DocumentInternal::onresetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onsearch", DocumentInternal::onsearchAttrGetter, DocumentInternal::onsearchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselectstart' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onselectstart", DocumentInternal::onselectstartAttrGetter, DocumentInternal::onselectstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselectionchange' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onselectionchange", DocumentInternal::onselectionchangeAttrGetter, DocumentInternal::onselectionchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#if ENABLE(FULLSCREEN_API)
    // Attribute 'onwebkitfullscreenchange' (Type: 'attribute' ExtAttr: 'DontEnum Conditional')
    {"onwebkitfullscreenchange", DocumentInternal::onwebkitfullscreenchangeAttrGetter, DocumentInternal::onwebkitfullscreenchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(FULLSCREEN_API)
#if ENABLE(PAGE_VISIBILITY_API)
    // Attribute 'webkitVisibilityState' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitVisibilityState", DocumentInternal::webkitVisibilityStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(PAGE_VISIBILITY_API)
#if ENABLE(PAGE_VISIBILITY_API)
    // Attribute 'webkitHidden' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitHidden", DocumentInternal::webkitHiddenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(PAGE_VISIBILITY_API)
};

static const BatchedCallback DocumentCallbacks[] = {
    {"createElement", DocumentInternal::createElementCallback},
    {"createDocumentFragment", DocumentInternal::createDocumentFragmentCallback},
    {"createTextNode", DocumentInternal::createTextNodeCallback},
    {"createComment", DocumentInternal::createCommentCallback},
    {"createCDATASection", DocumentInternal::createCDATASectionCallback},
    {"createProcessingInstruction", DocumentInternal::createProcessingInstructionCallback},
    {"createAttribute", DocumentInternal::createAttributeCallback},
    {"createEntityReference", DocumentInternal::createEntityReferenceCallback},
    {"getElementsByTagName", DocumentInternal::getElementsByTagNameCallback},
    {"createElementNS", DocumentInternal::createElementNSCallback},
    {"createAttributeNS", DocumentInternal::createAttributeNSCallback},
    {"getElementsByTagNameNS", DocumentInternal::getElementsByTagNameNSCallback},
    {"getElementById", DocumentInternal::getElementByIdCallback},
    {"createEvent", DocumentInternal::createEventCallback},
    {"createRange", DocumentInternal::createRangeCallback},
    {"evaluate", V8Document::evaluateCallback},
    {"execCommand", DocumentInternal::execCommandCallback},
    {"queryCommandEnabled", DocumentInternal::queryCommandEnabledCallback},
    {"queryCommandIndeterm", DocumentInternal::queryCommandIndetermCallback},
    {"queryCommandState", DocumentInternal::queryCommandStateCallback},
    {"queryCommandSupported", DocumentInternal::queryCommandSupportedCallback},
    {"queryCommandValue", DocumentInternal::queryCommandValueCallback},
    {"getElementsByName", DocumentInternal::getElementsByNameCallback},
    {"elementFromPoint", DocumentInternal::elementFromPointCallback},
    {"caretRangeFromPoint", DocumentInternal::caretRangeFromPointCallback},
    {"getSelection", DocumentInternal::getSelectionCallback},
    {"getCSSCanvasContext", V8Document::getCSSCanvasContextCallback},
    {"getElementsByClassName", DocumentInternal::getElementsByClassNameCallback},
    {"querySelector", DocumentInternal::querySelectorCallback},
    {"querySelectorAll", DocumentInternal::querySelectorAllCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8DocumentTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Document", V8Node::GetTemplate(), V8Document::internalFieldCount,
        DocumentAttrs, WTF_ARRAY_LENGTH(DocumentAttrs),
        DocumentCallbacks, WTF_ARRAY_LENGTH(DocumentCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    if (RuntimeEnabledFeatures::webkitIsFullScreenEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIsFullScreen' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIsFullScreen", DocumentInternal::webkitIsFullScreenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitFullScreenKeyboardInputAllowedEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitFullScreenKeyboardInputAllowed' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitFullScreenKeyboardInputAllowed", DocumentInternal::webkitFullScreenKeyboardInputAllowedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitCurrentFullScreenElementEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitCurrentFullScreenElement' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitCurrentFullScreenElement", DocumentInternal::webkitCurrentFullScreenElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchstartEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchstart", DocumentInternal::ontouchstartAttrGetter, DocumentInternal::ontouchstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchmoveEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchmove", DocumentInternal::ontouchmoveAttrGetter, DocumentInternal::ontouchmoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchendEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchend", DocumentInternal::ontouchendAttrGetter, DocumentInternal::ontouchendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchcancelEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchcancel", DocumentInternal::ontouchcancelAttrGetter, DocumentInternal::ontouchcancelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

    // Custom Signature 'importNode'
    const int importNodeArgc = 2;
    v8::Handle<v8::FunctionTemplate> importNodeArgv[importNodeArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> importNodeSignature = v8::Signature::New(desc, importNodeArgc, importNodeArgv);
    proto->Set(v8::String::New("importNode"), v8::FunctionTemplate::New(DocumentInternal::importNodeCallback, v8::Handle<v8::Value>(), importNodeSignature));

    // Custom Signature 'adoptNode'
    const int adoptNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> adoptNodeArgv[adoptNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> adoptNodeSignature = v8::Signature::New(desc, adoptNodeArgc, adoptNodeArgv);
    proto->Set(v8::String::New("adoptNode"), v8::FunctionTemplate::New(DocumentInternal::adoptNodeCallback, v8::Handle<v8::Value>(), adoptNodeSignature));

    // Custom Signature 'createNodeIterator'
    const int createNodeIteratorArgc = 4;
    v8::Handle<v8::FunctionTemplate> createNodeIteratorArgv[createNodeIteratorArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createNodeIteratorSignature = v8::Signature::New(desc, createNodeIteratorArgc, createNodeIteratorArgv);
    proto->Set(v8::String::New("createNodeIterator"), v8::FunctionTemplate::New(DocumentInternal::createNodeIteratorCallback, v8::Handle<v8::Value>(), createNodeIteratorSignature));

    // Custom Signature 'createTreeWalker'
    const int createTreeWalkerArgc = 4;
    v8::Handle<v8::FunctionTemplate> createTreeWalkerArgv[createTreeWalkerArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createTreeWalkerSignature = v8::Signature::New(desc, createTreeWalkerArgc, createTreeWalkerArgv);
    proto->Set(v8::String::New("createTreeWalker"), v8::FunctionTemplate::New(DocumentInternal::createTreeWalkerCallback, v8::Handle<v8::Value>(), createTreeWalkerSignature));

    // Custom Signature 'getOverrideStyle'
    const int getOverrideStyleArgc = 2;
    v8::Handle<v8::FunctionTemplate> getOverrideStyleArgv[getOverrideStyleArgc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> getOverrideStyleSignature = v8::Signature::New(desc, getOverrideStyleArgc, getOverrideStyleArgv);
    proto->Set(v8::String::New("getOverrideStyle"), v8::FunctionTemplate::New(DocumentInternal::getOverrideStyleCallback, v8::Handle<v8::Value>(), getOverrideStyleSignature));

    // Custom Signature 'createExpression'
    const int createExpressionArgc = 2;
    v8::Handle<v8::FunctionTemplate> createExpressionArgv[createExpressionArgc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createExpressionSignature = v8::Signature::New(desc, createExpressionArgc, createExpressionArgv);
    proto->Set(v8::String::New("createExpression"), v8::FunctionTemplate::New(DocumentInternal::createExpressionCallback, v8::Handle<v8::Value>(), createExpressionSignature));

    // Custom Signature 'createNSResolver'
    const int createNSResolverArgc = 1;
    v8::Handle<v8::FunctionTemplate> createNSResolverArgv[createNSResolverArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> createNSResolverSignature = v8::Signature::New(desc, createNSResolverArgc, createNSResolverArgv);
    proto->Set(v8::String::New("createNSResolver"), v8::FunctionTemplate::New(DocumentInternal::createNSResolverCallback, v8::Handle<v8::Value>(), createNSResolverSignature));
    if (RuntimeEnabledFeatures::webkitCancelFullScreenEnabled())
        proto->Set(v8::String::New("webkitCancelFullScreen"), v8::FunctionTemplate::New(DocumentInternal::webkitCancelFullScreenCallback, v8::Handle<v8::Value>(), defaultSignature));

    // Custom Signature 'createTouch'
    const int createTouchArgc = 11;
    v8::Handle<v8::FunctionTemplate> createTouchArgv[createTouchArgc] = { V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createTouchSignature = v8::Signature::New(desc, createTouchArgc, createTouchArgv);
    if (RuntimeEnabledFeatures::createTouchEnabled())
        proto->Set(v8::String::New("createTouch"), v8::FunctionTemplate::New(DocumentInternal::createTouchCallback, v8::Handle<v8::Value>(), createTouchSignature));
    if (RuntimeEnabledFeatures::createTouchListEnabled())
        proto->Set(v8::String::New("createTouchList"), v8::FunctionTemplate::New(V8Document::createTouchListCallback, v8::Handle<v8::Value>(), defaultSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Document::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Document::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8DocumentTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Document::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Document::wrapSlow(Document* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8Document::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8Document::derefObject(void* object)
{
    static_cast<Document*>(object)->deref();
}

} // namespace WebCore
