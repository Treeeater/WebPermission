/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8FileWriter.h"

#if ENABLE(FILE_SYSTEM)

#include "EventListener.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8Blob.h"
#include "V8DOMWrapper.h"
#include "V8FileError.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8FileWriter::info = { V8FileWriter::GetTemplate, V8FileWriter::derefObject, V8FileWriter::toActiveDOMObject, 0 };

namespace FileWriterInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.readyState._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return v8::Integer::New(imp->readyState());
}

static v8::Handle<v8::Value> errorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.error._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    RefPtr<FileError> result = imp->error();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "error", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> positionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.position._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->position()));
}

static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.length._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->length()));
}

static v8::Handle<v8::Value> onwritestartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onwritestart._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return imp->onwritestart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwritestart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwritestartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onwritestart._set");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onwritestart(), value, V8FileWriter::eventListenerCacheIndex);
    imp->setOnwritestart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onprogress._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onprogress._set");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8FileWriter::eventListenerCacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwriteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onwrite._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return imp->onwrite() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwrite())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwriteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onwrite._set");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onwrite(), value, V8FileWriter::eventListenerCacheIndex);
    imp->setOnwrite(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onabort._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onabort._set");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8FileWriter::eventListenerCacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onerror._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onerror._set");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8FileWriter::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwriteendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onwriteend._get");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    return imp->onwriteend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwriteend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwriteendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.FileWriter.onwriteend._set");
    FileWriter* imp = V8FileWriter::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onwriteend(), value, V8FileWriter::eventListenerCacheIndex);
    imp->setOnwriteend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> writeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileWriter.write");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    FileWriter* imp = V8FileWriter::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Blob*, data, V8Blob::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Blob::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    imp->write(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> seekCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileWriter.seek");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    FileWriter* imp = V8FileWriter::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(long long, position, toInt64(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->seek(position, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> truncateCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileWriter.truncate");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    FileWriter* imp = V8FileWriter::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(long long, size, toInt64(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->truncate(size, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> abortCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.FileWriter.abort");
    FileWriter* imp = V8FileWriter::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->abort(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace FileWriterInternal

static const BatchedAttribute FileWriterAttrs[] = {
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", FileWriterInternal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'error' (Type: 'readonly attribute' ExtAttr: '')
    {"error", FileWriterInternal::errorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'position' (Type: 'readonly attribute' ExtAttr: '')
    {"position", FileWriterInternal::positionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
    {"length", FileWriterInternal::lengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onwritestart' (Type: 'attribute' ExtAttr: '')
    {"onwritestart", FileWriterInternal::onwritestartAttrGetter, FileWriterInternal::onwritestartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onprogress' (Type: 'attribute' ExtAttr: '')
    {"onprogress", FileWriterInternal::onprogressAttrGetter, FileWriterInternal::onprogressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onwrite' (Type: 'attribute' ExtAttr: '')
    {"onwrite", FileWriterInternal::onwriteAttrGetter, FileWriterInternal::onwriteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: '')
    {"onabort", FileWriterInternal::onabortAttrGetter, FileWriterInternal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
    {"onerror", FileWriterInternal::onerrorAttrGetter, FileWriterInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onwriteend' (Type: 'attribute' ExtAttr: '')
    {"onwriteend", FileWriterInternal::onwriteendAttrGetter, FileWriterInternal::onwriteendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback FileWriterCallbacks[] = {
    {"seek", FileWriterInternal::seekCallback},
    {"truncate", FileWriterInternal::truncateCallback},
    {"abort", FileWriterInternal::abortCallback},
};

static const BatchedConstant FileWriterConsts[] = {
    {"INIT", static_cast<signed int>(0)},
    {"WRITING", static_cast<signed int>(1)},
    {"DONE", static_cast<signed int>(2)},
};


COMPILE_ASSERT(0 == FileWriter::INIT, FileWriterEnumINITIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == FileWriter::WRITING, FileWriterEnumWRITINGIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == FileWriter::DONE, FileWriterEnumDONEIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8FileWriterTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "FileWriter", v8::Persistent<v8::FunctionTemplate>(), V8FileWriter::internalFieldCount,
        FileWriterAttrs, WTF_ARRAY_LENGTH(FileWriterAttrs),
        FileWriterCallbacks, WTF_ARRAY_LENGTH(FileWriterCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'write'
    const int writeArgc = 1;
    v8::Handle<v8::FunctionTemplate> writeArgv[writeArgc] = { V8Blob::GetRawTemplate() };
    v8::Handle<v8::Signature> writeSignature = v8::Signature::New(desc, writeArgc, writeArgv);
    proto->Set(v8::String::New("write"), v8::FunctionTemplate::New(FileWriterInternal::writeCallback, v8::Handle<v8::Value>(), writeSignature));
    batchConfigureConstants(desc, proto, FileWriterConsts, WTF_ARRAY_LENGTH(FileWriterConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8FileWriter::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8FileWriter::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8FileWriterTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8FileWriter::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

ActiveDOMObject* V8FileWriter::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8FileWriter::wrapSlow(FileWriter* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getActiveDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8FileWriter::derefObject(void* object)
{
    static_cast<FileWriter*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(FILE_SYSTEM)
