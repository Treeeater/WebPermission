/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGRadialGradientElement.h"

#if ENABLE(SVG)

#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8SVGAnimatedLength.h"
#include "V8SVGGradientElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SVGRadialGradientElement::info = { V8SVGRadialGradientElement::GetTemplate, V8SVGRadialGradientElement::derefObject, 0, &V8SVGGradientElement::info };

namespace SVGRadialGradientElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> cxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGRadialGradientElement.cx._get");
    SVGRadialGradientElement* imp = V8SVGRadialGradientElement::toNative(info.Holder());
    return toV8(imp->cxAnimated());
}

static v8::Handle<v8::Value> cyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGRadialGradientElement.cy._get");
    SVGRadialGradientElement* imp = V8SVGRadialGradientElement::toNative(info.Holder());
    return toV8(imp->cyAnimated());
}

static v8::Handle<v8::Value> rAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGRadialGradientElement.r._get");
    SVGRadialGradientElement* imp = V8SVGRadialGradientElement::toNative(info.Holder());
    return toV8(imp->rAnimated());
}

static v8::Handle<v8::Value> fxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGRadialGradientElement.fx._get");
    SVGRadialGradientElement* imp = V8SVGRadialGradientElement::toNative(info.Holder());
    return toV8(imp->fxAnimated());
}

static v8::Handle<v8::Value> fyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGRadialGradientElement.fy._get");
    SVGRadialGradientElement* imp = V8SVGRadialGradientElement::toNative(info.Holder());
    return toV8(imp->fyAnimated());
}

} // namespace SVGRadialGradientElementInternal

static const BatchedAttribute SVGRadialGradientElementAttrs[] = {
    // Attribute 'cx' (Type: 'readonly attribute' ExtAttr: '')
    {"cx", SVGRadialGradientElementInternal::cxAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cy' (Type: 'readonly attribute' ExtAttr: '')
    {"cy", SVGRadialGradientElementInternal::cyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'r' (Type: 'readonly attribute' ExtAttr: '')
    {"r", SVGRadialGradientElementInternal::rAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fx' (Type: 'readonly attribute' ExtAttr: '')
    {"fx", SVGRadialGradientElementInternal::fxAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fy' (Type: 'readonly attribute' ExtAttr: '')
    {"fy", SVGRadialGradientElementInternal::fyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGRadialGradientElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGRadialGradientElement", V8SVGGradientElement::GetTemplate(), V8SVGRadialGradientElement::internalFieldCount,
        SVGRadialGradientElementAttrs, WTF_ARRAY_LENGTH(SVGRadialGradientElementAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGRadialGradientElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGRadialGradientElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGRadialGradientElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGRadialGradientElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGRadialGradientElement::wrapSlow(SVGRadialGradientElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8SVGRadialGradientElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8SVGRadialGradientElement::derefObject(void* object)
{
    static_cast<SVGRadialGradientElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
