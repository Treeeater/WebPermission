/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Touch.h"

#if ENABLE(TOUCH_EVENTS)

#include "EventTarget.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Touch::info = { V8Touch::GetTemplate, V8Touch::derefObject, 0, 0 };

namespace TouchInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> clientXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.clientX._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->clientX());
}

static v8::Handle<v8::Value> clientYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.clientY._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->clientY());
}

static v8::Handle<v8::Value> screenXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.screenX._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->screenX());
}

static v8::Handle<v8::Value> screenYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.screenY._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->screenY());
}

static v8::Handle<v8::Value> pageXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.pageX._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->pageX());
}

static v8::Handle<v8::Value> pageYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.pageY._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->pageY());
}

static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.target._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return V8DOMWrapper::convertEventTargetToV8Object(imp->target());
}

static v8::Handle<v8::Value> identifierAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.identifier._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->identifier());
}

static v8::Handle<v8::Value> webkitRadiusXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.webkitRadiusX._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->webkitRadiusX());
}

static v8::Handle<v8::Value> webkitRadiusYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.webkitRadiusY._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->webkitRadiusY());
}

static v8::Handle<v8::Value> webkitRotationAngleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.webkitRotationAngle._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Number::New(imp->webkitRotationAngle());
}

static v8::Handle<v8::Value> webkitForceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Touch.webkitForce._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Number::New(imp->webkitForce());
}

} // namespace TouchInternal

static const BatchedAttribute TouchAttrs[] = {
    // Attribute 'clientX' (Type: 'readonly attribute' ExtAttr: '')
    {"clientX", TouchInternal::clientXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientY' (Type: 'readonly attribute' ExtAttr: '')
    {"clientY", TouchInternal::clientYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'screenX' (Type: 'readonly attribute' ExtAttr: '')
    {"screenX", TouchInternal::screenXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'screenY' (Type: 'readonly attribute' ExtAttr: '')
    {"screenY", TouchInternal::screenYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pageX' (Type: 'readonly attribute' ExtAttr: '')
    {"pageX", TouchInternal::pageXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pageY' (Type: 'readonly attribute' ExtAttr: '')
    {"pageY", TouchInternal::pageYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'target' (Type: 'readonly attribute' ExtAttr: '')
    {"target", TouchInternal::targetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'identifier' (Type: 'readonly attribute' ExtAttr: '')
    {"identifier", TouchInternal::identifierAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitRadiusX' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitRadiusX", TouchInternal::webkitRadiusXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitRadiusY' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitRadiusY", TouchInternal::webkitRadiusYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitRotationAngle' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitRotationAngle", TouchInternal::webkitRotationAngleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitForce' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitForce", TouchInternal::webkitForceAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8TouchTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Touch", v8::Persistent<v8::FunctionTemplate>(), V8Touch::internalFieldCount,
        TouchAttrs, WTF_ARRAY_LENGTH(TouchAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Touch::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Touch::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8TouchTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Touch::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Touch::wrapSlow(Touch* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8Touch::derefObject(void* object)
{
    static_cast<Touch*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(TOUCH_EVENTS)
