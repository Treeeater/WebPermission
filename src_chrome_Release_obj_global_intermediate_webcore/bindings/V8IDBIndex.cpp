/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBIndex.h"

#if ENABLE(INDEXED_DATABASE)

#include "ExceptionCode.h"
#include "IDBBindingUtilities.h"
#include "IDBKey.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IDBKeyRange.h"
#include "V8IDBObjectStore.h"
#include "V8IDBRequest.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8IDBIndex::info = { V8IDBIndex::GetTemplate, V8IDBIndex::derefObject, 0, 0 };

namespace IDBIndexInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBIndex.name._get");
    IDBIndex* imp = V8IDBIndex::toNative(info.Holder());
    return v8String(imp->name());
}

static v8::Handle<v8::Value> objectStoreAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBIndex.objectStore._get");
    IDBIndex* imp = V8IDBIndex::toNative(info.Holder());
    RefPtr<IDBObjectStore> result = imp->objectStore();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "objectStore", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> keyPathAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBIndex.keyPath._get");
    IDBIndex* imp = V8IDBIndex::toNative(info.Holder());
    return v8String(imp->keyPath());
}

static v8::Handle<v8::Value> uniqueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBIndex.unique._get");
    IDBIndex* imp = V8IDBIndex::toNative(info.Holder());
    return v8Boolean(imp->unique());
}

static v8::Handle<v8::Value> openCursorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBIndex.openCursor");
    IDBIndex* imp = V8IDBIndex::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        RefPtr<IDBRequest> result = imp->openCursor(scriptContext, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release());
    }
    EXCEPTION_BLOCK(IDBKeyRange*, range, V8IDBKeyRange::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8IDBKeyRange::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    if (args.Length() <= 1) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        RefPtr<IDBRequest> result = imp->openCursor(scriptContext, range, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release());
    }
    EXCEPTION_BLOCK(int, direction, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    RefPtr<IDBRequest> result = imp->openCursor(scriptContext, range, direction, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> openKeyCursorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBIndex.openKeyCursor");
    IDBIndex* imp = V8IDBIndex::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        RefPtr<IDBRequest> result = imp->openKeyCursor(scriptContext, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release());
    }
    EXCEPTION_BLOCK(IDBKeyRange*, range, V8IDBKeyRange::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8IDBKeyRange::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    if (args.Length() <= 1) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        RefPtr<IDBRequest> result = imp->openKeyCursor(scriptContext, range, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release());
    }
    EXCEPTION_BLOCK(int, direction, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    RefPtr<IDBRequest> result = imp->openKeyCursor(scriptContext, range, direction, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBIndex.get");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    IDBIndex* imp = V8IDBIndex::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<IDBKey> key = createIDBKeyFromValue(args[0]);
    if (UNLIKELY(!key)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    RefPtr<IDBRequest> result = imp->get(scriptContext, key, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getKeyCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBIndex.getKey");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    IDBIndex* imp = V8IDBIndex::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<IDBKey> key = createIDBKeyFromValue(args[0]);
    if (UNLIKELY(!key)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    RefPtr<IDBRequest> result = imp->getKey(scriptContext, key, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace IDBIndexInternal

static const BatchedAttribute IDBIndexAttrs[] = {
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", IDBIndexInternal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'objectStore' (Type: 'readonly attribute' ExtAttr: '')
    {"objectStore", IDBIndexInternal::objectStoreAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'keyPath' (Type: 'readonly attribute' ExtAttr: '')
    {"keyPath", IDBIndexInternal::keyPathAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'unique' (Type: 'readonly attribute' ExtAttr: '')
    {"unique", IDBIndexInternal::uniqueAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback IDBIndexCallbacks[] = {
    {"openCursor", IDBIndexInternal::openCursorCallback},
    {"openKeyCursor", IDBIndexInternal::openKeyCursorCallback},
    {"get", IDBIndexInternal::getCallback},
    {"getKey", IDBIndexInternal::getKeyCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBIndexTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "IDBIndex", v8::Persistent<v8::FunctionTemplate>(), V8IDBIndex::internalFieldCount,
        IDBIndexAttrs, WTF_ARRAY_LENGTH(IDBIndexAttrs),
        IDBIndexCallbacks, WTF_ARRAY_LENGTH(IDBIndexCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBIndex::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8IDBIndex::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8IDBIndexTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8IDBIndex::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBIndex::wrapSlow(IDBIndex* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8IDBIndex::derefObject(void* object)
{
    static_cast<IDBIndex*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
