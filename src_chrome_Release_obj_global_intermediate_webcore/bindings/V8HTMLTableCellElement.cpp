/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLTableCellElement.h"

#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLTableCellElement::info = { V8HTMLTableCellElement::GetTemplate, V8HTMLTableCellElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLTableCellElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> cellIndexAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.cellIndex._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8::Integer::New(imp->cellIndex());
}

static v8::Handle<v8::Value> abbrAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.abbr._get");
    return getElementStringAttr(info, HTMLNames::abbrAttr);
}

static void abbrAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.abbr._set");
    setElementStringAttr(info, HTMLNames::abbrAttr, value);
}

static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.align._get");
    return getElementStringAttr(info, HTMLNames::alignAttr);
}

static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.align._set");
    setElementStringAttr(info, HTMLNames::alignAttr, value);
}

static v8::Handle<v8::Value> axisAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.axis._get");
    return getElementStringAttr(info, HTMLNames::axisAttr);
}

static void axisAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.axis._set");
    setElementStringAttr(info, HTMLNames::axisAttr, value);
}

static v8::Handle<v8::Value> bgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.bgColor._get");
    return getElementStringAttr(info, HTMLNames::bgcolorAttr);
}

static void bgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.bgColor._set");
    setElementStringAttr(info, HTMLNames::bgcolorAttr, value);
}

static v8::Handle<v8::Value> chAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.ch._get");
    return getElementStringAttr(info, HTMLNames::charAttr);
}

static void chAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.ch._set");
    setElementStringAttr(info, HTMLNames::charAttr, value);
}

static v8::Handle<v8::Value> chOffAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.chOff._get");
    return getElementStringAttr(info, HTMLNames::charoffAttr);
}

static void chOffAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.chOff._set");
    setElementStringAttr(info, HTMLNames::charoffAttr, value);
}

static v8::Handle<v8::Value> colSpanAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.colSpan._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8::Integer::New(imp->colSpan());
}

static void colSpanAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.colSpan._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setColSpan(v);
    return;
}

static v8::Handle<v8::Value> headersAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.headers._get");
    return getElementStringAttr(info, HTMLNames::headersAttr);
}

static void headersAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.headers._set");
    setElementStringAttr(info, HTMLNames::headersAttr, value);
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.height._get");
    return getElementStringAttr(info, HTMLNames::heightAttr);
}

static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.height._set");
    setElementStringAttr(info, HTMLNames::heightAttr, value);
}

static v8::Handle<v8::Value> noWrapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.noWrap._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::nowrapAttr));
}

static void noWrapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.noWrap._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::nowrapAttr, v);
    return;
}

static v8::Handle<v8::Value> rowSpanAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.rowSpan._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8::Integer::New(imp->rowSpan());
}

static void rowSpanAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.rowSpan._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setRowSpan(v);
    return;
}

static v8::Handle<v8::Value> scopeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.scope._get");
    return getElementStringAttr(info, HTMLNames::scopeAttr);
}

static void scopeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.scope._set");
    setElementStringAttr(info, HTMLNames::scopeAttr, value);
}

static v8::Handle<v8::Value> vAlignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.vAlign._get");
    return getElementStringAttr(info, HTMLNames::valignAttr);
}

static void vAlignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.vAlign._set");
    setElementStringAttr(info, HTMLNames::valignAttr, value);
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.width._get");
    return getElementStringAttr(info, HTMLNames::widthAttr);
}

static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLTableCellElement.width._set");
    setElementStringAttr(info, HTMLNames::widthAttr, value);
}

} // namespace HTMLTableCellElementInternal

static const BatchedAttribute HTMLTableCellElementAttrs[] = {
    // Attribute 'cellIndex' (Type: 'readonly attribute' ExtAttr: '')
    {"cellIndex", HTMLTableCellElementInternal::cellIndexAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'abbr' (Type: 'attribute' ExtAttr: 'Reflect')
    {"abbr", HTMLTableCellElementInternal::abbrAttrGetter, HTMLTableCellElementInternal::abbrAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'align' (Type: 'attribute' ExtAttr: 'Reflect')
    {"align", HTMLTableCellElementInternal::alignAttrGetter, HTMLTableCellElementInternal::alignAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'axis' (Type: 'attribute' ExtAttr: 'Reflect')
    {"axis", HTMLTableCellElementInternal::axisAttrGetter, HTMLTableCellElementInternal::axisAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'bgColor' (Type: 'attribute' ExtAttr: 'Reflect')
    {"bgColor", HTMLTableCellElementInternal::bgColorAttrGetter, HTMLTableCellElementInternal::bgColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ch' (Type: 'attribute' ExtAttr: 'Reflect')
    {"ch", HTMLTableCellElementInternal::chAttrGetter, HTMLTableCellElementInternal::chAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'chOff' (Type: 'attribute' ExtAttr: 'Reflect')
    {"chOff", HTMLTableCellElementInternal::chOffAttrGetter, HTMLTableCellElementInternal::chOffAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'colSpan' (Type: 'attribute' ExtAttr: '')
    {"colSpan", HTMLTableCellElementInternal::colSpanAttrGetter, HTMLTableCellElementInternal::colSpanAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'headers' (Type: 'attribute' ExtAttr: 'Reflect')
    {"headers", HTMLTableCellElementInternal::headersAttrGetter, HTMLTableCellElementInternal::headersAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'attribute' ExtAttr: 'Reflect')
    {"height", HTMLTableCellElementInternal::heightAttrGetter, HTMLTableCellElementInternal::heightAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'noWrap' (Type: 'attribute' ExtAttr: 'Reflect')
    {"noWrap", HTMLTableCellElementInternal::noWrapAttrGetter, HTMLTableCellElementInternal::noWrapAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rowSpan' (Type: 'attribute' ExtAttr: '')
    {"rowSpan", HTMLTableCellElementInternal::rowSpanAttrGetter, HTMLTableCellElementInternal::rowSpanAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scope' (Type: 'attribute' ExtAttr: 'Reflect')
    {"scope", HTMLTableCellElementInternal::scopeAttrGetter, HTMLTableCellElementInternal::scopeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'vAlign' (Type: 'attribute' ExtAttr: 'Reflect')
    {"vAlign", HTMLTableCellElementInternal::vAlignAttrGetter, HTMLTableCellElementInternal::vAlignAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'attribute' ExtAttr: 'Reflect')
    {"width", HTMLTableCellElementInternal::widthAttrGetter, HTMLTableCellElementInternal::widthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLTableCellElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLTableCellElement", V8HTMLElement::GetTemplate(), V8HTMLTableCellElement::internalFieldCount,
        HTMLTableCellElementAttrs, WTF_ARRAY_LENGTH(HTMLTableCellElementAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableCellElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableCellElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLTableCellElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLTableCellElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLTableCellElement::wrapSlow(HTMLTableCellElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLTableCellElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLTableCellElement::derefObject(void* object)
{
    static_cast<HTMLTableCellElement*>(object)->deref();
}

} // namespace WebCore
