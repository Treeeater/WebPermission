/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8DataView.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8ArrayBufferView.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8DataView::info = { V8DataView::GetTemplate, V8DataView::derefObject, 0, &V8ArrayBufferView::info };

namespace DataViewInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> getInt16Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.getInt16");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    if (args.Length() <= 1) {
        int result = imp->getInt16(byteOffset, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Integer::New(result);
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    int result = imp->getInt16(byteOffset, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Integer::New(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getUint16Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.getUint16");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    if (args.Length() <= 1) {
        int result = imp->getUint16(byteOffset, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Integer::New(result);
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    int result = imp->getUint16(byteOffset, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Integer::New(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getInt32Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.getInt32");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    if (args.Length() <= 1) {
        int result = imp->getInt32(byteOffset, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Integer::New(result);
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    int result = imp->getInt32(byteOffset, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Integer::New(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getUint32Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.getUint32");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    if (args.Length() <= 1) {
        unsigned result = imp->getUint32(byteOffset, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Integer::NewFromUnsigned(result);
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    unsigned result = imp->getUint32(byteOffset, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Integer::NewFromUnsigned(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getFloat32Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.getFloat32");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    if (args.Length() <= 1) {
        float result = imp->getFloat32(byteOffset, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Number::New(result);
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    float result = imp->getFloat32(byteOffset, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Number::New(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getFloat64Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.getFloat64");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    if (args.Length() <= 1) {
        double result = imp->getFloat64(byteOffset, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Number::New(result);
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    double result = imp->getFloat64(byteOffset, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Number::New(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setInt16Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.setInt16");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, value, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    if (args.Length() <= 2) {
        imp->setInt16(byteOffset, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    imp->setInt16(byteOffset, value, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setUint16Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.setUint16");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, value, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    if (args.Length() <= 2) {
        imp->setUint16(byteOffset, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    imp->setUint16(byteOffset, value, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setInt32Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.setInt32");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, value, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    if (args.Length() <= 2) {
        imp->setInt32(byteOffset, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    imp->setInt32(byteOffset, value, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setUint32Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.setUint32");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(unsigned, value, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    if (args.Length() <= 2) {
        imp->setUint32(byteOffset, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    imp->setUint32(byteOffset, value, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setFloat32Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.setFloat32");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(float, value, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    if (args.Length() <= 2) {
        imp->setFloat32(byteOffset, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    imp->setFloat32(byteOffset, value, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setFloat64Callback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataView.setFloat64");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DataView* imp = V8DataView::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(unsigned, byteOffset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(double, value, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    if (args.Length() <= 2) {
        imp->setFloat64(byteOffset, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, littleEndian, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    imp->setFloat64(byteOffset, value, littleEndian, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace DataViewInternal

static const BatchedCallback DataViewCallbacks[] = {
    {"getInt8", V8DataView::getInt8Callback},
    {"getUint8", V8DataView::getUint8Callback},
    {"getInt16", DataViewInternal::getInt16Callback},
    {"getUint16", DataViewInternal::getUint16Callback},
    {"getInt32", DataViewInternal::getInt32Callback},
    {"getUint32", DataViewInternal::getUint32Callback},
    {"getFloat32", DataViewInternal::getFloat32Callback},
    {"getFloat64", DataViewInternal::getFloat64Callback},
    {"setInt8", V8DataView::setInt8Callback},
    {"setUint8", V8DataView::setUint8Callback},
    {"setInt16", DataViewInternal::setInt16Callback},
    {"setUint16", DataViewInternal::setUint16Callback},
    {"setInt32", DataViewInternal::setInt32Callback},
    {"setUint32", DataViewInternal::setUint32Callback},
    {"setFloat32", DataViewInternal::setFloat32Callback},
    {"setFloat64", DataViewInternal::setFloat64Callback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8DataViewTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "DataView", V8ArrayBufferView::GetTemplate(), V8DataView::internalFieldCount,
        0, 0,
        DataViewCallbacks, WTF_ARRAY_LENGTH(DataViewCallbacks));
    desc->SetCallHandler(V8DataView::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DataView::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8DataView::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8DataViewTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8DataView::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DataView::wrapSlow(DataView* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8DataView::derefObject(void* object)
{
    static_cast<DataView*>(object)->deref();
}

} // namespace WebCore
