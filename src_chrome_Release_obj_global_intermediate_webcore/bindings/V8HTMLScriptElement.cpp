/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLScriptElement.h"

#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLScriptElement::info = { V8HTMLScriptElement::GetTemplate, V8HTMLScriptElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLScriptElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> textAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.text._get");
    HTMLScriptElement* imp = V8HTMLScriptElement::toNative(info.Holder());
    return v8String(imp->text());
}

static void textAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.text._set");
    HTMLScriptElement* imp = V8HTMLScriptElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setText(v);
    return;
}

static v8::Handle<v8::Value> htmlForAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.htmlFor._get");
    return getElementStringAttr(info, HTMLNames::forAttr);
}

static void htmlForAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.htmlFor._set");
    setElementStringAttr(info, HTMLNames::forAttr, value);
}

static v8::Handle<v8::Value> eventAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.event._get");
    return getElementStringAttr(info, HTMLNames::eventAttr);
}

static void eventAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.event._set");
    setElementStringAttr(info, HTMLNames::eventAttr, value);
}

static v8::Handle<v8::Value> charsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.charset._get");
    return getElementStringAttr(info, HTMLNames::charsetAttr);
}

static void charsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.charset._set");
    setElementStringAttr(info, HTMLNames::charsetAttr, value);
}

static v8::Handle<v8::Value> asyncAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.async._get");
    HTMLScriptElement* imp = V8HTMLScriptElement::toNative(info.Holder());
    return v8Boolean(imp->async());
}

static void asyncAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.async._set");
    HTMLScriptElement* imp = V8HTMLScriptElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setAsync(v);
    return;
}

static v8::Handle<v8::Value> deferAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.defer._get");
    HTMLScriptElement* imp = V8HTMLScriptElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::deferAttr));
}

static void deferAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.defer._set");
    HTMLScriptElement* imp = V8HTMLScriptElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::deferAttr, v);
    return;
}

static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.src._get");
    HTMLScriptElement* imp = V8HTMLScriptElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::srcAttr));
}

static void srcAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.src._set");
    setElementStringAttr(info, HTMLNames::srcAttr, value);
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.type._get");
    return getElementStringAttr(info, HTMLNames::typeAttr);
}

static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLScriptElement.type._set");
    setElementStringAttr(info, HTMLNames::typeAttr, value);
}

} // namespace HTMLScriptElementInternal

static const BatchedAttribute HTMLScriptElementAttrs[] = {
    // Attribute 'text' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"text", HTMLScriptElementInternal::textAttrGetter, HTMLScriptElementInternal::textAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'htmlFor' (Type: 'attribute' ExtAttr: 'Reflect')
    {"htmlFor", HTMLScriptElementInternal::htmlForAttrGetter, HTMLScriptElementInternal::htmlForAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'event' (Type: 'attribute' ExtAttr: 'Reflect')
    {"event", HTMLScriptElementInternal::eventAttrGetter, HTMLScriptElementInternal::eventAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'charset' (Type: 'attribute' ExtAttr: 'Reflect')
    {"charset", HTMLScriptElementInternal::charsetAttrGetter, HTMLScriptElementInternal::charsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'async' (Type: 'attribute' ExtAttr: '')
    {"async", HTMLScriptElementInternal::asyncAttrGetter, HTMLScriptElementInternal::asyncAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defer' (Type: 'attribute' ExtAttr: 'Reflect')
    {"defer", HTMLScriptElementInternal::deferAttrGetter, HTMLScriptElementInternal::deferAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'src' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"src", HTMLScriptElementInternal::srcAttrGetter, HTMLScriptElementInternal::srcAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'attribute' ExtAttr: 'Reflect')
    {"type", HTMLScriptElementInternal::typeAttrGetter, HTMLScriptElementInternal::typeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLScriptElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLScriptElement", V8HTMLElement::GetTemplate(), V8HTMLScriptElement::internalFieldCount,
        HTMLScriptElementAttrs, WTF_ARRAY_LENGTH(HTMLScriptElementAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLScriptElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLScriptElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLScriptElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLScriptElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLScriptElement::wrapSlow(HTMLScriptElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLScriptElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLScriptElement::derefObject(void* object)
{
    static_cast<HTMLScriptElement*>(object)->deref();
}

} // namespace WebCore
