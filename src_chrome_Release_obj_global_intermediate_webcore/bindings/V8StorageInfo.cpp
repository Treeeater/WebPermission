/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8StorageInfo.h"

#if ENABLE(QUOTA)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8StorageInfoErrorCallback.h"
#include "V8StorageInfoQuotaCallback.h"
#include "V8StorageInfoUsageCallback.h"

namespace WebCore {

WrapperTypeInfo V8StorageInfo::info = { V8StorageInfo::GetTemplate, V8StorageInfo::derefObject, 0, 0 };

namespace StorageInfoInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> queryUsageAndQuotaCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.StorageInfo.queryUsageAndQuota");
    StorageInfo* imp = V8StorageInfo::toNative(args.Holder());
    EXCEPTION_BLOCK(int, storageType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    RefPtr<StorageInfoUsageCallback> usageCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        usageCallback = V8StorageInfoUsageCallback::create(args[1], getScriptExecutionContext());
    }
    RefPtr<StorageInfoErrorCallback> errorCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8StorageInfoErrorCallback::create(args[2], getScriptExecutionContext());
    }
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    imp->queryUsageAndQuota(scriptContext, storageType, usageCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> requestQuotaCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.StorageInfo.requestQuota");
    StorageInfo* imp = V8StorageInfo::toNative(args.Holder());
    EXCEPTION_BLOCK(int, storageType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(unsigned long long, newQuotaInBytes, toInt64(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    RefPtr<StorageInfoQuotaCallback> quotaCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        quotaCallback = V8StorageInfoQuotaCallback::create(args[2], getScriptExecutionContext());
    }
    RefPtr<StorageInfoErrorCallback> errorCallback;
    if (args.Length() > 3 && !args[3]->IsNull() && !args[3]->IsUndefined()) {
        if (!args[3]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8StorageInfoErrorCallback::create(args[3], getScriptExecutionContext());
    }
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    imp->requestQuota(scriptContext, storageType, newQuotaInBytes, quotaCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

} // namespace StorageInfoInternal

static const BatchedCallback StorageInfoCallbacks[] = {
    {"queryUsageAndQuota", StorageInfoInternal::queryUsageAndQuotaCallback},
    {"requestQuota", StorageInfoInternal::requestQuotaCallback},
};

static const BatchedConstant StorageInfoConsts[] = {
    {"TEMPORARY", static_cast<signed int>(0)},
    {"PERSISTENT", static_cast<signed int>(1)},
};


COMPILE_ASSERT(0 == StorageInfo::TEMPORARY, StorageInfoEnumTEMPORARYIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == StorageInfo::PERSISTENT, StorageInfoEnumPERSISTENTIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8StorageInfoTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "StorageInfo", v8::Persistent<v8::FunctionTemplate>(), V8StorageInfo::internalFieldCount,
        0, 0,
        StorageInfoCallbacks, WTF_ARRAY_LENGTH(StorageInfoCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    batchConfigureConstants(desc, proto, StorageInfoConsts, WTF_ARRAY_LENGTH(StorageInfoConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8StorageInfo::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8StorageInfo::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8StorageInfoTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8StorageInfo::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8StorageInfo::wrapSlow(StorageInfo* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8StorageInfo::derefObject(void* object)
{
    static_cast<StorageInfo*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(QUOTA)
