/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGSVGElement.h"

#if ENABLE(SVG)

#include "CSSMutableStyleDeclaration.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "SVGPropertyTearOff.h"
#include "SVGStaticPropertyTearOff.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CSSStyleDeclaration.h"
#include "V8CSSValue.h"
#include "V8DOMWrapper.h"
#include "V8Element.h"
#include "V8IsolatedContext.h"
#include "V8NodeList.h"
#include "V8Proxy.h"
#include "V8SVGAngle.h"
#include "V8SVGAnimatedBoolean.h"
#include "V8SVGAnimatedLength.h"
#include "V8SVGAnimatedPreserveAspectRatio.h"
#include "V8SVGAnimatedRect.h"
#include "V8SVGAnimatedString.h"
#include "V8SVGElement.h"
#include "V8SVGLength.h"
#include "V8SVGMatrix.h"
#include "V8SVGNumber.h"
#include "V8SVGPoint.h"
#include "V8SVGRect.h"
#include "V8SVGStringList.h"
#include "V8SVGTransform.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8SVGSVGElement::info = { V8SVGSVGElement::GetTemplate, V8SVGSVGElement::derefObject, 0, &V8SVGElement::info };

namespace SVGSVGElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> xAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.x._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->xAnimated());
}

static v8::Handle<v8::Value> yAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.y._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->yAnimated());
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.width._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->widthAnimated());
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.height._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->heightAnimated());
}

static v8::Handle<v8::Value> contentScriptTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.contentScriptType._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8String(imp->contentScriptType());
}

static void contentScriptTypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.contentScriptType._set");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setContentScriptType(v);
    return;
}

static v8::Handle<v8::Value> contentStyleTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.contentStyleType._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8String(imp->contentStyleType());
}

static void contentStyleTypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.contentStyleType._set");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setContentStyleType(v);
    return;
}

static v8::Handle<v8::Value> viewportAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.viewport._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<FloatRect>::create(imp->viewport())));
}

static v8::Handle<v8::Value> pixelUnitToMillimeterXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.pixelUnitToMillimeterX._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8::Number::New(imp->pixelUnitToMillimeterX());
}

static v8::Handle<v8::Value> pixelUnitToMillimeterYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.pixelUnitToMillimeterY._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8::Number::New(imp->pixelUnitToMillimeterY());
}

static v8::Handle<v8::Value> screenPixelToMillimeterXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.screenPixelToMillimeterX._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8::Number::New(imp->screenPixelToMillimeterX());
}

static v8::Handle<v8::Value> screenPixelToMillimeterYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.screenPixelToMillimeterY._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8::Number::New(imp->screenPixelToMillimeterY());
}

static v8::Handle<v8::Value> useCurrentViewAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.useCurrentView._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8Boolean(imp->useCurrentView());
}

static void useCurrentViewAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.useCurrentView._set");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setUseCurrentView(v);
    return;
}

static v8::Handle<v8::Value> currentScaleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.currentScale._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8::Number::New(imp->currentScale());
}

static void currentScaleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.currentScale._set");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setCurrentScale(v);
    return;
}

static v8::Handle<v8::Value> currentTranslateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.currentTranslate._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(WTF::getPtr(SVGStaticPropertyTearOff<SVGSVGElement, FloatPoint>::create(imp, imp->currentTranslate(), &SVGSVGElement::updateCurrentTranslate)));
}

static v8::Handle<v8::Value> requiredFeaturesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.requiredFeatures._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(WTF::getPtr(SVGStaticListPropertyTearOff<SVGStringList>::create(imp, imp->requiredFeatures())));
}

static v8::Handle<v8::Value> requiredExtensionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.requiredExtensions._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(WTF::getPtr(SVGStaticListPropertyTearOff<SVGStringList>::create(imp, imp->requiredExtensions())));
}

static v8::Handle<v8::Value> systemLanguageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.systemLanguage._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(WTF::getPtr(SVGStaticListPropertyTearOff<SVGStringList>::create(imp, imp->systemLanguage())));
}

static v8::Handle<v8::Value> xmllangAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.xmllang._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8String(imp->xmllang());
}

static void xmllangAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.xmllang._set");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setXmllang(v);
    return;
}

static v8::Handle<v8::Value> xmlspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.xmlspace._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8String(imp->xmlspace());
}

static void xmlspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.xmlspace._set");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setXmlspace(v);
    return;
}

static v8::Handle<v8::Value> externalResourcesRequiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.externalResourcesRequired._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->externalResourcesRequiredAnimated());
}

static v8::Handle<v8::Value> classNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.className._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->classNameAnimated());
}

static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.style._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->style());
}

static v8::Handle<v8::Value> nearestViewportElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.nearestViewportElement._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->nearestViewportElement());
}

static v8::Handle<v8::Value> farthestViewportElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.farthestViewportElement._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->farthestViewportElement());
}

static v8::Handle<v8::Value> viewBoxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.viewBox._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->viewBoxAnimated());
}

static v8::Handle<v8::Value> preserveAspectRatioAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.preserveAspectRatio._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return toV8(imp->preserveAspectRatioAnimated());
}

static v8::Handle<v8::Value> zoomAndPanAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.zoomAndPan._get");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    return v8::Integer::New(imp->zoomAndPan());
}

static void zoomAndPanAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.SVGSVGElement.zoomAndPan._set");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(info.Holder());
    int v = toUInt32(value);
    imp->setZoomAndPan(v);
    return;
}

static v8::Handle<v8::Value> suspendRedrawCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.suspendRedraw");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(unsigned, maxWaitMilliseconds, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    return v8::Integer::NewFromUnsigned(imp->suspendRedraw(maxWaitMilliseconds));
}

static v8::Handle<v8::Value> unsuspendRedrawCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.unsuspendRedraw");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(unsigned, suspendHandleId, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->unsuspendRedraw(suspendHandleId);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> unsuspendRedrawAllCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.unsuspendRedrawAll");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    imp->unsuspendRedrawAll();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> forceRedrawCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.forceRedraw");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    imp->forceRedraw();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> pauseAnimationsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.pauseAnimations");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    imp->pauseAnimations();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> unpauseAnimationsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.unpauseAnimations");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    imp->unpauseAnimations();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> animationsPausedCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.animationsPaused");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return v8Boolean(imp->animationsPaused());
}

static v8::Handle<v8::Value> getCurrentTimeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getCurrentTime");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return v8::Number::New(imp->getCurrentTime());
}

static v8::Handle<v8::Value> setCurrentTimeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.setCurrentTime");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(float, seconds, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    imp->setCurrentTime(seconds);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getIntersectionListCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getIntersectionList");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(RefPtr<SVGPropertyTearOff<FloatRect> >, rect, V8SVGRect::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8SVGRect::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(SVGElement*, referenceElement, V8SVGElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8SVGElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    if (!rect) {
        V8Proxy::setDOMException(WebCore::TYPE_MISMATCH_ERR);
        return v8::Handle<v8::Value>();
    }
    return toV8(imp->getIntersectionList(rect->propertyReference(), referenceElement));
}

static v8::Handle<v8::Value> getEnclosureListCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getEnclosureList");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(RefPtr<SVGPropertyTearOff<FloatRect> >, rect, V8SVGRect::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8SVGRect::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(SVGElement*, referenceElement, V8SVGElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8SVGElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    if (!rect) {
        V8Proxy::setDOMException(WebCore::TYPE_MISMATCH_ERR);
        return v8::Handle<v8::Value>();
    }
    return toV8(imp->getEnclosureList(rect->propertyReference(), referenceElement));
}

static v8::Handle<v8::Value> checkIntersectionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.checkIntersection");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(SVGElement*, element, V8SVGElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8SVGElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(RefPtr<SVGPropertyTearOff<FloatRect> >, rect, V8SVGRect::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8SVGRect::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    if (!rect) {
        V8Proxy::setDOMException(WebCore::TYPE_MISMATCH_ERR);
        return v8::Handle<v8::Value>();
    }
    return v8Boolean(imp->checkIntersection(element, rect->propertyReference()));
}

static v8::Handle<v8::Value> checkEnclosureCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.checkEnclosure");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(SVGElement*, element, V8SVGElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8SVGElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(RefPtr<SVGPropertyTearOff<FloatRect> >, rect, V8SVGRect::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8SVGRect::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    if (!rect) {
        V8Proxy::setDOMException(WebCore::TYPE_MISMATCH_ERR);
        return v8::Handle<v8::Value>();
    }
    return v8Boolean(imp->checkEnclosure(element, rect->propertyReference()));
}

static v8::Handle<v8::Value> deselectAllCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.deselectAll");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    imp->deselectAll();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createSVGNumberCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGNumber");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<float>::create(imp->createSVGNumber())));
}

static v8::Handle<v8::Value> createSVGLengthCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGLength");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGLength>::create(imp->createSVGLength())));
}

static v8::Handle<v8::Value> createSVGAngleCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGAngle");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGAngle>::create(imp->createSVGAngle())));
}

static v8::Handle<v8::Value> createSVGPointCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGPoint");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<FloatPoint>::create(imp->createSVGPoint())));
}

static v8::Handle<v8::Value> createSVGMatrixCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGMatrix");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGMatrix>::create(imp->createSVGMatrix())));
}

static v8::Handle<v8::Value> createSVGRectCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGRect");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<FloatRect>::create(imp->createSVGRect())));
}

static v8::Handle<v8::Value> createSVGTransformCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGTransform");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGTransform>::create(imp->createSVGTransform())));
}

static v8::Handle<v8::Value> createSVGTransformFromMatrixCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.createSVGTransformFromMatrix");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    EXCEPTION_BLOCK(RefPtr<SVGPropertyTearOff<SVGMatrix> >, matrix, V8SVGMatrix::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8SVGMatrix::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    if (!matrix) {
        V8Proxy::setDOMException(WebCore::TYPE_MISMATCH_ERR);
        return v8::Handle<v8::Value>();
    }
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGTransform>::create(imp->createSVGTransformFromMatrix(matrix->propertyReference()))));
}

static v8::Handle<v8::Value> getElementByIdCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getElementById");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, elementId, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getElementById(elementId));
}

static v8::Handle<v8::Value> hasExtensionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.hasExtension");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, extension, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->hasExtension(extension));
}

static v8::Handle<v8::Value> getPresentationAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getPresentationAttribute");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getPresentationAttribute(name));
}

static v8::Handle<v8::Value> getBBoxCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getBBox");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<FloatRect>::create(imp->getBBox())));
}

static v8::Handle<v8::Value> getCTMCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getCTM");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGMatrix>::create(imp->getCTM())));
}

static v8::Handle<v8::Value> getScreenCTMCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getScreenCTM");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGMatrix>::create(imp->getScreenCTM())));
}

static v8::Handle<v8::Value> getTransformToElementCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.SVGSVGElement.getTransformToElement");
    SVGSVGElement* imp = V8SVGSVGElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(SVGElement*, element, V8SVGElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8SVGElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    SVGMatrix result = imp->getTransformToElement(element, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(WTF::getPtr(SVGPropertyTearOff<SVGMatrix>::create(result)));
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace SVGSVGElementInternal

static const BatchedAttribute SVGSVGElementAttrs[] = {
    // Attribute 'x' (Type: 'readonly attribute' ExtAttr: '')
    {"x", SVGSVGElementInternal::xAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'y' (Type: 'readonly attribute' ExtAttr: '')
    {"y", SVGSVGElementInternal::yAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'readonly attribute' ExtAttr: '')
    {"width", SVGSVGElementInternal::widthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'readonly attribute' ExtAttr: '')
    {"height", SVGSVGElementInternal::heightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'contentScriptType' (Type: 'attribute' ExtAttr: '')
    {"contentScriptType", SVGSVGElementInternal::contentScriptTypeAttrGetter, SVGSVGElementInternal::contentScriptTypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'contentStyleType' (Type: 'attribute' ExtAttr: '')
    {"contentStyleType", SVGSVGElementInternal::contentStyleTypeAttrGetter, SVGSVGElementInternal::contentStyleTypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'viewport' (Type: 'readonly attribute' ExtAttr: '')
    {"viewport", SVGSVGElementInternal::viewportAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pixelUnitToMillimeterX' (Type: 'readonly attribute' ExtAttr: '')
    {"pixelUnitToMillimeterX", SVGSVGElementInternal::pixelUnitToMillimeterXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pixelUnitToMillimeterY' (Type: 'readonly attribute' ExtAttr: '')
    {"pixelUnitToMillimeterY", SVGSVGElementInternal::pixelUnitToMillimeterYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'screenPixelToMillimeterX' (Type: 'readonly attribute' ExtAttr: '')
    {"screenPixelToMillimeterX", SVGSVGElementInternal::screenPixelToMillimeterXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'screenPixelToMillimeterY' (Type: 'readonly attribute' ExtAttr: '')
    {"screenPixelToMillimeterY", SVGSVGElementInternal::screenPixelToMillimeterYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'useCurrentView' (Type: 'attribute' ExtAttr: '')
    {"useCurrentView", SVGSVGElementInternal::useCurrentViewAttrGetter, SVGSVGElementInternal::useCurrentViewAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentScale' (Type: 'attribute' ExtAttr: '')
    {"currentScale", SVGSVGElementInternal::currentScaleAttrGetter, SVGSVGElementInternal::currentScaleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentTranslate' (Type: 'readonly attribute' ExtAttr: '')
    {"currentTranslate", SVGSVGElementInternal::currentTranslateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requiredFeatures' (Type: 'readonly attribute' ExtAttr: '')
    {"requiredFeatures", SVGSVGElementInternal::requiredFeaturesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requiredExtensions' (Type: 'readonly attribute' ExtAttr: '')
    {"requiredExtensions", SVGSVGElementInternal::requiredExtensionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'systemLanguage' (Type: 'readonly attribute' ExtAttr: '')
    {"systemLanguage", SVGSVGElementInternal::systemLanguageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmllang' (Type: 'attribute' ExtAttr: '')
    {"xmllang", SVGSVGElementInternal::xmllangAttrGetter, SVGSVGElementInternal::xmllangAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlspace' (Type: 'attribute' ExtAttr: '')
    {"xmlspace", SVGSVGElementInternal::xmlspaceAttrGetter, SVGSVGElementInternal::xmlspaceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'externalResourcesRequired' (Type: 'readonly attribute' ExtAttr: '')
    {"externalResourcesRequired", SVGSVGElementInternal::externalResourcesRequiredAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'className' (Type: 'readonly attribute' ExtAttr: '')
    {"className", SVGSVGElementInternal::classNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
    {"style", SVGSVGElementInternal::styleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nearestViewportElement' (Type: 'readonly attribute' ExtAttr: '')
    {"nearestViewportElement", SVGSVGElementInternal::nearestViewportElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'farthestViewportElement' (Type: 'readonly attribute' ExtAttr: '')
    {"farthestViewportElement", SVGSVGElementInternal::farthestViewportElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'viewBox' (Type: 'readonly attribute' ExtAttr: '')
    {"viewBox", SVGSVGElementInternal::viewBoxAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'preserveAspectRatio' (Type: 'readonly attribute' ExtAttr: '')
    {"preserveAspectRatio", SVGSVGElementInternal::preserveAspectRatioAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'zoomAndPan' (Type: 'attribute' ExtAttr: '')
    {"zoomAndPan", SVGSVGElementInternal::zoomAndPanAttrGetter, SVGSVGElementInternal::zoomAndPanAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback SVGSVGElementCallbacks[] = {
    {"suspendRedraw", SVGSVGElementInternal::suspendRedrawCallback},
    {"unsuspendRedraw", SVGSVGElementInternal::unsuspendRedrawCallback},
    {"unsuspendRedrawAll", SVGSVGElementInternal::unsuspendRedrawAllCallback},
    {"forceRedraw", SVGSVGElementInternal::forceRedrawCallback},
    {"pauseAnimations", SVGSVGElementInternal::pauseAnimationsCallback},
    {"unpauseAnimations", SVGSVGElementInternal::unpauseAnimationsCallback},
    {"animationsPaused", SVGSVGElementInternal::animationsPausedCallback},
    {"getCurrentTime", SVGSVGElementInternal::getCurrentTimeCallback},
    {"setCurrentTime", SVGSVGElementInternal::setCurrentTimeCallback},
    {"deselectAll", SVGSVGElementInternal::deselectAllCallback},
    {"createSVGNumber", SVGSVGElementInternal::createSVGNumberCallback},
    {"createSVGLength", SVGSVGElementInternal::createSVGLengthCallback},
    {"createSVGAngle", SVGSVGElementInternal::createSVGAngleCallback},
    {"createSVGPoint", SVGSVGElementInternal::createSVGPointCallback},
    {"createSVGMatrix", SVGSVGElementInternal::createSVGMatrixCallback},
    {"createSVGRect", SVGSVGElementInternal::createSVGRectCallback},
    {"createSVGTransform", SVGSVGElementInternal::createSVGTransformCallback},
    {"getElementById", SVGSVGElementInternal::getElementByIdCallback},
    {"hasExtension", SVGSVGElementInternal::hasExtensionCallback},
    {"getPresentationAttribute", SVGSVGElementInternal::getPresentationAttributeCallback},
    {"getBBox", SVGSVGElementInternal::getBBoxCallback},
    {"getCTM", SVGSVGElementInternal::getCTMCallback},
    {"getScreenCTM", SVGSVGElementInternal::getScreenCTMCallback},
};

static const BatchedConstant SVGSVGElementConsts[] = {
    {"SVG_ZOOMANDPAN_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_ZOOMANDPAN_DISABLE", static_cast<signed int>(1)},
    {"SVG_ZOOMANDPAN_MAGNIFY", static_cast<signed int>(2)},
};


COMPILE_ASSERT(0 == SVGSVGElement::SVG_ZOOMANDPAN_UNKNOWN, SVGSVGElementEnumSVG_ZOOMANDPAN_UNKNOWNIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == SVGSVGElement::SVG_ZOOMANDPAN_DISABLE, SVGSVGElementEnumSVG_ZOOMANDPAN_DISABLEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == SVGSVGElement::SVG_ZOOMANDPAN_MAGNIFY, SVGSVGElementEnumSVG_ZOOMANDPAN_MAGNIFYIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGSVGElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "SVGSVGElement", V8SVGElement::GetTemplate(), V8SVGSVGElement::internalFieldCount,
        SVGSVGElementAttrs, WTF_ARRAY_LENGTH(SVGSVGElementAttrs),
        SVGSVGElementCallbacks, WTF_ARRAY_LENGTH(SVGSVGElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'getIntersectionList'
    const int getIntersectionListArgc = 2;
    v8::Handle<v8::FunctionTemplate> getIntersectionListArgv[getIntersectionListArgc] = { V8SVGRect::GetRawTemplate(), V8SVGElement::GetRawTemplate() };
    v8::Handle<v8::Signature> getIntersectionListSignature = v8::Signature::New(desc, getIntersectionListArgc, getIntersectionListArgv);
    proto->Set(v8::String::New("getIntersectionList"), v8::FunctionTemplate::New(SVGSVGElementInternal::getIntersectionListCallback, v8::Handle<v8::Value>(), getIntersectionListSignature));

    // Custom Signature 'getEnclosureList'
    const int getEnclosureListArgc = 2;
    v8::Handle<v8::FunctionTemplate> getEnclosureListArgv[getEnclosureListArgc] = { V8SVGRect::GetRawTemplate(), V8SVGElement::GetRawTemplate() };
    v8::Handle<v8::Signature> getEnclosureListSignature = v8::Signature::New(desc, getEnclosureListArgc, getEnclosureListArgv);
    proto->Set(v8::String::New("getEnclosureList"), v8::FunctionTemplate::New(SVGSVGElementInternal::getEnclosureListCallback, v8::Handle<v8::Value>(), getEnclosureListSignature));

    // Custom Signature 'checkIntersection'
    const int checkIntersectionArgc = 2;
    v8::Handle<v8::FunctionTemplate> checkIntersectionArgv[checkIntersectionArgc] = { V8SVGElement::GetRawTemplate(), V8SVGRect::GetRawTemplate() };
    v8::Handle<v8::Signature> checkIntersectionSignature = v8::Signature::New(desc, checkIntersectionArgc, checkIntersectionArgv);
    proto->Set(v8::String::New("checkIntersection"), v8::FunctionTemplate::New(SVGSVGElementInternal::checkIntersectionCallback, v8::Handle<v8::Value>(), checkIntersectionSignature));

    // Custom Signature 'checkEnclosure'
    const int checkEnclosureArgc = 2;
    v8::Handle<v8::FunctionTemplate> checkEnclosureArgv[checkEnclosureArgc] = { V8SVGElement::GetRawTemplate(), V8SVGRect::GetRawTemplate() };
    v8::Handle<v8::Signature> checkEnclosureSignature = v8::Signature::New(desc, checkEnclosureArgc, checkEnclosureArgv);
    proto->Set(v8::String::New("checkEnclosure"), v8::FunctionTemplate::New(SVGSVGElementInternal::checkEnclosureCallback, v8::Handle<v8::Value>(), checkEnclosureSignature));

    // Custom Signature 'createSVGTransformFromMatrix'
    const int createSVGTransformFromMatrixArgc = 1;
    v8::Handle<v8::FunctionTemplate> createSVGTransformFromMatrixArgv[createSVGTransformFromMatrixArgc] = { V8SVGMatrix::GetRawTemplate() };
    v8::Handle<v8::Signature> createSVGTransformFromMatrixSignature = v8::Signature::New(desc, createSVGTransformFromMatrixArgc, createSVGTransformFromMatrixArgv);
    proto->Set(v8::String::New("createSVGTransformFromMatrix"), v8::FunctionTemplate::New(SVGSVGElementInternal::createSVGTransformFromMatrixCallback, v8::Handle<v8::Value>(), createSVGTransformFromMatrixSignature));

    // Custom Signature 'getTransformToElement'
    const int getTransformToElementArgc = 1;
    v8::Handle<v8::FunctionTemplate> getTransformToElementArgv[getTransformToElementArgc] = { V8SVGElement::GetRawTemplate() };
    v8::Handle<v8::Signature> getTransformToElementSignature = v8::Signature::New(desc, getTransformToElementArgc, getTransformToElementArgv);
    proto->Set(v8::String::New("getTransformToElement"), v8::FunctionTemplate::New(SVGSVGElementInternal::getTransformToElementCallback, v8::Handle<v8::Value>(), getTransformToElementSignature));
    batchConfigureConstants(desc, proto, SVGSVGElementConsts, WTF_ARRAY_LENGTH(SVGSVGElementConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGSVGElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGSVGElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGSVGElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGSVGElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGSVGElement::wrapSlow(SVGSVGElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8SVGSVGElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8SVGSVGElement::derefObject(void* object)
{
    static_cast<SVGSVGElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
