/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLButtonElement.h"

#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8IsolatedContext.h"
#include "V8NodeList.h"
#include "V8Proxy.h"
#include "V8ValidityState.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8HTMLButtonElement::info = { V8HTMLButtonElement::GetTemplate, V8HTMLButtonElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLButtonElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.form._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return toV8(imp->form());
}

static v8::Handle<v8::Value> formActionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formAction._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::formactionAttr));
}

static void formActionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formAction._set");
    setElementStringAttr(info, HTMLNames::formactionAttr, value);
}

static v8::Handle<v8::Value> formEnctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formEnctype._get");
    return getElementStringAttr(info, HTMLNames::formenctypeAttr);
}

static void formEnctypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formEnctype._set");
    setElementStringAttr(info, HTMLNames::formenctypeAttr, value);
}

static v8::Handle<v8::Value> formMethodAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formMethod._get");
    return getElementStringAttr(info, HTMLNames::formmethodAttr);
}

static void formMethodAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formMethod._set");
    setElementStringAttr(info, HTMLNames::formmethodAttr, value);
}

static v8::Handle<v8::Value> formNoValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formNoValidate._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::formnovalidateAttr));
}

static void formNoValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formNoValidate._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::formnovalidateAttr, v);
    return;
}

static v8::Handle<v8::Value> formTargetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formTarget._get");
    return getElementStringAttr(info, HTMLNames::formtargetAttr);
}

static void formTargetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.formTarget._set");
    setElementStringAttr(info, HTMLNames::formtargetAttr, value);
}

static v8::Handle<v8::Value> validityAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.validity._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return toV8(imp->validity());
}

static v8::Handle<v8::Value> accessKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.accessKey._get");
    return getElementStringAttr(info, HTMLNames::accesskeyAttr);
}

static void accessKeyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.accessKey._set");
    setElementStringAttr(info, HTMLNames::accesskeyAttr, value);
}

static v8::Handle<v8::Value> disabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.disabled._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::disabledAttr));
}

static void disabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.disabled._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, v);
    return;
}

static v8::Handle<v8::Value> autofocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.autofocus._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::autofocusAttr));
}

static void autofocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.autofocus._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, v);
    return;
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.type._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->type());
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.value._get");
    return getElementStringAttr(info, HTMLNames::valueAttr);
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.value._set");
    setElementStringAttr(info, HTMLNames::valueAttr, value);
}

static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.willValidate._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate());
}

static v8::Handle<v8::Value> validationMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.validationMessage._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->validationMessage());
}

static v8::Handle<v8::Value> labelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLButtonElement.labels._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return toV8(imp->labels());
}

static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLButtonElement.checkValidity");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity());
}

static v8::Handle<v8::Value> setCustomValidityCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLButtonElement.setCustomValidity");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, error, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->setCustomValidity(error);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> clickCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLButtonElement.click");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(args.Holder());
    imp->click();
    return v8::Handle<v8::Value>();
}

} // namespace HTMLButtonElementInternal

static const BatchedAttribute HTMLButtonElementAttrs[] = {
    // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
    {"form", HTMLButtonElementInternal::formAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formAction' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"formAction", HTMLButtonElementInternal::formActionAttrGetter, HTMLButtonElementInternal::formActionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formEnctype' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formEnctype", HTMLButtonElementInternal::formEnctypeAttrGetter, HTMLButtonElementInternal::formEnctypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formMethod' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formMethod", HTMLButtonElementInternal::formMethodAttrGetter, HTMLButtonElementInternal::formMethodAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formNoValidate' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formNoValidate", HTMLButtonElementInternal::formNoValidateAttrGetter, HTMLButtonElementInternal::formNoValidateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formTarget' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formTarget", HTMLButtonElementInternal::formTargetAttrGetter, HTMLButtonElementInternal::formTargetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validity' (Type: 'readonly attribute' ExtAttr: '')
    {"validity", HTMLButtonElementInternal::validityAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'accessKey' (Type: 'attribute' ExtAttr: 'Reflect')
    {"accessKey", HTMLButtonElementInternal::accessKeyAttrGetter, HTMLButtonElementInternal::accessKeyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'disabled' (Type: 'attribute' ExtAttr: 'Reflect')
    {"disabled", HTMLButtonElementInternal::disabledAttrGetter, HTMLButtonElementInternal::disabledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autofocus' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autofocus", HTMLButtonElementInternal::autofocusAttrGetter, HTMLButtonElementInternal::autofocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLButtonElementInternal::nameAttrGetter, HTMLButtonElementInternal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", HTMLButtonElementInternal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'attribute' ExtAttr: 'Reflect')
    {"value", HTMLButtonElementInternal::valueAttrGetter, HTMLButtonElementInternal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
    {"willValidate", HTMLButtonElementInternal::willValidateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validationMessage' (Type: 'readonly attribute' ExtAttr: '')
    {"validationMessage", HTMLButtonElementInternal::validationMessageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'labels' (Type: 'readonly attribute' ExtAttr: '')
    {"labels", HTMLButtonElementInternal::labelsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback HTMLButtonElementCallbacks[] = {
    {"checkValidity", HTMLButtonElementInternal::checkValidityCallback},
    {"setCustomValidity", HTMLButtonElementInternal::setCustomValidityCallback},
    {"click", HTMLButtonElementInternal::clickCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLButtonElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLButtonElement", V8HTMLElement::GetTemplate(), V8HTMLButtonElement::internalFieldCount,
        HTMLButtonElementAttrs, WTF_ARRAY_LENGTH(HTMLButtonElementAttrs),
        HTMLButtonElementCallbacks, WTF_ARRAY_LENGTH(HTMLButtonElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLButtonElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLButtonElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLButtonElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLButtonElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLButtonElement::wrapSlow(HTMLButtonElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLButtonElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLButtonElement::derefObject(void* object)
{
    static_cast<HTMLButtonElement*>(object)->deref();
}

} // namespace WebCore
