/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLMarqueeElement.h"

#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8HTMLMarqueeElement::info = { V8HTMLMarqueeElement::GetTemplate, V8HTMLMarqueeElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLMarqueeElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> behaviorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.behavior._get");
    return getElementStringAttr(info, HTMLNames::behaviorAttr);
}

static void behaviorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.behavior._set");
    setElementStringAttr(info, HTMLNames::behaviorAttr, value);
}

static v8::Handle<v8::Value> bgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.bgColor._get");
    return getElementStringAttr(info, HTMLNames::bgcolorAttr);
}

static void bgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.bgColor._set");
    setElementStringAttr(info, HTMLNames::bgcolorAttr, value);
}

static v8::Handle<v8::Value> directionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.direction._get");
    return getElementStringAttr(info, HTMLNames::directionAttr);
}

static void directionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.direction._set");
    setElementStringAttr(info, HTMLNames::directionAttr, value);
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.height._get");
    return getElementStringAttr(info, HTMLNames::heightAttr);
}

static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.height._set");
    setElementStringAttr(info, HTMLNames::heightAttr, value);
}

static v8::Handle<v8::Value> hspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.hspace._get");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(std::max(0, imp->getIntegralAttribute(WebCore::HTMLNames::hspaceAttr)));
}

static void hspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.hspace._set");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr, v);
    return;
}

static v8::Handle<v8::Value> loopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.loop._get");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    return v8::Integer::New(imp->loop());
}

static void loopAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.loop._set");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setLoop(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> scrollAmountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.scrollAmount._get");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    return v8::Integer::New(imp->scrollAmount());
}

static void scrollAmountAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.scrollAmount._set");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setScrollAmount(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> scrollDelayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.scrollDelay._get");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    return v8::Integer::New(imp->scrollDelay());
}

static void scrollDelayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.scrollDelay._set");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setScrollDelay(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
}

static v8::Handle<v8::Value> trueSpeedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.trueSpeed._get");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    return v8Boolean(imp->hasAttribute(WebCore::HTMLNames::truespeedAttr));
}

static void trueSpeedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.trueSpeed._set");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::truespeedAttr, v);
    return;
}

static v8::Handle<v8::Value> vspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.vspace._get");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(std::max(0, imp->getIntegralAttribute(WebCore::HTMLNames::vspaceAttr)));
}

static void vspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.vspace._set");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr, v);
    return;
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.width._get");
    return getElementStringAttr(info, HTMLNames::widthAttr);
}

static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLMarqueeElement.width._set");
    setElementStringAttr(info, HTMLNames::widthAttr, value);
}

static v8::Handle<v8::Value> startCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLMarqueeElement.start");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(args.Holder());
    imp->start();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> stopCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLMarqueeElement.stop");
    HTMLMarqueeElement* imp = V8HTMLMarqueeElement::toNative(args.Holder());
    imp->stop();
    return v8::Handle<v8::Value>();
}

} // namespace HTMLMarqueeElementInternal

static const BatchedAttribute HTMLMarqueeElementAttrs[] = {
    // Attribute 'behavior' (Type: 'attribute' ExtAttr: 'Reflect')
    {"behavior", HTMLMarqueeElementInternal::behaviorAttrGetter, HTMLMarqueeElementInternal::behaviorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'bgColor' (Type: 'attribute' ExtAttr: 'Reflect')
    {"bgColor", HTMLMarqueeElementInternal::bgColorAttrGetter, HTMLMarqueeElementInternal::bgColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'direction' (Type: 'attribute' ExtAttr: 'Reflect')
    {"direction", HTMLMarqueeElementInternal::directionAttrGetter, HTMLMarqueeElementInternal::directionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'attribute' ExtAttr: 'Reflect')
    {"height", HTMLMarqueeElementInternal::heightAttrGetter, HTMLMarqueeElementInternal::heightAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'hspace' (Type: 'attribute' ExtAttr: 'Reflect')
    {"hspace", HTMLMarqueeElementInternal::hspaceAttrGetter, HTMLMarqueeElementInternal::hspaceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'loop' (Type: 'attribute' ExtAttr: '')
    {"loop", HTMLMarqueeElementInternal::loopAttrGetter, HTMLMarqueeElementInternal::loopAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollAmount' (Type: 'attribute' ExtAttr: '')
    {"scrollAmount", HTMLMarqueeElementInternal::scrollAmountAttrGetter, HTMLMarqueeElementInternal::scrollAmountAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollDelay' (Type: 'attribute' ExtAttr: '')
    {"scrollDelay", HTMLMarqueeElementInternal::scrollDelayAttrGetter, HTMLMarqueeElementInternal::scrollDelayAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'trueSpeed' (Type: 'attribute' ExtAttr: 'Reflect')
    {"trueSpeed", HTMLMarqueeElementInternal::trueSpeedAttrGetter, HTMLMarqueeElementInternal::trueSpeedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'vspace' (Type: 'attribute' ExtAttr: 'Reflect')
    {"vspace", HTMLMarqueeElementInternal::vspaceAttrGetter, HTMLMarqueeElementInternal::vspaceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'attribute' ExtAttr: 'Reflect')
    {"width", HTMLMarqueeElementInternal::widthAttrGetter, HTMLMarqueeElementInternal::widthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback HTMLMarqueeElementCallbacks[] = {
    {"start", HTMLMarqueeElementInternal::startCallback},
    {"stop", HTMLMarqueeElementInternal::stopCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLMarqueeElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLMarqueeElement", V8HTMLElement::GetTemplate(), V8HTMLMarqueeElement::internalFieldCount,
        HTMLMarqueeElementAttrs, WTF_ARRAY_LENGTH(HTMLMarqueeElementAttrs),
        HTMLMarqueeElementCallbacks, WTF_ARRAY_LENGTH(HTMLMarqueeElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLMarqueeElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLMarqueeElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLMarqueeElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLMarqueeElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLMarqueeElement::wrapSlow(HTMLMarqueeElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLMarqueeElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLMarqueeElement::derefObject(void* object)
{
    static_cast<HTMLMarqueeElement*>(object)->deref();
}

} // namespace WebCore
