/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8DOMWindow.h"

#include "CSSMutableStyleDeclaration.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8ArrayBuffer.h"
#include "V8Attr.h"
#include "V8BarInfo.h"
#include "V8BeforeLoadEvent.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8Blob.h"
#include "V8CDATASection.h"
#include "V8CSSCharsetRule.h"
#include "V8CSSFontFaceRule.h"
#include "V8CSSImportRule.h"
#include "V8CSSMediaRule.h"
#include "V8CSSPageRule.h"
#include "V8CSSPrimitiveValue.h"
#include "V8CSSRule.h"
#include "V8CSSRuleList.h"
#include "V8CSSStyleDeclaration.h"
#include "V8CSSStyleRule.h"
#include "V8CSSStyleSheet.h"
#include "V8CSSValue.h"
#include "V8CSSValueList.h"
#include "V8CanvasGradient.h"
#include "V8CanvasPattern.h"
#include "V8CanvasRenderingContext2D.h"
#include "V8CharacterData.h"
#include "V8ClientRect.h"
#include "V8ClientRectList.h"
#include "V8Clipboard.h"
#include "V8Collection.h"
#include "V8Comment.h"
#include "V8CompositionEvent.h"
#include "V8Console.h"
#include "V8Counter.h"
#include "V8Crypto.h"
#include "V8CustomEvent.h"
#include "V8DOMApplicationCache.h"
#include "V8DOMCoreException.h"
#include "V8DOMFormData.h"
#include "V8DOMImplementation.h"
#include "V8DOMMimeType.h"
#include "V8DOMMimeTypeArray.h"
#include "V8DOMParser.h"
#include "V8DOMPlugin.h"
#include "V8DOMPluginArray.h"
#include "V8DOMSelection.h"
#include "V8DOMSettableTokenList.h"
#include "V8DOMStringList.h"
#include "V8DOMStringMap.h"
#include "V8DOMTokenList.h"
#include "V8DOMURL.h"
#include "V8DOMWrapper.h"
#include "V8DataView.h"
#include "V8Database.h"
#include "V8DatabaseCallback.h"
#include "V8Document.h"
#include "V8DocumentFragment.h"
#include "V8DocumentType.h"
#include "V8Element.h"
#include "V8Entity.h"
#include "V8EntityReference.h"
#include "V8EntryCallback.h"
#include "V8ErrorCallback.h"
#include "V8ErrorEvent.h"
#include "V8Event.h"
#include "V8EventException.h"
#include "V8EventListenerList.h"
#include "V8EventSource.h"
#include "V8File.h"
#include "V8FileList.h"
#include "V8FileSystemCallback.h"
#include "V8Float32Array.h"
#include "V8Float64Array.h"
#include "V8HTMLAllCollection.h"
#include "V8HTMLAnchorElement.h"
#include "V8HTMLAppletElement.h"
#include "V8HTMLAreaElement.h"
#include "V8HTMLBRElement.h"
#include "V8HTMLBaseElement.h"
#include "V8HTMLBaseFontElement.h"
#include "V8HTMLBodyElement.h"
#include "V8HTMLButtonElement.h"
#include "V8HTMLCanvasElement.h"
#include "V8HTMLCollection.h"
#include "V8HTMLDListElement.h"
#include "V8HTMLDirectoryElement.h"
#include "V8HTMLDivElement.h"
#include "V8HTMLDocument.h"
#include "V8HTMLElement.h"
#include "V8HTMLEmbedElement.h"
#include "V8HTMLFieldSetElement.h"
#include "V8HTMLFontElement.h"
#include "V8HTMLFormElement.h"
#include "V8HTMLFrameElement.h"
#include "V8HTMLFrameSetElement.h"
#include "V8HTMLHRElement.h"
#include "V8HTMLHeadElement.h"
#include "V8HTMLHeadingElement.h"
#include "V8HTMLHtmlElement.h"
#include "V8HTMLIFrameElement.h"
#include "V8HTMLImageElement.h"
#include "V8HTMLInputElement.h"
#include "V8HTMLIsIndexElement.h"
#include "V8HTMLKeygenElement.h"
#include "V8HTMLLIElement.h"
#include "V8HTMLLabelElement.h"
#include "V8HTMLLegendElement.h"
#include "V8HTMLLinkElement.h"
#include "V8HTMLMapElement.h"
#include "V8HTMLMarqueeElement.h"
#include "V8HTMLMenuElement.h"
#include "V8HTMLMetaElement.h"
#include "V8HTMLMeterElement.h"
#include "V8HTMLModElement.h"
#include "V8HTMLOListElement.h"
#include "V8HTMLObjectElement.h"
#include "V8HTMLOptGroupElement.h"
#include "V8HTMLOptionElement.h"
#include "V8HTMLOutputElement.h"
#include "V8HTMLParagraphElement.h"
#include "V8HTMLParamElement.h"
#include "V8HTMLPreElement.h"
#include "V8HTMLProgressElement.h"
#include "V8HTMLQuoteElement.h"
#include "V8HTMLScriptElement.h"
#include "V8HTMLSelectElement.h"
#include "V8HTMLSpanElement.h"
#include "V8HTMLStyleElement.h"
#include "V8HTMLTableCaptionElement.h"
#include "V8HTMLTableCellElement.h"
#include "V8HTMLTableColElement.h"
#include "V8HTMLTableElement.h"
#include "V8HTMLTableRowElement.h"
#include "V8HTMLTableSectionElement.h"
#include "V8HTMLTextAreaElement.h"
#include "V8HTMLTitleElement.h"
#include "V8HTMLUListElement.h"
#include "V8HTMLUnknownElement.h"
#include "V8HashChangeEvent.h"
#include "V8History.h"
#include "V8IDBCursor.h"
#include "V8IDBDatabase.h"
#include "V8IDBDatabaseError.h"
#include "V8IDBDatabaseException.h"
#include "V8IDBFactory.h"
#include "V8IDBIndex.h"
#include "V8IDBKeyRange.h"
#include "V8IDBObjectStore.h"
#include "V8IDBRequest.h"
#include "V8IDBTransaction.h"
#include "V8ImageData.h"
#include "V8Int16Array.h"
#include "V8Int32Array.h"
#include "V8Int8Array.h"
#include "V8IsolatedContext.h"
#include "V8KeyboardEvent.h"
#include "V8Location.h"
#include "V8MediaList.h"
#include "V8MediaQueryList.h"
#include "V8MessageChannel.h"
#include "V8MessageEvent.h"
#include "V8MessagePort.h"
#include "V8MouseEvent.h"
#include "V8MutationEvent.h"
#include "V8NamedNodeMap.h"
#include "V8Navigator.h"
#include "V8Node.h"
#include "V8NodeFilter.h"
#include "V8NodeList.h"
#include "V8Notation.h"
#include "V8NotificationCenter.h"
#include "V8OverflowEvent.h"
#include "V8PageTransitionEvent.h"
#include "V8Performance.h"
#include "V8PopStateEvent.h"
#include "V8ProcessingInstruction.h"
#include "V8ProgressEvent.h"
#include "V8Proxy.h"
#include "V8RGBColor.h"
#include "V8Range.h"
#include "V8RangeException.h"
#include "V8Rect.h"
#include "V8RequestAnimationFrameCallback.h"
#include "V8SVGAElement.h"
#include "V8SVGAltGlyphDefElement.h"
#include "V8SVGAltGlyphElement.h"
#include "V8SVGAltGlyphItemElement.h"
#include "V8SVGAngle.h"
#include "V8SVGAnimateColorElement.h"
#include "V8SVGAnimateElement.h"
#include "V8SVGAnimateMotionElement.h"
#include "V8SVGAnimateTransformElement.h"
#include "V8SVGAnimatedAngle.h"
#include "V8SVGAnimatedBoolean.h"
#include "V8SVGAnimatedEnumeration.h"
#include "V8SVGAnimatedInteger.h"
#include "V8SVGAnimatedLength.h"
#include "V8SVGAnimatedLengthList.h"
#include "V8SVGAnimatedNumber.h"
#include "V8SVGAnimatedNumberList.h"
#include "V8SVGAnimatedPreserveAspectRatio.h"
#include "V8SVGAnimatedRect.h"
#include "V8SVGAnimatedString.h"
#include "V8SVGAnimatedTransformList.h"
#include "V8SVGCircleElement.h"
#include "V8SVGClipPathElement.h"
#include "V8SVGColor.h"
#include "V8SVGComponentTransferFunctionElement.h"
#include "V8SVGCursorElement.h"
#include "V8SVGDefsElement.h"
#include "V8SVGDescElement.h"
#include "V8SVGDocument.h"
#include "V8SVGElement.h"
#include "V8SVGElementInstance.h"
#include "V8SVGElementInstanceList.h"
#include "V8SVGEllipseElement.h"
#include "V8SVGException.h"
#include "V8SVGFEBlendElement.h"
#include "V8SVGFEColorMatrixElement.h"
#include "V8SVGFEComponentTransferElement.h"
#include "V8SVGFECompositeElement.h"
#include "V8SVGFEConvolveMatrixElement.h"
#include "V8SVGFEDiffuseLightingElement.h"
#include "V8SVGFEDisplacementMapElement.h"
#include "V8SVGFEDistantLightElement.h"
#include "V8SVGFEDropShadowElement.h"
#include "V8SVGFEFloodElement.h"
#include "V8SVGFEFuncAElement.h"
#include "V8SVGFEFuncBElement.h"
#include "V8SVGFEFuncGElement.h"
#include "V8SVGFEFuncRElement.h"
#include "V8SVGFEGaussianBlurElement.h"
#include "V8SVGFEImageElement.h"
#include "V8SVGFEMergeElement.h"
#include "V8SVGFEMergeNodeElement.h"
#include "V8SVGFEMorphologyElement.h"
#include "V8SVGFEOffsetElement.h"
#include "V8SVGFEPointLightElement.h"
#include "V8SVGFESpecularLightingElement.h"
#include "V8SVGFESpotLightElement.h"
#include "V8SVGFETileElement.h"
#include "V8SVGFETurbulenceElement.h"
#include "V8SVGFilterElement.h"
#include "V8SVGFontElement.h"
#include "V8SVGFontFaceElement.h"
#include "V8SVGFontFaceFormatElement.h"
#include "V8SVGFontFaceNameElement.h"
#include "V8SVGFontFaceSrcElement.h"
#include "V8SVGFontFaceUriElement.h"
#include "V8SVGForeignObjectElement.h"
#include "V8SVGGElement.h"
#include "V8SVGGlyphElement.h"
#include "V8SVGGlyphRefElement.h"
#include "V8SVGGradientElement.h"
#include "V8SVGHKernElement.h"
#include "V8SVGImageElement.h"
#include "V8SVGLength.h"
#include "V8SVGLengthList.h"
#include "V8SVGLineElement.h"
#include "V8SVGLinearGradientElement.h"
#include "V8SVGMPathElement.h"
#include "V8SVGMarkerElement.h"
#include "V8SVGMaskElement.h"
#include "V8SVGMatrix.h"
#include "V8SVGMetadataElement.h"
#include "V8SVGMissingGlyphElement.h"
#include "V8SVGNumber.h"
#include "V8SVGNumberList.h"
#include "V8SVGPaint.h"
#include "V8SVGPathElement.h"
#include "V8SVGPathSeg.h"
#include "V8SVGPathSegArcAbs.h"
#include "V8SVGPathSegArcRel.h"
#include "V8SVGPathSegClosePath.h"
#include "V8SVGPathSegCurvetoCubicAbs.h"
#include "V8SVGPathSegCurvetoCubicRel.h"
#include "V8SVGPathSegCurvetoCubicSmoothAbs.h"
#include "V8SVGPathSegCurvetoCubicSmoothRel.h"
#include "V8SVGPathSegCurvetoQuadraticAbs.h"
#include "V8SVGPathSegCurvetoQuadraticRel.h"
#include "V8SVGPathSegCurvetoQuadraticSmoothAbs.h"
#include "V8SVGPathSegCurvetoQuadraticSmoothRel.h"
#include "V8SVGPathSegLinetoAbs.h"
#include "V8SVGPathSegLinetoHorizontalAbs.h"
#include "V8SVGPathSegLinetoHorizontalRel.h"
#include "V8SVGPathSegLinetoRel.h"
#include "V8SVGPathSegLinetoVerticalAbs.h"
#include "V8SVGPathSegLinetoVerticalRel.h"
#include "V8SVGPathSegList.h"
#include "V8SVGPathSegMovetoAbs.h"
#include "V8SVGPathSegMovetoRel.h"
#include "V8SVGPatternElement.h"
#include "V8SVGPoint.h"
#include "V8SVGPointList.h"
#include "V8SVGPolygonElement.h"
#include "V8SVGPolylineElement.h"
#include "V8SVGPreserveAspectRatio.h"
#include "V8SVGRadialGradientElement.h"
#include "V8SVGRect.h"
#include "V8SVGRectElement.h"
#include "V8SVGRenderingIntent.h"
#include "V8SVGSVGElement.h"
#include "V8SVGScriptElement.h"
#include "V8SVGSetElement.h"
#include "V8SVGStopElement.h"
#include "V8SVGStringList.h"
#include "V8SVGStyleElement.h"
#include "V8SVGSwitchElement.h"
#include "V8SVGSymbolElement.h"
#include "V8SVGTRefElement.h"
#include "V8SVGTSpanElement.h"
#include "V8SVGTextContentElement.h"
#include "V8SVGTextElement.h"
#include "V8SVGTextPathElement.h"
#include "V8SVGTextPositioningElement.h"
#include "V8SVGTitleElement.h"
#include "V8SVGTransform.h"
#include "V8SVGTransformList.h"
#include "V8SVGUnitTypes.h"
#include "V8SVGUseElement.h"
#include "V8SVGVKernElement.h"
#include "V8SVGViewElement.h"
#include "V8Screen.h"
#include "V8SharedWorker.h"
#include "V8Storage.h"
#include "V8StorageInfo.h"
#include "V8StyleMedia.h"
#include "V8StyleSheet.h"
#include "V8StyleSheetList.h"
#include "V8Text.h"
#include "V8TextEvent.h"
#include "V8TextMetrics.h"
#include "V8UIEvent.h"
#include "V8Uint16Array.h"
#include "V8Uint32Array.h"
#include "V8Uint8Array.h"
#include "V8WebKitAnimationEvent.h"
#include "V8WebKitCSSKeyframeRule.h"
#include "V8WebKitCSSKeyframesRule.h"
#include "V8WebKitCSSMatrix.h"
#include "V8WebKitCSSTransformValue.h"
#include "V8WebKitFlags.h"
#include "V8WebKitPoint.h"
#include "V8WebKitTransitionEvent.h"
#include "V8WebSocket.h"
#include "V8WheelEvent.h"
#include "V8WindowErrorHandler.h"
#include "V8Worker.h"
#include "V8XMLHttpRequest.h"
#include "V8XMLHttpRequestException.h"
#include "V8XMLHttpRequestProgressEvent.h"
#include "V8XMLHttpRequestUpload.h"
#include "V8XMLSerializer.h"
#include "V8XPathEvaluator.h"
#include "V8XPathException.h"
#include "V8XPathResult.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

#if ENABLE(BLOB)
#include "V8FileReader.h"
#include "V8WebKitBlobBuilder.h"
#endif

#if ENABLE(BLOB) || ENABLE(FILE_SYSTEM)
#include "V8FileError.h"
#endif

#if ENABLE(DEVICE_ORIENTATION)
#include "V8DeviceMotionEvent.h"
#include "V8DeviceOrientationEvent.h"
#endif

#if ENABLE(DOM_STORAGE)
#include "V8StorageEvent.h"
#endif

#if ENABLE(INPUT_SPEECH)
#include "V8SpeechInputEvent.h"
#endif

#if ENABLE(MEDIA_STREAM)
#include "V8MediaStreamEvent.h"
#include "V8PeerConnection.h"
#endif

#if ENABLE(SQL_DATABASE)
#include "V8SQLException.h"
#endif

#if ENABLE(SVG)
#include "V8SVGZoomEvent.h"
#endif

#if ENABLE(TOUCH_EVENTS)
#include "V8TouchEvent.h"
#endif

#if ENABLE(VIDEO)
#include "V8HTMLAudioElement.h"
#include "V8HTMLMediaElement.h"
#include "V8HTMLSourceElement.h"
#include "V8HTMLVideoElement.h"
#include "V8MediaError.h"
#include "V8TimeRanges.h"
#endif

#if ENABLE(WEBGL)
#include "V8WebGLActiveInfo.h"
#include "V8WebGLBuffer.h"
#include "V8WebGLContextEvent.h"
#include "V8WebGLFramebuffer.h"
#include "V8WebGLProgram.h"
#include "V8WebGLRenderbuffer.h"
#include "V8WebGLRenderingContext.h"
#include "V8WebGLShader.h"
#include "V8WebGLTexture.h"
#include "V8WebGLUniformLocation.h"
#endif

#if ENABLE(WEB_AUDIO)
#include "V8AudioContext.h"
#include "V8AudioPannerNode.h"
#include "V8AudioProcessingEvent.h"
#include "V8OfflineAudioCompletionEvent.h"
#endif

#if ENABLE(WEB_SOCKETS)
#include "V8CloseEvent.h"
#endif

#if ENABLE(XSLT)
#include "V8XSLTProcessor.h"
#endif

namespace WebCore {

WrapperTypeInfo V8DOMWindow::info = { V8DOMWindow::GetTemplate, V8DOMWindow::derefObject, 0, 0 };

namespace DOMWindowInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> screenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.screen._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<Screen> result = imp->screen();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "screen", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> historyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.history._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<History> result = imp->history();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "history", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> locationbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.locationbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<BarInfo> result = imp->locationbar();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "locationbar", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> menubarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.menubar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<BarInfo> result = imp->menubar();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "menubar", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> personalbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.personalbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<BarInfo> result = imp->personalbar();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "personalbar", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> scrollbarsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.scrollbars._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<BarInfo> result = imp->scrollbars();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "scrollbars", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> statusbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.statusbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<BarInfo> result = imp->statusbar();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "statusbar", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> toolbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.toolbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<BarInfo> result = imp->toolbar();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "toolbar", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> navigatorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.navigator._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<Navigator> result = imp->navigator();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "navigator", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> clientInformationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.clientInformation._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<Navigator> result = imp->clientInformation();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "clientInformation", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> cryptoAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.crypto._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<Crypto> result = imp->crypto();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "crypto", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> locationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.location._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    return toV8(imp->location());
}

static v8::Handle<v8::Value> frameElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.frameElement._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    if (!V8BindingSecurity::checkNodeSecurity(V8BindingState::Only(), imp->frameElement()))
    return v8::Handle<v8::Value>();

    return toV8(imp->frameElement());
}

static v8::Handle<v8::Value> offscreenBufferingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.offscreenBuffering._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8Boolean(imp->offscreenBuffering());
}

static v8::Handle<v8::Value> outerHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.outerHeight._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->outerHeight());
}

static v8::Handle<v8::Value> outerWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.outerWidth._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->outerWidth());
}

static v8::Handle<v8::Value> innerHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.innerHeight._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->innerHeight());
}

static v8::Handle<v8::Value> innerWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.innerWidth._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->innerWidth());
}

static v8::Handle<v8::Value> screenXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.screenX._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenX());
}

static v8::Handle<v8::Value> screenYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.screenY._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenY());
}

static v8::Handle<v8::Value> screenLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.screenLeft._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenLeft());
}

static v8::Handle<v8::Value> screenTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.screenTop._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenTop());
}

static v8::Handle<v8::Value> scrollXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.scrollX._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->scrollX());
}

static v8::Handle<v8::Value> scrollYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.scrollY._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->scrollY());
}

static v8::Handle<v8::Value> pageXOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.pageXOffset._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->pageXOffset());
}

static v8::Handle<v8::Value> pageYOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.pageYOffset._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->pageYOffset());
}

static v8::Handle<v8::Value> closedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.closed._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8Boolean(imp->closed());
}

static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.length._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->length());
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.name._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->name());
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.name._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setName(v);
    return;
}

static v8::Handle<v8::Value> statusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.status._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->status());
}

static void statusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.status._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setStatus(v);
    return;
}

static v8::Handle<v8::Value> defaultStatusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.defaultStatus._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->defaultStatus());
}

static void defaultStatusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.defaultStatus._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setDefaultStatus(v);
    return;
}

static v8::Handle<v8::Value> defaultstatusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.defaultstatus._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->defaultstatus());
}

static void defaultstatusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.defaultstatus._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<>, v, value);
    imp->setDefaultstatus(v);
    return;
}

static v8::Handle<v8::Value> selfAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.self._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->self());
}

static v8::Handle<v8::Value> windowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.window._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    return toV8(imp->window());
}

static v8::Handle<v8::Value> framesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.frames._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->frames());
}

static v8::Handle<v8::Value> openerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.opener._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->opener());
}

static v8::Handle<v8::Value> parentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.parent._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->parent());
}

static v8::Handle<v8::Value> topAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.top._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    return toV8(imp->top());
}

static v8::Handle<v8::Value> documentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.document._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->document());
}

static v8::Handle<v8::Value> styleMediaAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.styleMedia._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<StyleMedia> result = imp->styleMedia();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "styleMedia", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> devicePixelRatioAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.devicePixelRatio._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Number::New(imp->devicePixelRatio());
}

static v8::Handle<v8::Value> applicationCacheAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.applicationCache._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<DOMApplicationCache> result = imp->applicationCache();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "applicationCache", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> sessionStorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.sessionStorage._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    ExceptionCode ec = 0;
    RefPtr<Storage> v = imp->sessionStorage(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    RefPtr<Storage> result = imp->sessionStorage(ec);
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "sessionStorage", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> localStorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.localStorage._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    ExceptionCode ec = 0;
    RefPtr<Storage> v = imp->localStorage(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    RefPtr<Storage> result = imp->localStorage(ec);
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "localStorage", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> webkitNotificationsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.webkitNotifications._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<NotificationCenter> result = imp->webkitNotifications();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "webkitNotifications", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> webkitIndexedDBAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.webkitIndexedDB._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<IDBFactory> result = imp->webkitIndexedDB();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "webkitIndexedDB", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> consoleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.console._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<Console> result = imp->console();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "console", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> performanceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.performance._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<Performance> result = imp->performance();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "performance", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onabort._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onabort._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforeunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onbeforeunload._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onbeforeunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforeunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforeunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onbeforeunload._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onbeforeunload(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnbeforeunload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onblur._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onblur._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onblur(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncanplayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oncanplay._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->oncanplay() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncanplay())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncanplayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oncanplay._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->oncanplay(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOncanplay(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncanplaythroughAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oncanplaythrough._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->oncanplaythrough() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncanplaythrough())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncanplaythroughAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oncanplaythrough._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->oncanplaythrough(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOncanplaythrough(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onchange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onchange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onchange(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onclick._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onclick._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onclick(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oncontextmenu._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oncontextmenu._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->oncontextmenu(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondblclick._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondblclick._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondblclick(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndblclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondrag._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondrag._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondrag(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndrag(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondragend(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndragend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragenter._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragenter._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondragenter(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndragenter(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragleave._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragleave._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondragleave(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndragleave(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragover._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragover._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondragover(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndragover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondragstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondragstart(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndragstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondrop._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondrop._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondrop(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndrop(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondurationchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondurationchange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondurationchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondurationchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondurationchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondurationchange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondurationchange(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndurationchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onemptiedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onemptied._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onemptied() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onemptied())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onemptiedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onemptied._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onemptied(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnemptied(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onendedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onended._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onended() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onended())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onendedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onended._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onended(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnended(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onerror._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onerror._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnerror(V8EventListenerList::findOrCreateWrapper<V8WindowErrorHandler>(value, true));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onfocus._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onfocus._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onfocus(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onhashchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onhashchange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onhashchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onhashchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onhashchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onhashchange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onhashchange(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnhashchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oninput._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oninput._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->oninput(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOninput(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oninvalid._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.oninvalid._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->oninvalid(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOninvalid(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onkeydown._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onkeydown._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onkeydown(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnkeydown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onkeypress._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onkeypress._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onkeypress(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnkeypress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onkeyup._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onkeyup._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onkeyup(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnkeyup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onload._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onload._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadeddataAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onloadeddata._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onloadeddata() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadeddata())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadeddataAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onloadeddata._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onloadeddata(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnloadeddata(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadedmetadataAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onloadedmetadata._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onloadedmetadata() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadedmetadata())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadedmetadataAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onloadedmetadata._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onloadedmetadata(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnloadedmetadata(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onloadstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onloadstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onloadstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onloadstart(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnloadstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmessage._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmessage._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmousedown._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmousedown._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onmousedown(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnmousedown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmousemove._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmousemove._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onmousemove(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnmousemove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmouseout._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmouseout._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onmouseout(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnmouseout(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmouseover._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmouseover._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onmouseover(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnmouseover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmouseup._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmouseup._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onmouseup(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnmouseup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmousewheel._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onmousewheel._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onmousewheel(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onofflineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onoffline._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onoffline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onoffline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onofflineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onoffline._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onoffline(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnoffline(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ononlineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ononline._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ononline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ononline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ononlineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ononline._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ononline(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnonline(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpagehideAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpagehide._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onpagehide() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpagehide())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onpagehideAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpagehide._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onpagehide(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnpagehide(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpageshowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpageshow._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onpageshow() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpageshow())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onpageshowAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpageshow._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onpageshow(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnpageshow(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpauseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpause._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onpause() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpause())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onpauseAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpause._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onpause(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnpause(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onplayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onplay._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onplay() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onplay())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onplayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onplay._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onplay(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnplay(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onplayingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onplaying._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onplaying() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onplaying())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onplayingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onplaying._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onplaying(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnplaying(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpopstateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpopstate._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onpopstate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpopstate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onpopstateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onpopstate._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onpopstate(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnpopstate(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onprogress._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onprogress._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onratechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onratechange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onratechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onratechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onratechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onratechange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onratechange(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnratechange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onresize._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onresize() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onresize())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onresizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onresize._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onresize(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnresize(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onscroll._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onscroll._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onscroll(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnscroll(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onseekedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onseeked._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onseeked() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onseeked())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onseekedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onseeked._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onseeked(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnseeked(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onseekingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onseeking._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onseeking() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onseeking())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onseekingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onseeking._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onseeking(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnseeking(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onselect._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onselect._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onselect(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnselect(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onstalledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onstalled._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onstalled() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstalled())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onstalledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onstalled._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onstalled(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnstalled(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onstorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onstorage._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onstorage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstorage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onstorageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onstorage._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onstorage(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnstorage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onsubmit._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onsubmit._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onsubmit(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnsubmit(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsuspendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onsuspend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onsuspend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsuspend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onsuspendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onsuspend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onsuspend(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnsuspend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ontimeupdateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontimeupdate._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ontimeupdate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontimeupdate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ontimeupdateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontimeupdate._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ontimeupdate(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOntimeupdate(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onunload._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onunload._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onunload(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnunload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onvolumechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onvolumechange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onvolumechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onvolumechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onvolumechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onvolumechange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onvolumechange(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnvolumechange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwaitingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwaiting._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onwaiting() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwaiting())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwaitingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwaiting._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onwaiting(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnwaiting(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onreset._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onreset._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onreset(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnreset(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onsearch._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onsearch._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onsearch(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnsearch(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwebkitanimationendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkitanimationend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onwebkitanimationend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitanimationend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwebkitanimationendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkitanimationend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onwebkitanimationend(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnwebkitanimationend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwebkitanimationiterationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkitanimationiteration._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onwebkitanimationiteration() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitanimationiteration())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwebkitanimationiterationAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkitanimationiteration._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onwebkitanimationiteration(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnwebkitanimationiteration(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwebkitanimationstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkitanimationstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onwebkitanimationstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitanimationstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwebkitanimationstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkitanimationstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onwebkitanimationstart(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnwebkitanimationstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwebkittransitionendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkittransitionend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->onwebkittransitionend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkittransitionend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onwebkittransitionendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.onwebkittransitionend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->onwebkittransitionend(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOnwebkittransitionend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ontouchstart(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOntouchstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchmove._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchmove._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ontouchmove(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOntouchmove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ontouchend(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOntouchend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchcancel._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ontouchcancel._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ontouchcancel(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(DEVICE_ORIENTATION)

static v8::Handle<v8::Value> ondevicemotionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondevicemotion._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondevicemotion() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondevicemotion())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(DEVICE_ORIENTATION)

#if ENABLE(DEVICE_ORIENTATION)

static void ondevicemotionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondevicemotion._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondevicemotion(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndevicemotion(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(DEVICE_ORIENTATION)

#if ENABLE(DEVICE_ORIENTATION)

static v8::Handle<v8::Value> ondeviceorientationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondeviceorientation._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return v8::Handle<v8::Value>();
    return imp->ondeviceorientation() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondeviceorientation())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(DEVICE_ORIENTATION)

#if ENABLE(DEVICE_ORIENTATION)

static void ondeviceorientationAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.ondeviceorientation._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
        return;
    transferHiddenDependency(info.Holder(), imp->ondeviceorientation(), value, V8DOMWindow::eventListenerCacheIndex);
    imp->setOndeviceorientation(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(DEVICE_ORIENTATION)

#if ENABLE(BLOB)

static v8::Handle<v8::Value> webkitURLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.webkitURL._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<DOMURL> result = imp->webkitURL();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "webkitURL", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(BLOB)

static v8::Handle<v8::Value> webkitStorageInfoAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.webkitStorageInfo._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    RefPtr<StorageInfo> result = imp->webkitStorageInfo();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenWindowReference(imp->frame(), "webkitStorageInfo", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> DOMWindowConstructorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.constructors._get");
    v8::Handle<v8::Value> data = info.Data();
    ASSERT(data->IsExternal() || data->IsNumber());
    WrapperTypeInfo* type = WrapperTypeInfo::unwrap(data);
    // Get the proxy corresponding to the DOMWindow if possible to
    // make sure that the constructor function is constructed in the
    // context of the DOMWindow and not in the context of the caller.
    return V8DOMWrapper::getConstructor(type, V8DOMWindow::toNative(info.Holder()));
}

static v8::Handle<v8::Value> getSelectionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.getSelection");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    return toV8(imp->getSelection());
}

static v8::Handle<v8::Value> focusCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.focus");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    imp->focus();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> focusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.focus._get");
    static v8::Persistent<v8::FunctionTemplate> privateTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::focusCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
        // can only reach here by 'object.__proto__.func', and it should passed
        // domain security check already
        return privateTemplate->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
        static v8::Persistent<v8::FunctionTemplate> sharedTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::focusCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
        return sharedTemplate->GetFunction();
    }
    return privateTemplate->GetFunction();
}

static v8::Handle<v8::Value> blurCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.blur");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    imp->blur();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> blurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.blur._get");
    static v8::Persistent<v8::FunctionTemplate> privateTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::blurCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
        // can only reach here by 'object.__proto__.func', and it should passed
        // domain security check already
        return privateTemplate->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
        static v8::Persistent<v8::FunctionTemplate> sharedTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::blurCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
        return sharedTemplate->GetFunction();
    }
    return privateTemplate->GetFunction();
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.close");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    imp->close(scriptContext);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> closeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.close._get");
    static v8::Persistent<v8::FunctionTemplate> privateTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::closeCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
        // can only reach here by 'object.__proto__.func', and it should passed
        // domain security check already
        return privateTemplate->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
        static v8::Persistent<v8::FunctionTemplate> sharedTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::closeCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
        return sharedTemplate->GetFunction();
    }
    return privateTemplate->GetFunction();
}

static v8::Handle<v8::Value> printCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.print");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    imp->print();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> stopCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.stop");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    imp->stop();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> alertCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.alert");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, message, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->alert(message);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> confirmCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.confirm");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, message, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->confirm(message));
}

static v8::Handle<v8::Value> promptCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.prompt");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, message, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, defaultValue, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return v8StringOrNull(imp->prompt(message, defaultValue));
}

static v8::Handle<v8::Value> findCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.find");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, string, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    EXCEPTION_BLOCK(bool, caseSensitive, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    EXCEPTION_BLOCK(bool, backwards, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)->BooleanValue());
    EXCEPTION_BLOCK(bool, wrap, MAYBE_MISSING_PARAMETER(args, 3, MissingIsUndefined)->BooleanValue());
    EXCEPTION_BLOCK(bool, wholeWord, MAYBE_MISSING_PARAMETER(args, 4, MissingIsUndefined)->BooleanValue());
    EXCEPTION_BLOCK(bool, searchInFrames, MAYBE_MISSING_PARAMETER(args, 5, MissingIsUndefined)->BooleanValue());
    EXCEPTION_BLOCK(bool, showDialog, MAYBE_MISSING_PARAMETER(args, 6, MissingIsUndefined)->BooleanValue());
    return v8Boolean(imp->find(string, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog));
}

static v8::Handle<v8::Value> scrollByCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.scrollBy");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    imp->scrollBy(x, y);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> scrollToCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.scrollTo");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    imp->scrollTo(x, y);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> scrollCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.scroll");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    imp->scroll(x, y);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> moveByCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.moveBy");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    imp->moveBy(x, y);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> moveToCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.moveTo");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    imp->moveTo(x, y);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> resizeByCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.resizeBy");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    imp->resizeBy(x, y);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> resizeToCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.resizeTo");
    if (args.Length() < 2)
        return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->NumberValue()));
    EXCEPTION_BLOCK(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    imp->resizeTo(width, height);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> matchMediaCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.matchMedia");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, query, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->matchMedia(query));
}

static v8::Handle<v8::Value> getComputedStyleCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.getComputedStyle");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, pseudoElement, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return toV8(imp->getComputedStyle(element, pseudoElement));
}

static v8::Handle<v8::Value> getMatchedCSSRulesCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.getMatchedCSSRules");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, pseudoElement, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return toV8(imp->getMatchedCSSRules(element, pseudoElement));
}

static v8::Handle<v8::Value> webkitConvertPointFromPageToNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.webkitConvertPointFromPageToNode");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(WebKitPoint*, p, V8WebKitPoint::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8WebKitPoint::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    return toV8(imp->webkitConvertPointFromPageToNode(node, p));
}

static v8::Handle<v8::Value> webkitConvertPointFromNodeToPageCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.webkitConvertPointFromNodeToPage");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(WebKitPoint*, p, V8WebKitPoint::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8WebKitPoint::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    return toV8(imp->webkitConvertPointFromNodeToPage(node, p));
}

static v8::Handle<v8::Value> openDatabaseCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.openDatabase");
    if (args.Length() < 4)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, version, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, displayName, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined));
    EXCEPTION_BLOCK(unsigned, estimatedSize, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, MissingIsUndefined)));
    RefPtr<DatabaseCallback> creationCallback;
    if (args.Length() > 4 && !args[4]->IsNull() && !args[4]->IsUndefined()) {
        if (!args[4]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        creationCallback = V8DatabaseCallback::create(args[4], getScriptExecutionContext());
    }
    RefPtr<Database> result = imp->openDatabase(name, version, displayName, estimatedSize, creationCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitRequestFileSystemCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.webkitRequestFileSystem");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(int, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    EXCEPTION_BLOCK(long long, size, toInt64(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    RefPtr<FileSystemCallback> successCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        successCallback = V8FileSystemCallback::create(args[2], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 3 && !args[3]->IsNull() && !args[3]->IsUndefined()) {
        if (!args[3]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8ErrorCallback::create(args[3], getScriptExecutionContext());
    }
    imp->webkitRequestFileSystem(type, size, successCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitResolveLocalFileSystemURLCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.webkitResolveLocalFileSystemURL");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, url, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<EntryCallback> successCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        successCallback = V8EntryCallback::create(args[1], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8ErrorCallback::create(args[2], getScriptExecutionContext());
    }
    imp->webkitResolveLocalFileSystemURL(url, successCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> postMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.postMessage._get");
    static v8::Persistent<v8::FunctionTemplate> privateTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::postMessageCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
        // can only reach here by 'object.__proto__.func', and it should passed
        // domain security check already
        return privateTemplate->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
        static v8::Persistent<v8::FunctionTemplate> sharedTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::postMessageCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
        return sharedTemplate->GetFunction();
    }
    return privateTemplate->GetFunction();
}

static v8::Handle<v8::Value> webkitPostMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.webkitPostMessage._get");
    static v8::Persistent<v8::FunctionTemplate> privateTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::webkitPostMessageCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
        // can only reach here by 'object.__proto__.func', and it should passed
        // domain security check already
        return privateTemplate->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
        static v8::Persistent<v8::FunctionTemplate> sharedTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::webkitPostMessageCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
        return sharedTemplate->GetFunction();
    }
    return privateTemplate->GetFunction();
}

static v8::Handle<v8::Value> clearTimeoutCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.clearTimeout");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(int, handle, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->clearTimeout(handle);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> clearIntervalCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.clearInterval");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(int, handle, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->clearInterval(handle);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitRequestAnimationFrameCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.webkitRequestAnimationFrame");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    if (args.Length() <= 0 || !args[0]->IsObject())
        return throwError(TYPE_MISMATCH_ERR);
    RefPtr<RequestAnimationFrameCallback> callback = V8RequestAnimationFrameCallback::create(args[0], getScriptExecutionContext());
    EXCEPTION_BLOCK(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined))) : 0);
    return v8::Integer::New(imp->webkitRequestAnimationFrame(callback, element));
}

static v8::Handle<v8::Value> webkitCancelRequestAnimationFrameCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.webkitCancelRequestAnimationFrame");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    EXCEPTION_BLOCK(int, id, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->webkitCancelRequestAnimationFrame(id);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> atobCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.atob");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, string, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    String result = imp->atob(string, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> btoaCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.btoa");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, string, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    String result = imp->btoa(string, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DOMWindow.dispatchEvent");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true))
        return v8::Handle<v8::Value>();
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> toStringAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DOMWindow.toString._get");
    static v8::Persistent<v8::FunctionTemplate> privateTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::toStringCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
        // can only reach here by 'object.__proto__.func', and it should passed
        // domain security check already
        return privateTemplate->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
        static v8::Persistent<v8::FunctionTemplate> sharedTemplate = v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::toStringCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));
        return sharedTemplate->GetFunction();
    }
    return privateTemplate->GetFunction();
}

} // namespace DOMWindowInternal

static const BatchedAttribute shadowAttrs[] = {
    // Attribute 'location' (Type: 'attribute' ExtAttr: 'V8DisallowShadowing DoNotCheckDomainSecurity CPPCustom V8CustomSetter JSCCustom')
    {"location", DOMWindowInternal::locationAttrGetter, V8DOMWindow::locationAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::ALL_CAN_WRITE | v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::None | v8::DontDelete), 0 /* on instance */},
    // Attribute 'window' (Type: 'readonly attribute' ExtAttr: 'V8DisallowShadowing DoNotCheckDomainSecurity')
    {"window", DOMWindowInternal::windowAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::None | v8::DontDelete), 0 /* on instance */},
    // Attribute 'top' (Type: 'attribute' ExtAttr: 'V8DisallowShadowing DoNotCheckDomainSecurityOnGet Replaceable V8ReadOnly')
    {"top", DOMWindowInternal::topAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::None | v8::DontDelete), 0 /* on instance */},
};

static const BatchedAttribute DOMWindowAttrs[] = {
    // Attribute 'screen' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"screen", DOMWindowInternal::screenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'history' (Type: 'attribute' ExtAttr: 'JSCCustomGetter DoNotCheckDomainSecurityOnGet Replaceable')
    {"history", DOMWindowInternal::historyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'locationbar' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"locationbar", DOMWindowInternal::locationbarAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'menubar' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"menubar", DOMWindowInternal::menubarAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'personalbar' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"personalbar", DOMWindowInternal::personalbarAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'scrollbars' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"scrollbars", DOMWindowInternal::scrollbarsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'statusbar' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"statusbar", DOMWindowInternal::statusbarAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'toolbar' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"toolbar", DOMWindowInternal::toolbarAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'navigator' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"navigator", DOMWindowInternal::navigatorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'clientInformation' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"clientInformation", DOMWindowInternal::clientInformationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'crypto' (Type: 'readonly attribute' ExtAttr: '')
    {"crypto", DOMWindowInternal::cryptoAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'event' (Type: 'attribute' ExtAttr: 'Replaceable CustomGetter V8CustomSetter')
    {"event", V8DOMWindow::eventAccessorGetter, V8DOMWindow::eventAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'frameElement' (Type: 'readonly attribute' ExtAttr: 'CheckNodeSecurity')
    {"frameElement", DOMWindowInternal::frameElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offscreenBuffering' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"offscreenBuffering", DOMWindowInternal::offscreenBufferingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'outerHeight' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"outerHeight", DOMWindowInternal::outerHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'outerWidth' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"outerWidth", DOMWindowInternal::outerWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'innerHeight' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"innerHeight", DOMWindowInternal::innerHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'innerWidth' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"innerWidth", DOMWindowInternal::innerWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'screenX' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"screenX", DOMWindowInternal::screenXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'screenY' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"screenY", DOMWindowInternal::screenYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'screenLeft' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"screenLeft", DOMWindowInternal::screenLeftAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'screenTop' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"screenTop", DOMWindowInternal::screenTopAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'scrollX' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"scrollX", DOMWindowInternal::scrollXAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'scrollY' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"scrollY", DOMWindowInternal::scrollYAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'pageXOffset' (Type: 'readonly attribute' ExtAttr: '')
    {"pageXOffset", DOMWindowInternal::pageXOffsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pageYOffset' (Type: 'readonly attribute' ExtAttr: '')
    {"pageYOffset", DOMWindowInternal::pageYOffsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'closed' (Type: 'readonly attribute' ExtAttr: 'DoNotCheckDomainSecurity')
    {"closed", DOMWindowInternal::closedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'length' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
    {"length", DOMWindowInternal::lengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: '')
    {"name", DOMWindowInternal::nameAttrGetter, DOMWindowInternal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'status' (Type: 'attribute' ExtAttr: '')
    {"status", DOMWindowInternal::statusAttrGetter, DOMWindowInternal::statusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultStatus' (Type: 'attribute' ExtAttr: '')
    {"defaultStatus", DOMWindowInternal::defaultStatusAttrGetter, DOMWindowInternal::defaultStatusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultstatus' (Type: 'attribute' ExtAttr: '')
    {"defaultstatus", DOMWindowInternal::defaultstatusAttrGetter, DOMWindowInternal::defaultstatusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'self' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
    {"self", DOMWindowInternal::selfAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'frames' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
    {"frames", DOMWindowInternal::framesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'opener' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable V8CustomSetter')
    {"opener", DOMWindowInternal::openerAttrGetter, V8DOMWindow::openerAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'parent' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
    {"parent", DOMWindowInternal::parentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'document' (Type: 'readonly attribute' ExtAttr: '')
    {"document", DOMWindowInternal::documentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'styleMedia' (Type: 'readonly attribute' ExtAttr: '')
    {"styleMedia", DOMWindowInternal::styleMediaAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'devicePixelRatio' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"devicePixelRatio", DOMWindowInternal::devicePixelRatioAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'console' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"console", DOMWindowInternal::consoleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'performance' (Type: 'attribute' ExtAttr: 'Replaceable')
    {"performance", DOMWindowInternal::performanceAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::ReadOnly), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onabort", DOMWindowInternal::onabortAttrGetter, DOMWindowInternal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onbeforeunload' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onbeforeunload", DOMWindowInternal::onbeforeunloadAttrGetter, DOMWindowInternal::onbeforeunloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onblur", DOMWindowInternal::onblurAttrGetter, DOMWindowInternal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'oncanplay' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"oncanplay", DOMWindowInternal::oncanplayAttrGetter, DOMWindowInternal::oncanplayAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'oncanplaythrough' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"oncanplaythrough", DOMWindowInternal::oncanplaythroughAttrGetter, DOMWindowInternal::oncanplaythroughAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onchange", DOMWindowInternal::onchangeAttrGetter, DOMWindowInternal::onchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onclick", DOMWindowInternal::onclickAttrGetter, DOMWindowInternal::onclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"oncontextmenu", DOMWindowInternal::oncontextmenuAttrGetter, DOMWindowInternal::oncontextmenuAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondblclick", DOMWindowInternal::ondblclickAttrGetter, DOMWindowInternal::ondblclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondrag", DOMWindowInternal::ondragAttrGetter, DOMWindowInternal::ondragAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondragend", DOMWindowInternal::ondragendAttrGetter, DOMWindowInternal::ondragendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondragenter", DOMWindowInternal::ondragenterAttrGetter, DOMWindowInternal::ondragenterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondragleave", DOMWindowInternal::ondragleaveAttrGetter, DOMWindowInternal::ondragleaveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondragover", DOMWindowInternal::ondragoverAttrGetter, DOMWindowInternal::ondragoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondragstart", DOMWindowInternal::ondragstartAttrGetter, DOMWindowInternal::ondragstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondrop", DOMWindowInternal::ondropAttrGetter, DOMWindowInternal::ondropAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ondurationchange' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ondurationchange", DOMWindowInternal::ondurationchangeAttrGetter, DOMWindowInternal::ondurationchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onemptied' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onemptied", DOMWindowInternal::onemptiedAttrGetter, DOMWindowInternal::onemptiedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onended' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onended", DOMWindowInternal::onendedAttrGetter, DOMWindowInternal::onendedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onerror", DOMWindowInternal::onerrorAttrGetter, DOMWindowInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onfocus", DOMWindowInternal::onfocusAttrGetter, DOMWindowInternal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onhashchange' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onhashchange", DOMWindowInternal::onhashchangeAttrGetter, DOMWindowInternal::onhashchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"oninput", DOMWindowInternal::oninputAttrGetter, DOMWindowInternal::oninputAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"oninvalid", DOMWindowInternal::oninvalidAttrGetter, DOMWindowInternal::oninvalidAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onkeydown", DOMWindowInternal::onkeydownAttrGetter, DOMWindowInternal::onkeydownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onkeypress", DOMWindowInternal::onkeypressAttrGetter, DOMWindowInternal::onkeypressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onkeyup", DOMWindowInternal::onkeyupAttrGetter, DOMWindowInternal::onkeyupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onload", DOMWindowInternal::onloadAttrGetter, DOMWindowInternal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onloadeddata' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onloadeddata", DOMWindowInternal::onloadeddataAttrGetter, DOMWindowInternal::onloadeddataAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onloadedmetadata' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onloadedmetadata", DOMWindowInternal::onloadedmetadataAttrGetter, DOMWindowInternal::onloadedmetadataAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onloadstart' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onloadstart", DOMWindowInternal::onloadstartAttrGetter, DOMWindowInternal::onloadstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onmessage' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onmessage", DOMWindowInternal::onmessageAttrGetter, DOMWindowInternal::onmessageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onmousedown", DOMWindowInternal::onmousedownAttrGetter, DOMWindowInternal::onmousedownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onmousemove", DOMWindowInternal::onmousemoveAttrGetter, DOMWindowInternal::onmousemoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onmouseout", DOMWindowInternal::onmouseoutAttrGetter, DOMWindowInternal::onmouseoutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onmouseover", DOMWindowInternal::onmouseoverAttrGetter, DOMWindowInternal::onmouseoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onmouseup", DOMWindowInternal::onmouseupAttrGetter, DOMWindowInternal::onmouseupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onmousewheel", DOMWindowInternal::onmousewheelAttrGetter, DOMWindowInternal::onmousewheelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onoffline' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onoffline", DOMWindowInternal::onofflineAttrGetter, DOMWindowInternal::onofflineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ononline' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ononline", DOMWindowInternal::ononlineAttrGetter, DOMWindowInternal::ononlineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onpagehide' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onpagehide", DOMWindowInternal::onpagehideAttrGetter, DOMWindowInternal::onpagehideAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onpageshow' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onpageshow", DOMWindowInternal::onpageshowAttrGetter, DOMWindowInternal::onpageshowAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onpause' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onpause", DOMWindowInternal::onpauseAttrGetter, DOMWindowInternal::onpauseAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onplay' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onplay", DOMWindowInternal::onplayAttrGetter, DOMWindowInternal::onplayAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onplaying' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onplaying", DOMWindowInternal::onplayingAttrGetter, DOMWindowInternal::onplayingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onpopstate' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onpopstate", DOMWindowInternal::onpopstateAttrGetter, DOMWindowInternal::onpopstateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onprogress' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onprogress", DOMWindowInternal::onprogressAttrGetter, DOMWindowInternal::onprogressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onratechange' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onratechange", DOMWindowInternal::onratechangeAttrGetter, DOMWindowInternal::onratechangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onresize' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onresize", DOMWindowInternal::onresizeAttrGetter, DOMWindowInternal::onresizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onscroll", DOMWindowInternal::onscrollAttrGetter, DOMWindowInternal::onscrollAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onseeked' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onseeked", DOMWindowInternal::onseekedAttrGetter, DOMWindowInternal::onseekedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onseeking' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onseeking", DOMWindowInternal::onseekingAttrGetter, DOMWindowInternal::onseekingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onselect", DOMWindowInternal::onselectAttrGetter, DOMWindowInternal::onselectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onstalled' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onstalled", DOMWindowInternal::onstalledAttrGetter, DOMWindowInternal::onstalledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onstorage' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onstorage", DOMWindowInternal::onstorageAttrGetter, DOMWindowInternal::onstorageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onsubmit", DOMWindowInternal::onsubmitAttrGetter, DOMWindowInternal::onsubmitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onsuspend' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onsuspend", DOMWindowInternal::onsuspendAttrGetter, DOMWindowInternal::onsuspendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'ontimeupdate' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"ontimeupdate", DOMWindowInternal::ontimeupdateAttrGetter, DOMWindowInternal::ontimeupdateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onunload' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onunload", DOMWindowInternal::onunloadAttrGetter, DOMWindowInternal::onunloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onvolumechange' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onvolumechange", DOMWindowInternal::onvolumechangeAttrGetter, DOMWindowInternal::onvolumechangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onwaiting' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onwaiting", DOMWindowInternal::onwaitingAttrGetter, DOMWindowInternal::onwaitingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onreset", DOMWindowInternal::onresetAttrGetter, DOMWindowInternal::onresetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onsearch", DOMWindowInternal::onsearchAttrGetter, DOMWindowInternal::onsearchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onwebkitanimationend' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onwebkitanimationend", DOMWindowInternal::onwebkitanimationendAttrGetter, DOMWindowInternal::onwebkitanimationendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onwebkitanimationiteration' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onwebkitanimationiteration", DOMWindowInternal::onwebkitanimationiterationAttrGetter, DOMWindowInternal::onwebkitanimationiterationAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onwebkitanimationstart' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onwebkitanimationstart", DOMWindowInternal::onwebkitanimationstartAttrGetter, DOMWindowInternal::onwebkitanimationstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'onwebkittransitionend' (Type: 'attribute' ExtAttr: 'v8OnProto')
    {"onwebkittransitionend", DOMWindowInternal::onwebkittransitionendAttrGetter, DOMWindowInternal::onwebkittransitionendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */},
    // Attribute 'StyleSheet' (Type: 'attribute' ExtAttr: '')
    {"StyleSheet", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8StyleSheet::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSStyleSheet' (Type: 'attribute' ExtAttr: '')
    {"CSSStyleSheet", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSStyleSheet::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSValue' (Type: 'attribute' ExtAttr: '')
    {"CSSValue", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSValue::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSPrimitiveValue' (Type: 'attribute' ExtAttr: '')
    {"CSSPrimitiveValue", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSPrimitiveValue::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSValueList' (Type: 'attribute' ExtAttr: '')
    {"CSSValueList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSValueList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WebKitCSSTransformValue' (Type: 'attribute' ExtAttr: '')
    {"WebKitCSSTransformValue", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitCSSTransformValue::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSRule' (Type: 'attribute' ExtAttr: '')
    {"CSSRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSCharsetRule' (Type: 'attribute' ExtAttr: '')
    {"CSSCharsetRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSCharsetRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSFontFaceRule' (Type: 'attribute' ExtAttr: '')
    {"CSSFontFaceRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSFontFaceRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSImportRule' (Type: 'attribute' ExtAttr: '')
    {"CSSImportRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSImportRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSMediaRule' (Type: 'attribute' ExtAttr: '')
    {"CSSMediaRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSMediaRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSPageRule' (Type: 'attribute' ExtAttr: '')
    {"CSSPageRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSPageRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSStyleRule' (Type: 'attribute' ExtAttr: '')
    {"CSSStyleRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSStyleRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSStyleDeclaration' (Type: 'attribute' ExtAttr: '')
    {"CSSStyleDeclaration", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSStyleDeclaration::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'MediaList' (Type: 'attribute' ExtAttr: '')
    {"MediaList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MediaList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Counter' (Type: 'attribute' ExtAttr: '')
    {"Counter", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Counter::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CSSRuleList' (Type: 'attribute' ExtAttr: '')
    {"CSSRuleList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CSSRuleList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Rect' (Type: 'attribute' ExtAttr: '')
    {"Rect", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Rect::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'RGBColor' (Type: 'attribute' ExtAttr: '')
    {"RGBColor", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8RGBColor::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'StyleSheetList' (Type: 'attribute' ExtAttr: '')
    {"StyleSheetList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8StyleSheetList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DOMException' (Type: 'attribute' ExtAttr: '')
    {"DOMException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMCoreException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DOMStringList' (Type: 'attribute' ExtAttr: '')
    {"DOMStringList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMStringList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DOMImplementation' (Type: 'attribute' ExtAttr: '')
    {"DOMImplementation", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMImplementation::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DOMSettableTokenList' (Type: 'attribute' ExtAttr: '')
    {"DOMSettableTokenList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMSettableTokenList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DOMTokenList' (Type: 'attribute' ExtAttr: '')
    {"DOMTokenList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMTokenList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DocumentFragment' (Type: 'attribute' ExtAttr: '')
    {"DocumentFragment", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DocumentFragment::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Document' (Type: 'attribute' ExtAttr: '')
    {"Document", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Document::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Node' (Type: 'attribute' ExtAttr: '')
    {"Node", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Node::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'NodeList' (Type: 'attribute' ExtAttr: '')
    {"NodeList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8NodeList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'NamedNodeMap' (Type: 'attribute' ExtAttr: '')
    {"NamedNodeMap", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8NamedNodeMap::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CharacterData' (Type: 'attribute' ExtAttr: '')
    {"CharacterData", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CharacterData::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Attr' (Type: 'attribute' ExtAttr: '')
    {"Attr", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Attr::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Element' (Type: 'attribute' ExtAttr: '')
    {"Element", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Element::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Text' (Type: 'attribute' ExtAttr: '')
    {"Text", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Text::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Comment' (Type: 'attribute' ExtAttr: '')
    {"Comment", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Comment::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CDATASection' (Type: 'attribute' ExtAttr: '')
    {"CDATASection", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CDATASection::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DocumentType' (Type: 'attribute' ExtAttr: '')
    {"DocumentType", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DocumentType::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Notation' (Type: 'attribute' ExtAttr: '')
    {"Notation", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Notation::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Entity' (Type: 'attribute' ExtAttr: '')
    {"Entity", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Entity::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'EntityReference' (Type: 'attribute' ExtAttr: '')
    {"EntityReference", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8EntityReference::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'ProcessingInstruction' (Type: 'attribute' ExtAttr: '')
    {"ProcessingInstruction", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8ProcessingInstruction::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLDocument' (Type: 'attribute' ExtAttr: '')
    {"HTMLDocument", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLDocument::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLAnchorElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLAnchorElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLAnchorElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLAppletElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLAppletElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLAppletElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLAreaElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLAreaElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLAreaElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLBRElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLBRElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLBRElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLBaseElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLBaseElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLBaseElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLBaseFontElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLBaseFontElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLBaseFontElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLBodyElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLBodyElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLBodyElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLButtonElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLButtonElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLButtonElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLCanvasElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLCanvasElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLCanvasElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLDListElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLDListElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLDListElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLDirectoryElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLDirectoryElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLDirectoryElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLDivElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLDivElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLDivElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLEmbedElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLEmbedElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLEmbedElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLFieldSetElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLFieldSetElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLFieldSetElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLFontElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLFontElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLFontElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLFormElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLFormElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLFormElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLFrameElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLFrameElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLFrameElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLFrameSetElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLFrameSetElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLFrameSetElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLHRElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLHRElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLHRElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLHeadElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLHeadElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLHeadElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLHeadingElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLHeadingElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLHeadingElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLHtmlElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLHtmlElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLHtmlElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLIFrameElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLIFrameElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLIFrameElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLImageElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLImageElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLImageElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLInputElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLInputElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLInputElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLIsIndexElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLIsIndexElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLIsIndexElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLKeygenElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLKeygenElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLKeygenElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLLIElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLLIElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLLIElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLLabelElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLLabelElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLLabelElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLLegendElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLLegendElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLLegendElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLLinkElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLLinkElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLLinkElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLMapElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLMapElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLMapElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLMarqueeElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLMarqueeElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLMarqueeElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLMenuElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLMenuElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLMenuElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLMetaElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLMetaElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLMetaElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLMeterElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLMeterElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLMeterElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLModElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLModElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLModElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLOListElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLOListElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLOListElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLObjectElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLObjectElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLObjectElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLOptGroupElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLOptGroupElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLOptGroupElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLOptionElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLOptionElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLOptionElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLOutputElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLOutputElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLOutputElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLParagraphElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLParagraphElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLParagraphElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLParamElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLParamElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLParamElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLPreElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLPreElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLPreElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLProgressElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLProgressElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLProgressElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLQuoteElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLQuoteElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLQuoteElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLScriptElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLScriptElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLScriptElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLSelectElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLSelectElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLSelectElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLSpanElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLSpanElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLSpanElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLStyleElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLStyleElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLStyleElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTableCaptionElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTableCaptionElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTableCaptionElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTableCellElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTableCellElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTableCellElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTableColElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTableColElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTableColElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTableElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTableElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTableElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTableRowElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTableRowElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTableRowElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTableSectionElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTableSectionElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTableSectionElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTextAreaElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTextAreaElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTextAreaElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLTitleElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLTitleElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLTitleElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLUListElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLUListElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLUListElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLCollection' (Type: 'attribute' ExtAttr: '')
    {"HTMLCollection", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLCollection::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLAllCollection' (Type: 'attribute' ExtAttr: '')
    {"HTMLAllCollection", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLAllCollection::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HTMLUnknownElement' (Type: 'attribute' ExtAttr: '')
    {"HTMLUnknownElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLUnknownElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Image' (Type: 'attribute' ExtAttr: 'CustomGetter')
    {"Image", V8DOMWindow::ImageAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Option' (Type: 'attribute' ExtAttr: 'CustomGetter')
    {"Option", V8DOMWindow::OptionAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CanvasPattern' (Type: 'attribute' ExtAttr: '')
    {"CanvasPattern", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CanvasPattern::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CanvasGradient' (Type: 'attribute' ExtAttr: '')
    {"CanvasGradient", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CanvasGradient::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CanvasRenderingContext2D' (Type: 'attribute' ExtAttr: '')
    {"CanvasRenderingContext2D", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CanvasRenderingContext2D::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'ImageData' (Type: 'attribute' ExtAttr: '')
    {"ImageData", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8ImageData::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#if ENABLE(WEBGL)
    // Attribute 'WebGLActiveInfo' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLActiveInfo", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLActiveInfo::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLBuffer' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLBuffer", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLBuffer::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLFramebuffer' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLFramebuffer", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLFramebuffer::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLProgram' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLProgram", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLProgram::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLRenderbuffer' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLRenderbuffer", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLRenderbuffer::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLRenderingContext' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLRenderingContext", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLRenderingContext::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLShader' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLShader", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLShader::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLTexture' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLTexture", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLTexture::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
#if ENABLE(WEBGL)
    // Attribute 'WebGLUniformLocation' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLUniformLocation", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLUniformLocation::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
    // Attribute 'TextMetrics' (Type: 'attribute' ExtAttr: '')
    {"TextMetrics", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8TextMetrics::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DOMStringMap' (Type: 'attribute' ExtAttr: '')
    {"DOMStringMap", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMStringMap::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'ArrayBuffer' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"ArrayBuffer", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8ArrayBuffer::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Int8Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Int8Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Int8Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Uint8Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Uint8Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Uint8Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Int16Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Int16Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Int16Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Uint16Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Uint16Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Uint16Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Int32Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Int32Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Int32Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Uint32Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Uint32Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Uint32Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Float32Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Float32Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Float32Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Float64Array' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Float64Array", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Float64Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DataView' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"DataView", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DataView::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#if ENABLE(WEB_AUDIO)
    // Attribute 'webkitAudioPannerNode' (Type: 'attribute' ExtAttr: 'Conditional')
    {"webkitAudioPannerNode", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8AudioPannerNode::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
    // Attribute 'Event' (Type: 'attribute' ExtAttr: '')
    {"Event", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Event::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'BeforeLoadEvent' (Type: 'attribute' ExtAttr: '')
    {"BeforeLoadEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8BeforeLoadEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CompositionEvent' (Type: 'attribute' ExtAttr: '')
    {"CompositionEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CompositionEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'CustomEvent' (Type: 'attribute' ExtAttr: '')
    {"CustomEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CustomEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'ErrorEvent' (Type: 'attribute' ExtAttr: '')
    {"ErrorEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8ErrorEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'HashChangeEvent' (Type: 'attribute' ExtAttr: '')
    {"HashChangeEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HashChangeEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'KeyboardEvent' (Type: 'attribute' ExtAttr: '')
    {"KeyboardEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8KeyboardEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'MessageEvent' (Type: 'attribute' ExtAttr: '')
    {"MessageEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MessageEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'MouseEvent' (Type: 'attribute' ExtAttr: '')
    {"MouseEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MouseEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'MutationEvent' (Type: 'attribute' ExtAttr: '')
    {"MutationEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MutationEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'OverflowEvent' (Type: 'attribute' ExtAttr: '')
    {"OverflowEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8OverflowEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'PopStateEvent' (Type: 'attribute' ExtAttr: '')
    {"PopStateEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8PopStateEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'PageTransitionEvent' (Type: 'attribute' ExtAttr: '')
    {"PageTransitionEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8PageTransitionEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'ProgressEvent' (Type: 'attribute' ExtAttr: '')
    {"ProgressEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8ProgressEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'TextEvent' (Type: 'attribute' ExtAttr: '')
    {"TextEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8TextEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'UIEvent' (Type: 'attribute' ExtAttr: '')
    {"UIEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8UIEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WebKitAnimationEvent' (Type: 'attribute' ExtAttr: '')
    {"WebKitAnimationEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitAnimationEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WebKitTransitionEvent' (Type: 'attribute' ExtAttr: '')
    {"WebKitTransitionEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitTransitionEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WheelEvent' (Type: 'attribute' ExtAttr: '')
    {"WheelEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WheelEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XMLHttpRequestProgressEvent' (Type: 'attribute' ExtAttr: '')
    {"XMLHttpRequestProgressEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XMLHttpRequestProgressEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#if ENABLE(SVG)
    // Attribute 'SVGZoomEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"SVGZoomEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGZoomEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(SVG)
#if ENABLE(TOUCH_EVENTS)
    // Attribute 'TouchEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"TouchEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8TouchEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(TOUCH_EVENTS)
#if ENABLE(WEB_SOCKETS)
    // Attribute 'CloseEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"CloseEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8CloseEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEB_SOCKETS)
#if ENABLE(DOM_STORAGE)
    // Attribute 'StorageEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"StorageEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8StorageEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(DOM_STORAGE)
#if ENABLE(WEB_AUDIO)
    // Attribute 'AudioProcessingEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"AudioProcessingEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8AudioProcessingEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    // Attribute 'OfflineAudioCompletionEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"OfflineAudioCompletionEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8OfflineAudioCompletionEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(INPUT_SPEECH)
    // Attribute 'SpeechInputEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"SpeechInputEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SpeechInputEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(INPUT_SPEECH)
#if ENABLE(MEDIA_STREAM)
    // Attribute 'MediaStreamEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"MediaStreamEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MediaStreamEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(MEDIA_STREAM)
#if ENABLE(WEBGL)
    // Attribute 'WebGLContextEvent' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebGLContextEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebGLContextEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(WEBGL)
    // Attribute 'EventException' (Type: 'attribute' ExtAttr: '')
    {"EventException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8EventException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WebKitCSSKeyframeRule' (Type: 'attribute' ExtAttr: '')
    {"WebKitCSSKeyframeRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitCSSKeyframeRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WebKitCSSKeyframesRule' (Type: 'attribute' ExtAttr: '')
    {"WebKitCSSKeyframesRule", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitCSSKeyframesRule::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WebKitCSSMatrix' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"WebKitCSSMatrix", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitCSSMatrix::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'WebKitPoint' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"WebKitPoint", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitPoint::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Clipboard' (Type: 'attribute' ExtAttr: '')
    {"Clipboard", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Clipboard::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'File' (Type: 'attribute' ExtAttr: '')
    {"File", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8File::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'FileList' (Type: 'attribute' ExtAttr: '')
    {"FileList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8FileList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Blob' (Type: 'attribute' ExtAttr: '')
    {"Blob", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Blob::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'NodeFilter' (Type: 'attribute' ExtAttr: '')
    {"NodeFilter", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8NodeFilter::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Range' (Type: 'attribute' ExtAttr: '')
    {"Range", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Range::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'RangeException' (Type: 'attribute' ExtAttr: '')
    {"RangeException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8RangeException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'EventSource' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"EventSource", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8EventSource::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XMLDocument' (Type: 'attribute' ExtAttr: '')
    {"XMLDocument", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Document::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'DOMParser' (Type: 'attribute' ExtAttr: '')
    {"DOMParser", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMParser::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XMLSerializer' (Type: 'attribute' ExtAttr: '')
    {"XMLSerializer", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XMLSerializer::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XMLHttpRequest' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"XMLHttpRequest", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XMLHttpRequest::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XMLHttpRequestUpload' (Type: 'attribute' ExtAttr: '')
    {"XMLHttpRequestUpload", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XMLHttpRequestUpload::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XMLHttpRequestException' (Type: 'attribute' ExtAttr: '')
    {"XMLHttpRequestException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XMLHttpRequestException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#if ENABLE(XSLT)
    // Attribute 'XSLTProcessor' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
    {"XSLTProcessor", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XSLTProcessor::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(XSLT)
    // Attribute 'MessagePort' (Type: 'attribute' ExtAttr: '')
    {"MessagePort", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MessagePort::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'MessageChannel' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"MessageChannel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MessageChannel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Worker' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
    {"Worker", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Worker::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Plugin' (Type: 'attribute' ExtAttr: '')
    {"Plugin", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMPlugin::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'PluginArray' (Type: 'attribute' ExtAttr: '')
    {"PluginArray", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMPluginArray::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'MimeType' (Type: 'attribute' ExtAttr: '')
    {"MimeType", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMMimeType::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'MimeTypeArray' (Type: 'attribute' ExtAttr: '')
    {"MimeTypeArray", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMMimeTypeArray::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'ClientRect' (Type: 'attribute' ExtAttr: '')
    {"ClientRect", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8ClientRect::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'ClientRectList' (Type: 'attribute' ExtAttr: '')
    {"ClientRectList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8ClientRectList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'Storage' (Type: 'attribute' ExtAttr: '')
    {"Storage", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8Storage::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XPathEvaluator' (Type: 'attribute' ExtAttr: '')
    {"XPathEvaluator", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XPathEvaluator::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XPathResult' (Type: 'attribute' ExtAttr: '')
    {"XPathResult", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XPathResult::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'XPathException' (Type: 'attribute' ExtAttr: '')
    {"XPathException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8XPathException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAngle' (Type: 'attribute' ExtAttr: '')
    {"SVGAngle", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAngle::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedAngle' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedAngle", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedAngle::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedBoolean' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedBoolean", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedBoolean::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedEnumeration' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedEnumeration", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedEnumeration::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedInteger' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedInteger", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedInteger::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedLength' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedLength", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedLength::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedLengthList' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedLengthList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedLengthList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedNumber' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedNumber", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedNumber::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedNumberList' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedNumberList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedNumberList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedPreserveAspectRatio' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedPreserveAspectRatio", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedPreserveAspectRatio::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedRect' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedRect", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedRect::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedString' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedString", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedString::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimatedTransformList' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimatedTransformList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimatedTransformList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGCircleElement' (Type: 'attribute' ExtAttr: '')
    {"SVGCircleElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGCircleElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGClipPathElement' (Type: 'attribute' ExtAttr: '')
    {"SVGClipPathElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGClipPathElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGColor' (Type: 'attribute' ExtAttr: '')
    {"SVGColor", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGColor::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGCursorElement' (Type: 'attribute' ExtAttr: '')
    {"SVGCursorElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGCursorElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGDefsElement' (Type: 'attribute' ExtAttr: '')
    {"SVGDefsElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGDefsElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGDescElement' (Type: 'attribute' ExtAttr: '')
    {"SVGDescElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGDescElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGDocument' (Type: 'attribute' ExtAttr: '')
    {"SVGDocument", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGDocument::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGElement' (Type: 'attribute' ExtAttr: '')
    {"SVGElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGElementInstance' (Type: 'attribute' ExtAttr: '')
    {"SVGElementInstance", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGElementInstance::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGElementInstanceList' (Type: 'attribute' ExtAttr: '')
    {"SVGElementInstanceList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGElementInstanceList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGEllipseElement' (Type: 'attribute' ExtAttr: '')
    {"SVGEllipseElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGEllipseElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGForeignObjectElement' (Type: 'attribute' ExtAttr: '')
    {"SVGForeignObjectElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGForeignObjectElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGException' (Type: 'attribute' ExtAttr: '')
    {"SVGException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGGElement' (Type: 'attribute' ExtAttr: '')
    {"SVGGElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGGElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGGradientElement' (Type: 'attribute' ExtAttr: '')
    {"SVGGradientElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGGradientElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGImageElement' (Type: 'attribute' ExtAttr: '')
    {"SVGImageElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGImageElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGLength' (Type: 'attribute' ExtAttr: '')
    {"SVGLength", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGLength::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGLengthList' (Type: 'attribute' ExtAttr: '')
    {"SVGLengthList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGLengthList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGLinearGradientElement' (Type: 'attribute' ExtAttr: '')
    {"SVGLinearGradientElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGLinearGradientElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGLineElement' (Type: 'attribute' ExtAttr: '')
    {"SVGLineElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGLineElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGMarkerElement' (Type: 'attribute' ExtAttr: '')
    {"SVGMarkerElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGMarkerElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGMaskElement' (Type: 'attribute' ExtAttr: '')
    {"SVGMaskElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGMaskElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGMatrix' (Type: 'attribute' ExtAttr: '')
    {"SVGMatrix", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGMatrix::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGMetadataElement' (Type: 'attribute' ExtAttr: '')
    {"SVGMetadataElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGMetadataElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGNumber' (Type: 'attribute' ExtAttr: '')
    {"SVGNumber", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGNumber::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGNumberList' (Type: 'attribute' ExtAttr: '')
    {"SVGNumberList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGNumberList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPaint' (Type: 'attribute' ExtAttr: '')
    {"SVGPaint", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPaint::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathElement' (Type: 'attribute' ExtAttr: '')
    {"SVGPathElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSeg' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSeg", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSeg::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegArcAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegArcAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegArcAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegArcRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegArcRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegArcRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegClosePath' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegClosePath", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegClosePath::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoCubicAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoCubicAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoCubicAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoCubicRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoCubicRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoCubicRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoCubicSmoothAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoCubicSmoothAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoCubicSmoothAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoCubicSmoothRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoCubicSmoothRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoCubicSmoothRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoQuadraticAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoQuadraticAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoQuadraticAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoQuadraticRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoQuadraticRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoQuadraticRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoQuadraticSmoothAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoQuadraticSmoothAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoQuadraticSmoothAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegCurvetoQuadraticSmoothRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegCurvetoQuadraticSmoothRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegCurvetoQuadraticSmoothRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegLinetoAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegLinetoAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegLinetoAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegLinetoHorizontalAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegLinetoHorizontalAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegLinetoHorizontalAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegLinetoHorizontalRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegLinetoHorizontalRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegLinetoHorizontalRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegLinetoRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegLinetoRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegLinetoRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegLinetoVerticalAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegLinetoVerticalAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegLinetoVerticalAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegLinetoVerticalRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegLinetoVerticalRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegLinetoVerticalRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegList' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegMovetoAbs' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegMovetoAbs", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegMovetoAbs::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPathSegMovetoRel' (Type: 'attribute' ExtAttr: '')
    {"SVGPathSegMovetoRel", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPathSegMovetoRel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPatternElement' (Type: 'attribute' ExtAttr: '')
    {"SVGPatternElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPatternElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPoint' (Type: 'attribute' ExtAttr: '')
    {"SVGPoint", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPoint::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPointList' (Type: 'attribute' ExtAttr: '')
    {"SVGPointList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPointList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPolygonElement' (Type: 'attribute' ExtAttr: '')
    {"SVGPolygonElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPolygonElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPolylineElement' (Type: 'attribute' ExtAttr: '')
    {"SVGPolylineElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPolylineElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGPreserveAspectRatio' (Type: 'attribute' ExtAttr: '')
    {"SVGPreserveAspectRatio", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGPreserveAspectRatio::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGRadialGradientElement' (Type: 'attribute' ExtAttr: '')
    {"SVGRadialGradientElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGRadialGradientElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGRect' (Type: 'attribute' ExtAttr: '')
    {"SVGRect", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGRect::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGRectElement' (Type: 'attribute' ExtAttr: '')
    {"SVGRectElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGRectElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGRenderingIntent' (Type: 'attribute' ExtAttr: '')
    {"SVGRenderingIntent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGRenderingIntent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGScriptElement' (Type: 'attribute' ExtAttr: '')
    {"SVGScriptElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGScriptElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGStopElement' (Type: 'attribute' ExtAttr: '')
    {"SVGStopElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGStopElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGStringList' (Type: 'attribute' ExtAttr: '')
    {"SVGStringList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGStringList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGStyleElement' (Type: 'attribute' ExtAttr: '')
    {"SVGStyleElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGStyleElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGSVGElement' (Type: 'attribute' ExtAttr: '')
    {"SVGSVGElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGSVGElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGSwitchElement' (Type: 'attribute' ExtAttr: '')
    {"SVGSwitchElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGSwitchElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGSymbolElement' (Type: 'attribute' ExtAttr: '')
    {"SVGSymbolElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGSymbolElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTextContentElement' (Type: 'attribute' ExtAttr: '')
    {"SVGTextContentElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTextContentElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTextElement' (Type: 'attribute' ExtAttr: '')
    {"SVGTextElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTextElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTextPathElement' (Type: 'attribute' ExtAttr: '')
    {"SVGTextPathElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTextPathElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTextPositioningElement' (Type: 'attribute' ExtAttr: '')
    {"SVGTextPositioningElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTextPositioningElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTitleElement' (Type: 'attribute' ExtAttr: '')
    {"SVGTitleElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTitleElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTransform' (Type: 'attribute' ExtAttr: '')
    {"SVGTransform", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTransform::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTransformList' (Type: 'attribute' ExtAttr: '')
    {"SVGTransformList", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTransformList::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTRefElement' (Type: 'attribute' ExtAttr: '')
    {"SVGTRefElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTRefElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGTSpanElement' (Type: 'attribute' ExtAttr: '')
    {"SVGTSpanElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGTSpanElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGUnitTypes' (Type: 'attribute' ExtAttr: '')
    {"SVGUnitTypes", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGUnitTypes::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGUseElement' (Type: 'attribute' ExtAttr: '')
    {"SVGUseElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGUseElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGViewElement' (Type: 'attribute' ExtAttr: '')
    {"SVGViewElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGViewElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimateColorElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimateColorElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimateColorElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimateElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimateElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimateElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimateMotionElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimateMotionElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimateMotionElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAnimateTransformElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAnimateTransformElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAnimateTransformElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGMPathElement' (Type: 'attribute' ExtAttr: '')
    {"SVGMPathElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGMPathElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGSetElement' (Type: 'attribute' ExtAttr: '')
    {"SVGSetElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGSetElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAltGlyphDefElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAltGlyphDefElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAltGlyphDefElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAltGlyphElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAltGlyphElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAltGlyphElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGAltGlyphItemElement' (Type: 'attribute' ExtAttr: '')
    {"SVGAltGlyphItemElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGAltGlyphItemElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFontElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFontElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFontElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFontFaceElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFontFaceElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFontFaceElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFontFaceFormatElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFontFaceFormatElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFontFaceFormatElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFontFaceNameElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFontFaceNameElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFontFaceNameElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFontFaceSrcElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFontFaceSrcElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFontFaceSrcElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFontFaceUriElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFontFaceUriElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFontFaceUriElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGGlyphElement' (Type: 'attribute' ExtAttr: '')
    {"SVGGlyphElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGGlyphElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGGlyphRefElement' (Type: 'attribute' ExtAttr: '')
    {"SVGGlyphRefElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGGlyphRefElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGHKernElement' (Type: 'attribute' ExtAttr: '')
    {"SVGHKernElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGHKernElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGMissingGlyphElement' (Type: 'attribute' ExtAttr: '')
    {"SVGMissingGlyphElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGMissingGlyphElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGVKernElement' (Type: 'attribute' ExtAttr: '')
    {"SVGVKernElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGVKernElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGComponentTransferFunctionElement' (Type: 'attribute' ExtAttr: '')
    {"SVGComponentTransferFunctionElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGComponentTransferFunctionElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEBlendElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEBlendElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEBlendElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEColorMatrixElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEColorMatrixElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEColorMatrixElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEComponentTransferElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEComponentTransferElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEComponentTransferElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFECompositeElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFECompositeElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFECompositeElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEConvolveMatrixElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEConvolveMatrixElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEConvolveMatrixElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEDiffuseLightingElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEDiffuseLightingElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEDiffuseLightingElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEDisplacementMapElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEDisplacementMapElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEDisplacementMapElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEDistantLightElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEDistantLightElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEDistantLightElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEDropShadowElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEDropShadowElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEDropShadowElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEFloodElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEFloodElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEFloodElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEFuncAElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEFuncAElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEFuncAElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEFuncBElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEFuncBElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEFuncBElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEFuncGElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEFuncGElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEFuncGElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEFuncRElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEFuncRElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEFuncRElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEGaussianBlurElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEGaussianBlurElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEGaussianBlurElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEImageElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEImageElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEImageElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEMergeElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEMergeElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEMergeElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEMergeNodeElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEMergeNodeElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEMergeNodeElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEMorphologyElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEMorphologyElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEMorphologyElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEOffsetElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEOffsetElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEOffsetElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFEPointLightElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFEPointLightElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFEPointLightElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFESpecularLightingElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFESpecularLightingElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFESpecularLightingElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFESpotLightElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFESpotLightElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFESpotLightElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFETileElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFETileElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFETileElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFETurbulenceElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFETurbulenceElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFETurbulenceElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
    // Attribute 'SVGFilterElement' (Type: 'attribute' ExtAttr: '')
    {"SVGFilterElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SVGFilterElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#if ENABLE(SQL_DATABASE)
    // Attribute 'SQLException' (Type: 'attribute' ExtAttr: 'Conditional')
    {"SQLException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SQLException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(SQL_DATABASE)
    // Attribute 'FormData' (Type: 'attribute' ExtAttr: '')
    {"FormData", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DOMFormData::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#if ENABLE(BLOB) || ENABLE(FILE_SYSTEM)
    // Attribute 'FileError' (Type: 'attribute' ExtAttr: 'Conditional')
    {"FileError", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8FileError::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(BLOB) || ENABLE(FILE_SYSTEM)
#if ENABLE(BLOB)
    // Attribute 'FileReader' (Type: 'attribute' ExtAttr: 'Conditional')
    {"FileReader", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8FileReader::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(BLOB)
#if ENABLE(BLOB)
    // Attribute 'WebKitBlobBuilder' (Type: 'attribute' ExtAttr: 'Conditional')
    {"WebKitBlobBuilder", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitBlobBuilder::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */},
#endif // ENABLE(BLOB)
#if ENABLE(BLOB)
    // Attribute 'webkitURL' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitURL", DOMWindowInternal::webkitURLAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(BLOB)
};

static const BatchedCallback DOMWindowCallbacks[] = {
    {"getSelection", DOMWindowInternal::getSelectionCallback},
    {"print", DOMWindowInternal::printCallback},
    {"stop", DOMWindowInternal::stopCallback},
    {"open", V8DOMWindow::openCallback},
    {"showModalDialog", V8DOMWindow::showModalDialogCallback},
    {"alert", DOMWindowInternal::alertCallback},
    {"confirm", DOMWindowInternal::confirmCallback},
    {"prompt", DOMWindowInternal::promptCallback},
    {"find", DOMWindowInternal::findCallback},
    {"scrollBy", DOMWindowInternal::scrollByCallback},
    {"scrollTo", DOMWindowInternal::scrollToCallback},
    {"scroll", DOMWindowInternal::scrollCallback},
    {"moveBy", DOMWindowInternal::moveByCallback},
    {"moveTo", DOMWindowInternal::moveToCallback},
    {"resizeBy", DOMWindowInternal::resizeByCallback},
    {"resizeTo", DOMWindowInternal::resizeToCallback},
    {"matchMedia", DOMWindowInternal::matchMediaCallback},
    {"setTimeout", V8DOMWindow::setTimeoutCallback},
    {"clearTimeout", DOMWindowInternal::clearTimeoutCallback},
    {"setInterval", V8DOMWindow::setIntervalCallback},
    {"clearInterval", DOMWindowInternal::clearIntervalCallback},
    {"webkitRequestAnimationFrame", DOMWindowInternal::webkitRequestAnimationFrameCallback},
    {"webkitCancelRequestAnimationFrame", DOMWindowInternal::webkitCancelRequestAnimationFrameCallback},
    {"atob", DOMWindowInternal::atobCallback},
    {"btoa", DOMWindowInternal::btoaCallback},
    {"addEventListener", V8DOMWindow::addEventListenerCallback},
    {"removeEventListener", V8DOMWindow::removeEventListenerCallback},
    {"captureEvents", V8DOMWindow::captureEventsCallback},
    {"releaseEvents", V8DOMWindow::releaseEventsCallback},
};

static const BatchedConstant DOMWindowConsts[] = {
    {"TEMPORARY", static_cast<signed int>(0)},
    {"PERSISTENT", static_cast<signed int>(1)},
};


COMPILE_ASSERT(0 == DOMWindow::TEMPORARY, DOMWindowEnumTEMPORARYIsWrongUseDontCheckEnums);
COMPILE_ASSERT(1 == DOMWindow::PERSISTENT, DOMWindowEnumPERSISTENTIsWrongUseDontCheckEnums);

static v8::Persistent<v8::ObjectTemplate> ConfigureShadowObjectTemplate(v8::Persistent<v8::ObjectTemplate> templ)
{
    batchConfigureAttributes(templ, v8::Handle<v8::ObjectTemplate>(), shadowAttrs, WTF_ARRAY_LENGTH(shadowAttrs));

    // Install a security handler with V8.
    templ->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::External::Wrap(&V8DOMWindow::info));
    templ->SetInternalFieldCount(V8DOMWindow::internalFieldCount);
    return templ;
}
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DOMWindowTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "DOMWindow", v8::Persistent<v8::FunctionTemplate>(), V8DOMWindow::internalFieldCount,
        DOMWindowAttrs, WTF_ARRAY_LENGTH(DOMWindowAttrs),
        DOMWindowCallbacks, WTF_ARRAY_LENGTH(DOMWindowCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    if (RuntimeEnabledFeatures::applicationCacheEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'applicationCache' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"applicationCache", DOMWindowInternal::applicationCacheAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::sessionStorageEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'sessionStorage' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"sessionStorage", DOMWindowInternal::sessionStorageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::localStorageEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'localStorage' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"localStorage", DOMWindowInternal::localStorageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitNotificationsEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitNotifications' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitNotifications", DOMWindowInternal::webkitNotificationsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIndexedDBEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIndexedDB' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIndexedDB", DOMWindowInternal::webkitIndexedDBAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBCursorEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBCursor' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBCursor", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBCursor::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBDatabaseEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBDatabase' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBDatabase", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBDatabase::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBDatabaseErrorEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBDatabaseError' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBDatabaseError", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBDatabaseError::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBDatabaseExceptionEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBDatabaseException' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBDatabaseException", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBDatabaseException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBFactoryEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBFactory' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBFactory", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBFactory::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBIndexEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBIndex' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBIndex", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBIndex::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBKeyRangeEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBKeyRange' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBKeyRange", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBKeyRange::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBObjectStoreEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBObjectStore' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBObjectStore", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBObjectStore::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBRequestEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBRequest' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBRequest", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBRequest::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitIDBTransactionEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitIDBTransaction' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitIDBTransaction", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8IDBTransaction::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'WebKitFlags' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime')
        {"WebKitFlags", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebKitFlags::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchstartEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'v8OnProto EnabledAtRuntime Conditional')
        {"ontouchstart", DOMWindowInternal::ontouchstartAttrGetter, DOMWindowInternal::ontouchstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchmoveEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'v8OnProto EnabledAtRuntime Conditional')
        {"ontouchmove", DOMWindowInternal::ontouchmoveAttrGetter, DOMWindowInternal::ontouchmoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchendEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'v8OnProto EnabledAtRuntime Conditional')
        {"ontouchend", DOMWindowInternal::ontouchendAttrGetter, DOMWindowInternal::ontouchendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchcancelEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'v8OnProto EnabledAtRuntime Conditional')
        {"ontouchcancel", DOMWindowInternal::ontouchcancelAttrGetter, DOMWindowInternal::ontouchcancelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(DEVICE_ORIENTATION)
    if (RuntimeEnabledFeatures::ondevicemotionEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ondevicemotion' (Type: 'attribute' ExtAttr: 'v8OnProto EnabledAtRuntime Conditional')
        {"ondevicemotion", DOMWindowInternal::ondevicemotionAttrGetter, DOMWindowInternal::ondevicemotionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(DEVICE_ORIENTATION)

#if ENABLE(DEVICE_ORIENTATION)
    if (RuntimeEnabledFeatures::ondeviceorientationEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ondeviceorientation' (Type: 'attribute' ExtAttr: 'v8OnProto EnabledAtRuntime Conditional')
        {"ondeviceorientation", DOMWindowInternal::ondeviceorientationAttrGetter, DOMWindowInternal::ondeviceorientationAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on proto */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(DEVICE_ORIENTATION)

#if ENABLE(MEDIA_STREAM)
    if (RuntimeEnabledFeatures::webkitPeerConnectionEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitPeerConnection' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"webkitPeerConnection", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8PeerConnection::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(MEDIA_STREAM)

#if ENABLE(WEB_AUDIO)
    if (RuntimeEnabledFeatures::webkitAudioContextEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitAudioContext' (Type: 'attribute' ExtAttr: 'JSCCustomGetter EnabledAtRuntime Conditional')
        {"webkitAudioContext", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8AudioContext::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(WEB_AUDIO)

#if ENABLE(DEVICE_ORIENTATION)
    if (RuntimeEnabledFeatures::deviceMotionEventEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'DeviceMotionEvent' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"DeviceMotionEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DeviceMotionEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(DEVICE_ORIENTATION)

#if ENABLE(DEVICE_ORIENTATION)
    if (RuntimeEnabledFeatures::deviceOrientationEventEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'DeviceOrientationEvent' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"DeviceOrientationEvent", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8DeviceOrientationEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(DEVICE_ORIENTATION)
    if (RuntimeEnabledFeatures::sharedWorkerEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'SharedWorker' (Type: 'attribute' ExtAttr: 'JSCCustomGetter EnabledAtRuntime')
        {"SharedWorker", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8SharedWorker::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webSocketEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'WebSocket' (Type: 'attribute' ExtAttr: 'JSCCustomGetter EnabledAtRuntime')
        {"WebSocket", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8WebSocket::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::audioEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'Audio' (Type: 'attribute' ExtAttr: 'CustomGetter EnabledAtRuntime Conditional')
        {"Audio", V8DOMWindow::AudioAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::htmlAudioElementEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'HTMLAudioElement' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"HTMLAudioElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLAudioElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::htmlMediaElementEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'HTMLMediaElement' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"HTMLMediaElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLMediaElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::htmlVideoElementEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'HTMLVideoElement' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"HTMLVideoElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLVideoElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::mediaErrorEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'MediaError' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"MediaError", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8MediaError::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::timeRangesEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'TimeRanges' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"TimeRanges", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8TimeRanges::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::htmlSourceElementEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'HTMLSourceElement' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
        {"HTMLSourceElement", DOMWindowInternal::DOMWindowConstructorGetter, 0, &V8HTMLSourceElement::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::quotaEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'webkitStorageInfo' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
        {"webkitStorageInfo", DOMWindowInternal::webkitStorageInfoAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }
    desc->PrototypeTemplate()->SetIndexedPropertyHandler(V8DOMWindow::indexedPropertyGetter, 0, 0, 0);
    desc->PrototypeTemplate()->SetNamedPropertyHandler(V8DOMWindow::namedPropertyGetter, 0, 0, 0, 0);

    // Function 'focus' (ExtAttr: 'DoNotCheckDomainSecurity')
    proto->SetAccessor(v8::String::New("focus"), DOMWindowInternal::focusAttrGetter, 0, v8::Handle<v8::Value>(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));

    // Function 'blur' (ExtAttr: 'DoNotCheckDomainSecurity')
    proto->SetAccessor(v8::String::New("blur"), DOMWindowInternal::blurAttrGetter, 0, v8::Handle<v8::Value>(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));

    // Function 'close' (ExtAttr: 'DoNotCheckDomainSecurity CallWith')
    proto->SetAccessor(v8::String::New("close"), DOMWindowInternal::closeAttrGetter, 0, v8::Handle<v8::Value>(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));

    // Custom Signature 'getComputedStyle'
    const int getComputedStyleArgc = 2;
    v8::Handle<v8::FunctionTemplate> getComputedStyleArgv[getComputedStyleArgc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> getComputedStyleSignature = v8::Signature::New(desc, getComputedStyleArgc, getComputedStyleArgv);
    proto->Set(v8::String::New("getComputedStyle"), v8::FunctionTemplate::New(DOMWindowInternal::getComputedStyleCallback, v8::Handle<v8::Value>(), getComputedStyleSignature));

    // Custom Signature 'getMatchedCSSRules'
    const int getMatchedCSSRulesArgc = 2;
    v8::Handle<v8::FunctionTemplate> getMatchedCSSRulesArgv[getMatchedCSSRulesArgc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> getMatchedCSSRulesSignature = v8::Signature::New(desc, getMatchedCSSRulesArgc, getMatchedCSSRulesArgv);
    proto->Set(v8::String::New("getMatchedCSSRules"), v8::FunctionTemplate::New(DOMWindowInternal::getMatchedCSSRulesCallback, v8::Handle<v8::Value>(), getMatchedCSSRulesSignature));

    // Custom Signature 'webkitConvertPointFromPageToNode'
    const int webkitConvertPointFromPageToNodeArgc = 2;
    v8::Handle<v8::FunctionTemplate> webkitConvertPointFromPageToNodeArgv[webkitConvertPointFromPageToNodeArgc] = { V8Node::GetRawTemplate(), V8WebKitPoint::GetRawTemplate() };
    v8::Handle<v8::Signature> webkitConvertPointFromPageToNodeSignature = v8::Signature::New(desc, webkitConvertPointFromPageToNodeArgc, webkitConvertPointFromPageToNodeArgv);
    proto->Set(v8::String::New("webkitConvertPointFromPageToNode"), v8::FunctionTemplate::New(DOMWindowInternal::webkitConvertPointFromPageToNodeCallback, v8::Handle<v8::Value>(), webkitConvertPointFromPageToNodeSignature));

    // Custom Signature 'webkitConvertPointFromNodeToPage'
    const int webkitConvertPointFromNodeToPageArgc = 2;
    v8::Handle<v8::FunctionTemplate> webkitConvertPointFromNodeToPageArgv[webkitConvertPointFromNodeToPageArgc] = { V8Node::GetRawTemplate(), V8WebKitPoint::GetRawTemplate() };
    v8::Handle<v8::Signature> webkitConvertPointFromNodeToPageSignature = v8::Signature::New(desc, webkitConvertPointFromNodeToPageArgc, webkitConvertPointFromNodeToPageArgv);
    proto->Set(v8::String::New("webkitConvertPointFromNodeToPage"), v8::FunctionTemplate::New(DOMWindowInternal::webkitConvertPointFromNodeToPageCallback, v8::Handle<v8::Value>(), webkitConvertPointFromNodeToPageSignature));
    if (RuntimeEnabledFeatures::openDatabaseEnabled())
        proto->Set(v8::String::New("openDatabase"), v8::FunctionTemplate::New(DOMWindowInternal::openDatabaseCallback, v8::Handle<v8::Value>(), defaultSignature));
    if (RuntimeEnabledFeatures::fileSystemEnabled())
        proto->Set(v8::String::New("webkitRequestFileSystem"), v8::FunctionTemplate::New(DOMWindowInternal::webkitRequestFileSystemCallback, v8::Handle<v8::Value>(), defaultSignature));
    if (RuntimeEnabledFeatures::fileSystemEnabled())
        proto->Set(v8::String::New("webkitResolveLocalFileSystemURL"), v8::FunctionTemplate::New(DOMWindowInternal::webkitResolveLocalFileSystemURLCallback, v8::Handle<v8::Value>(), defaultSignature));

    // Function 'postMessage' (ExtAttr: 'Custom DoNotCheckDomainSecurity')
    proto->SetAccessor(v8::String::New("postMessage"), DOMWindowInternal::postMessageAttrGetter, 0, v8::Handle<v8::Value>(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));

    // Function 'webkitPostMessage' (ExtAttr: 'Custom DoNotCheckDomainSecurity')
    proto->SetAccessor(v8::String::New("webkitPostMessage"), DOMWindowInternal::webkitPostMessageAttrGetter, 0, v8::Handle<v8::Value>(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(DOMWindowInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEventSignature));

    // Function 'toString' (ExtAttr: 'Custom DoNotCheckDomainSecurity V8DoNotCheckSignature DontEnum')
    proto->SetAccessor(v8::String::New("toString"), DOMWindowInternal::toStringAttrGetter, 0, v8::Handle<v8::Value>(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::DontEnum | v8::ReadOnly));
    batchConfigureConstants(desc, proto, DOMWindowConsts, WTF_ARRAY_LENGTH(DOMWindowConsts));

    proto->SetInternalFieldCount(V8DOMWindow::internalFieldCount);
    desc->SetHiddenPrototype(true);
    instance->SetInternalFieldCount(V8DOMWindow::internalFieldCount);
    // Set access check callbacks, but turned off initially.
    // When a context is detached from a frame, turn on the access check.
    // Turning on checks also invalidates inline caches of the object.
    instance->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::External::Wrap(&V8DOMWindow::info), false);

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DOMWindow::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8DOMWindow::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8DOMWindowTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8DOMWindow::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

v8::Persistent<v8::ObjectTemplate> V8DOMWindow::GetShadowObjectTemplate()
{
    static v8::Persistent<v8::ObjectTemplate> V8DOMWindowShadowObjectCache;
    if (V8DOMWindowShadowObjectCache.IsEmpty()) {
        V8DOMWindowShadowObjectCache = v8::Persistent<v8::ObjectTemplate>::New(v8::ObjectTemplate::New());
        ConfigureShadowObjectTemplate(V8DOMWindowShadowObjectCache);
    }
    return V8DOMWindowShadowObjectCache;
}

v8::Handle<v8::Object> V8DOMWindow::wrapSlow(DOMWindow* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8DOMWindow::derefObject(void* object)
{
    static_cast<DOMWindow*>(object)->deref();
}

} // namespace WebCore
