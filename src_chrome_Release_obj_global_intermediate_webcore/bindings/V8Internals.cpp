/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Internals.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8ClientRect.h"
#include "V8DOMWrapper.h"
#include "V8Document.h"
#include "V8Element.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8Proxy.h"
#include "V8Range.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8Internals::info = { V8Internals::GetTemplate, V8Internals::derefObject, 0, 0 };

namespace InternalsInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> elementRenderTreeAsTextCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.elementRenderTreeAsText");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    String result = imp->elementRenderTreeAsText(element, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> isPreloadedCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.isPreloaded");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, url, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return v8Boolean(imp->isPreloaded(document, url));
}

static v8::Handle<v8::Value> ensureShadowRootCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.ensureShadowRoot");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, host, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    RefPtr<Node> result = imp->ensureShadowRoot(host, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> shadowRootCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.shadowRoot");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, host, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    RefPtr<Node> result = imp->shadowRoot(host, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> includerForCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.includerFor");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    RefPtr<Element> result = imp->includerFor(node, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> removeShadowRootCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.removeShadowRoot");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, host, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    imp->removeShadowRoot(host, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> shadowPseudoIdCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.shadowPseudoId");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    String result = imp->shadowPseudoId(element, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> createShadowContentElementCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.createShadowContentElement");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    RefPtr<Element> result = imp->createShadowContentElement(document, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getElementByIdInShadowRootCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.getElementByIdInShadowRoot");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, shadowRoot, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, id, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    RefPtr<Element> result = imp->getElementByIdInShadowRoot(shadowRoot, id, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> disableMemoryCacheCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.disableMemoryCache");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    EXCEPTION_BLOCK(bool, disabled, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->BooleanValue());
    imp->disableMemoryCache(disabled);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setInspectorResourcesDataSizeLimitsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.setInspectorResourcesDataSizeLimits");
    if (args.Length() < 3)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, maximumResourcesContentSize, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, maximumSingleResourceContentSize, toInt32(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)));
    imp->setInspectorResourcesDataSizeLimits(document, maximumResourcesContentSize, maximumSingleResourceContentSize, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> boundingBoxCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.boundingBox");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    RefPtr<ClientRect> result = imp->boundingBox(element, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> markerCountForNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.markerCountForNode");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    unsigned result = imp->markerCountForNode(node, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Integer::NewFromUnsigned(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> markerRangeForNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.markerRangeForNode");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Node*, node, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(unsigned, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    RefPtr<Range> result = imp->markerRangeForNode(node, index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setForceCompositingModeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.setForceCompositingMode");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(bool, enabled, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    imp->setForceCompositingMode(document, enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setZoomAnimatorScaleCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.setZoomAnimatorScale");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(double, scale, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    imp->setZoomAnimatorScale(document, scale, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setPasswordEchoEnabledCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.setPasswordEchoEnabled");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(bool, enabled, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->BooleanValue());
    imp->setPasswordEchoEnabled(document, enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setPasswordEchoDurationInSecondsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.setPasswordEchoDurationInSeconds");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(double, durationInSeconds, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)->NumberValue()));
    imp->setPasswordEchoDurationInSeconds(document, durationInSeconds, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setScrollViewPositionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.setScrollViewPosition");
    if (args.Length() < 3)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Document*, document, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EXCEPTION_BLOCK(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    EXCEPTION_BLOCK(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined)));
    imp->setScrollViewPosition(document, x, y, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> wasLastChangeUserEditCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.wasLastChangeUserEdit");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, textField, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    bool result = imp->wasLastChangeUserEdit(textField, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> suggestedValueCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.suggestedValue");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, inputElement, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    String result = imp->suggestedValue(inputElement, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setSuggestedValueCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Internals.setSuggestedValue");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Internals* imp = V8Internals::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Element*, inputElement, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, value, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    imp->setSuggestedValue(inputElement, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace InternalsInternal

static const BatchedCallback InternalsCallbacks[] = {
    {"disableMemoryCache", InternalsInternal::disableMemoryCacheCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8InternalsTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Internals", v8::Persistent<v8::FunctionTemplate>(), V8Internals::internalFieldCount,
        0, 0,
        InternalsCallbacks, WTF_ARRAY_LENGTH(InternalsCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'elementRenderTreeAsText'
    const int elementRenderTreeAsTextArgc = 1;
    v8::Handle<v8::FunctionTemplate> elementRenderTreeAsTextArgv[elementRenderTreeAsTextArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> elementRenderTreeAsTextSignature = v8::Signature::New(desc, elementRenderTreeAsTextArgc, elementRenderTreeAsTextArgv);
    proto->Set(v8::String::New("elementRenderTreeAsText"), v8::FunctionTemplate::New(InternalsInternal::elementRenderTreeAsTextCallback, v8::Handle<v8::Value>(), elementRenderTreeAsTextSignature));

    // Custom Signature 'isPreloaded'
    const int isPreloadedArgc = 2;
    v8::Handle<v8::FunctionTemplate> isPreloadedArgv[isPreloadedArgc] = { V8Document::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> isPreloadedSignature = v8::Signature::New(desc, isPreloadedArgc, isPreloadedArgv);
    proto->Set(v8::String::New("isPreloaded"), v8::FunctionTemplate::New(InternalsInternal::isPreloadedCallback, v8::Handle<v8::Value>(), isPreloadedSignature));

    // Custom Signature 'ensureShadowRoot'
    const int ensureShadowRootArgc = 1;
    v8::Handle<v8::FunctionTemplate> ensureShadowRootArgv[ensureShadowRootArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> ensureShadowRootSignature = v8::Signature::New(desc, ensureShadowRootArgc, ensureShadowRootArgv);
    proto->Set(v8::String::New("ensureShadowRoot"), v8::FunctionTemplate::New(InternalsInternal::ensureShadowRootCallback, v8::Handle<v8::Value>(), ensureShadowRootSignature));

    // Custom Signature 'shadowRoot'
    const int shadowRootArgc = 1;
    v8::Handle<v8::FunctionTemplate> shadowRootArgv[shadowRootArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> shadowRootSignature = v8::Signature::New(desc, shadowRootArgc, shadowRootArgv);
    proto->Set(v8::String::New("shadowRoot"), v8::FunctionTemplate::New(InternalsInternal::shadowRootCallback, v8::Handle<v8::Value>(), shadowRootSignature));

    // Custom Signature 'includerFor'
    const int includerForArgc = 1;
    v8::Handle<v8::FunctionTemplate> includerForArgv[includerForArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> includerForSignature = v8::Signature::New(desc, includerForArgc, includerForArgv);
    proto->Set(v8::String::New("includerFor"), v8::FunctionTemplate::New(InternalsInternal::includerForCallback, v8::Handle<v8::Value>(), includerForSignature));

    // Custom Signature 'removeShadowRoot'
    const int removeShadowRootArgc = 1;
    v8::Handle<v8::FunctionTemplate> removeShadowRootArgv[removeShadowRootArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> removeShadowRootSignature = v8::Signature::New(desc, removeShadowRootArgc, removeShadowRootArgv);
    proto->Set(v8::String::New("removeShadowRoot"), v8::FunctionTemplate::New(InternalsInternal::removeShadowRootCallback, v8::Handle<v8::Value>(), removeShadowRootSignature));

    // Custom Signature 'shadowPseudoId'
    const int shadowPseudoIdArgc = 1;
    v8::Handle<v8::FunctionTemplate> shadowPseudoIdArgv[shadowPseudoIdArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> shadowPseudoIdSignature = v8::Signature::New(desc, shadowPseudoIdArgc, shadowPseudoIdArgv);
    proto->Set(v8::String::New("shadowPseudoId"), v8::FunctionTemplate::New(InternalsInternal::shadowPseudoIdCallback, v8::Handle<v8::Value>(), shadowPseudoIdSignature));

    // Custom Signature 'createShadowContentElement'
    const int createShadowContentElementArgc = 1;
    v8::Handle<v8::FunctionTemplate> createShadowContentElementArgv[createShadowContentElementArgc] = { V8Document::GetRawTemplate() };
    v8::Handle<v8::Signature> createShadowContentElementSignature = v8::Signature::New(desc, createShadowContentElementArgc, createShadowContentElementArgv);
    proto->Set(v8::String::New("createShadowContentElement"), v8::FunctionTemplate::New(InternalsInternal::createShadowContentElementCallback, v8::Handle<v8::Value>(), createShadowContentElementSignature));

    // Custom Signature 'getElementByIdInShadowRoot'
    const int getElementByIdInShadowRootArgc = 2;
    v8::Handle<v8::FunctionTemplate> getElementByIdInShadowRootArgv[getElementByIdInShadowRootArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> getElementByIdInShadowRootSignature = v8::Signature::New(desc, getElementByIdInShadowRootArgc, getElementByIdInShadowRootArgv);
    proto->Set(v8::String::New("getElementByIdInShadowRoot"), v8::FunctionTemplate::New(InternalsInternal::getElementByIdInShadowRootCallback, v8::Handle<v8::Value>(), getElementByIdInShadowRootSignature));

    // Custom Signature 'setInspectorResourcesDataSizeLimits'
    const int setInspectorResourcesDataSizeLimitsArgc = 3;
    v8::Handle<v8::FunctionTemplate> setInspectorResourcesDataSizeLimitsArgv[setInspectorResourcesDataSizeLimitsArgc] = { V8Document::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setInspectorResourcesDataSizeLimitsSignature = v8::Signature::New(desc, setInspectorResourcesDataSizeLimitsArgc, setInspectorResourcesDataSizeLimitsArgv);
    proto->Set(v8::String::New("setInspectorResourcesDataSizeLimits"), v8::FunctionTemplate::New(InternalsInternal::setInspectorResourcesDataSizeLimitsCallback, v8::Handle<v8::Value>(), setInspectorResourcesDataSizeLimitsSignature));

    // Custom Signature 'boundingBox'
    const int boundingBoxArgc = 1;
    v8::Handle<v8::FunctionTemplate> boundingBoxArgv[boundingBoxArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> boundingBoxSignature = v8::Signature::New(desc, boundingBoxArgc, boundingBoxArgv);
    proto->Set(v8::String::New("boundingBox"), v8::FunctionTemplate::New(InternalsInternal::boundingBoxCallback, v8::Handle<v8::Value>(), boundingBoxSignature));

    // Custom Signature 'markerCountForNode'
    const int markerCountForNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> markerCountForNodeArgv[markerCountForNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> markerCountForNodeSignature = v8::Signature::New(desc, markerCountForNodeArgc, markerCountForNodeArgv);
    proto->Set(v8::String::New("markerCountForNode"), v8::FunctionTemplate::New(InternalsInternal::markerCountForNodeCallback, v8::Handle<v8::Value>(), markerCountForNodeSignature));

    // Custom Signature 'markerRangeForNode'
    const int markerRangeForNodeArgc = 2;
    v8::Handle<v8::FunctionTemplate> markerRangeForNodeArgv[markerRangeForNodeArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> markerRangeForNodeSignature = v8::Signature::New(desc, markerRangeForNodeArgc, markerRangeForNodeArgv);
    proto->Set(v8::String::New("markerRangeForNode"), v8::FunctionTemplate::New(InternalsInternal::markerRangeForNodeCallback, v8::Handle<v8::Value>(), markerRangeForNodeSignature));

    // Custom Signature 'setForceCompositingMode'
    const int setForceCompositingModeArgc = 2;
    v8::Handle<v8::FunctionTemplate> setForceCompositingModeArgv[setForceCompositingModeArgc] = { V8Document::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setForceCompositingModeSignature = v8::Signature::New(desc, setForceCompositingModeArgc, setForceCompositingModeArgv);
    proto->Set(v8::String::New("setForceCompositingMode"), v8::FunctionTemplate::New(InternalsInternal::setForceCompositingModeCallback, v8::Handle<v8::Value>(), setForceCompositingModeSignature));

    // Custom Signature 'setZoomAnimatorScale'
    const int setZoomAnimatorScaleArgc = 2;
    v8::Handle<v8::FunctionTemplate> setZoomAnimatorScaleArgv[setZoomAnimatorScaleArgc] = { V8Document::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setZoomAnimatorScaleSignature = v8::Signature::New(desc, setZoomAnimatorScaleArgc, setZoomAnimatorScaleArgv);
    proto->Set(v8::String::New("setZoomAnimatorScale"), v8::FunctionTemplate::New(InternalsInternal::setZoomAnimatorScaleCallback, v8::Handle<v8::Value>(), setZoomAnimatorScaleSignature));

    // Custom Signature 'setPasswordEchoEnabled'
    const int setPasswordEchoEnabledArgc = 2;
    v8::Handle<v8::FunctionTemplate> setPasswordEchoEnabledArgv[setPasswordEchoEnabledArgc] = { V8Document::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setPasswordEchoEnabledSignature = v8::Signature::New(desc, setPasswordEchoEnabledArgc, setPasswordEchoEnabledArgv);
    proto->Set(v8::String::New("setPasswordEchoEnabled"), v8::FunctionTemplate::New(InternalsInternal::setPasswordEchoEnabledCallback, v8::Handle<v8::Value>(), setPasswordEchoEnabledSignature));

    // Custom Signature 'setPasswordEchoDurationInSeconds'
    const int setPasswordEchoDurationInSecondsArgc = 2;
    v8::Handle<v8::FunctionTemplate> setPasswordEchoDurationInSecondsArgv[setPasswordEchoDurationInSecondsArgc] = { V8Document::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setPasswordEchoDurationInSecondsSignature = v8::Signature::New(desc, setPasswordEchoDurationInSecondsArgc, setPasswordEchoDurationInSecondsArgv);
    proto->Set(v8::String::New("setPasswordEchoDurationInSeconds"), v8::FunctionTemplate::New(InternalsInternal::setPasswordEchoDurationInSecondsCallback, v8::Handle<v8::Value>(), setPasswordEchoDurationInSecondsSignature));

    // Custom Signature 'setScrollViewPosition'
    const int setScrollViewPositionArgc = 3;
    v8::Handle<v8::FunctionTemplate> setScrollViewPositionArgv[setScrollViewPositionArgc] = { V8Document::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setScrollViewPositionSignature = v8::Signature::New(desc, setScrollViewPositionArgc, setScrollViewPositionArgv);
    proto->Set(v8::String::New("setScrollViewPosition"), v8::FunctionTemplate::New(InternalsInternal::setScrollViewPositionCallback, v8::Handle<v8::Value>(), setScrollViewPositionSignature));

    // Custom Signature 'wasLastChangeUserEdit'
    const int wasLastChangeUserEditArgc = 1;
    v8::Handle<v8::FunctionTemplate> wasLastChangeUserEditArgv[wasLastChangeUserEditArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> wasLastChangeUserEditSignature = v8::Signature::New(desc, wasLastChangeUserEditArgc, wasLastChangeUserEditArgv);
    proto->Set(v8::String::New("wasLastChangeUserEdit"), v8::FunctionTemplate::New(InternalsInternal::wasLastChangeUserEditCallback, v8::Handle<v8::Value>(), wasLastChangeUserEditSignature));

    // Custom Signature 'suggestedValue'
    const int suggestedValueArgc = 1;
    v8::Handle<v8::FunctionTemplate> suggestedValueArgv[suggestedValueArgc] = { V8Element::GetRawTemplate() };
    v8::Handle<v8::Signature> suggestedValueSignature = v8::Signature::New(desc, suggestedValueArgc, suggestedValueArgv);
    proto->Set(v8::String::New("suggestedValue"), v8::FunctionTemplate::New(InternalsInternal::suggestedValueCallback, v8::Handle<v8::Value>(), suggestedValueSignature));

    // Custom Signature 'setSuggestedValue'
    const int setSuggestedValueArgc = 2;
    v8::Handle<v8::FunctionTemplate> setSuggestedValueArgv[setSuggestedValueArgc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setSuggestedValueSignature = v8::Signature::New(desc, setSuggestedValueArgc, setSuggestedValueArgv);
    proto->Set(v8::String::New("setSuggestedValue"), v8::FunctionTemplate::New(InternalsInternal::setSuggestedValueCallback, v8::Handle<v8::Value>(), setSuggestedValueSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Internals::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Internals::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8InternalsTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Internals::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Internals::wrapSlow(Internals* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8Internals::derefObject(void* object)
{
    static_cast<Internals*>(object)->deref();
}

} // namespace WebCore
