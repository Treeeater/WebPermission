/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8NodeIterator.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8NodeFilter.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8NodeIterator::info = { V8NodeIterator::GetTemplate, V8NodeIterator::derefObject, 0, 0 };

namespace NodeIteratorInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> rootAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.NodeIterator.root._get");
    NodeIterator* imp = V8NodeIterator::toNative(info.Holder());
    return toV8(imp->root());
}

static v8::Handle<v8::Value> whatToShowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.NodeIterator.whatToShow._get");
    NodeIterator* imp = V8NodeIterator::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->whatToShow());
}

static v8::Handle<v8::Value> filterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.NodeIterator.filter._get");
    NodeIterator* imp = V8NodeIterator::toNative(info.Holder());
    return toV8(imp->filter());
}

static v8::Handle<v8::Value> expandEntityReferencesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.NodeIterator.expandEntityReferences._get");
    NodeIterator* imp = V8NodeIterator::toNative(info.Holder());
    return v8Boolean(imp->expandEntityReferences());
}

static v8::Handle<v8::Value> referenceNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.NodeIterator.referenceNode._get");
    NodeIterator* imp = V8NodeIterator::toNative(info.Holder());
    return toV8(imp->referenceNode());
}

static v8::Handle<v8::Value> pointerBeforeReferenceNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.NodeIterator.pointerBeforeReferenceNode._get");
    NodeIterator* imp = V8NodeIterator::toNative(info.Holder());
    return v8Boolean(imp->pointerBeforeReferenceNode());
}

static v8::Handle<v8::Value> nextNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.NodeIterator.nextNode");
    NodeIterator* imp = V8NodeIterator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EmptyScriptState state;
    RefPtr<Node> result = imp->nextNode(&state, ec);
    if (UNLIKELY(ec))
        goto fail;
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> previousNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.NodeIterator.previousNode");
    NodeIterator* imp = V8NodeIterator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EmptyScriptState state;
    RefPtr<Node> result = imp->previousNode(&state, ec);
    if (UNLIKELY(ec))
        goto fail;
    if (state.hadException())
        return throwError(state.exception());
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> detachCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.NodeIterator.detach");
    NodeIterator* imp = V8NodeIterator::toNative(args.Holder());
    imp->detach();
    return v8::Handle<v8::Value>();
}

} // namespace NodeIteratorInternal

static const BatchedAttribute NodeIteratorAttrs[] = {
    // Attribute 'root' (Type: 'readonly attribute' ExtAttr: '')
    {"root", NodeIteratorInternal::rootAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'whatToShow' (Type: 'readonly attribute' ExtAttr: '')
    {"whatToShow", NodeIteratorInternal::whatToShowAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'filter' (Type: 'readonly attribute' ExtAttr: '')
    {"filter", NodeIteratorInternal::filterAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'expandEntityReferences' (Type: 'readonly attribute' ExtAttr: '')
    {"expandEntityReferences", NodeIteratorInternal::expandEntityReferencesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'referenceNode' (Type: 'readonly attribute' ExtAttr: '')
    {"referenceNode", NodeIteratorInternal::referenceNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pointerBeforeReferenceNode' (Type: 'readonly attribute' ExtAttr: '')
    {"pointerBeforeReferenceNode", NodeIteratorInternal::pointerBeforeReferenceNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback NodeIteratorCallbacks[] = {
    {"nextNode", NodeIteratorInternal::nextNodeCallback},
    {"previousNode", NodeIteratorInternal::previousNodeCallback},
    {"detach", NodeIteratorInternal::detachCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NodeIteratorTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "NodeIterator", v8::Persistent<v8::FunctionTemplate>(), V8NodeIterator::internalFieldCount,
        NodeIteratorAttrs, WTF_ARRAY_LENGTH(NodeIteratorAttrs),
        NodeIteratorCallbacks, WTF_ARRAY_LENGTH(NodeIteratorCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8NodeIterator::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8NodeIterator::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NodeIteratorTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8NodeIterator::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8NodeIterator::wrapSlow(NodeIterator* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8NodeIterator::derefObject(void* object)
{
    static_cast<NodeIterator*>(object)->deref();
}

} // namespace WebCore
