/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8DataTransferItem.h"

#if ENABLE(DATA_TRANSFER_ITEMS)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8Blob.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include "V8StringCallback.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8DataTransferItem::info = { V8DataTransferItem::GetTemplate, V8DataTransferItem::derefObject, 0, 0 };

namespace DataTransferItemInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> kindAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DataTransferItem.kind._get");
    DataTransferItem* imp = V8DataTransferItem::toNative(info.Holder());
    return v8String(imp->kind());
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.DataTransferItem.type._get");
    DataTransferItem* imp = V8DataTransferItem::toNative(info.Holder());
    return v8String(imp->type());
}

static v8::Handle<v8::Value> getAsStringCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataTransferItem.getAsString");
    DataTransferItem* imp = V8DataTransferItem::toNative(args.Holder());
    RefPtr<StringCallback> callback;
    if (args.Length() > 0 && !args[0]->IsNull() && !args[0]->IsUndefined()) {
        if (!args[0]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        callback = V8StringCallback::create(args[0], getScriptExecutionContext());
    }
    imp->getAsString(callback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getAsFileCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.DataTransferItem.getAsFile");
    DataTransferItem* imp = V8DataTransferItem::toNative(args.Holder());
    return toV8(imp->getAsFile());
}

} // namespace DataTransferItemInternal

static const BatchedAttribute DataTransferItemAttrs[] = {
    // Attribute 'kind' (Type: 'readonly attribute' ExtAttr: '')
    {"kind", DataTransferItemInternal::kindAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", DataTransferItemInternal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback DataTransferItemCallbacks[] = {
    {"getAsString", DataTransferItemInternal::getAsStringCallback},
    {"getAsFile", DataTransferItemInternal::getAsFileCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8DataTransferItemTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "DataTransferItem", v8::Persistent<v8::FunctionTemplate>(), V8DataTransferItem::internalFieldCount,
        DataTransferItemAttrs, WTF_ARRAY_LENGTH(DataTransferItemAttrs),
        DataTransferItemCallbacks, WTF_ARRAY_LENGTH(DataTransferItemCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DataTransferItem::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8DataTransferItem::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8DataTransferItemTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8DataTransferItem::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DataTransferItem::wrapSlow(DataTransferItem* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8DataTransferItem::derefObject(void* object)
{
    static_cast<DataTransferItem*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(DATA_TRANSFER_ITEMS)
