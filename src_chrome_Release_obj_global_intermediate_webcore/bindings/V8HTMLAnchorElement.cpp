/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLAnchorElement.h"

#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8HTMLAnchorElement::info = { V8HTMLAnchorElement::GetTemplate, V8HTMLAnchorElement::derefObject, 0, &V8HTMLElement::info };

namespace HTMLAnchorElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> accessKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.accessKey._get");
    return getElementStringAttr(info, HTMLNames::accesskeyAttr);
}

static void accessKeyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.accessKey._set");
    setElementStringAttr(info, HTMLNames::accesskeyAttr, value);
}

static v8::Handle<v8::Value> charsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.charset._get");
    return getElementStringAttr(info, HTMLNames::charsetAttr);
}

static void charsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.charset._set");
    setElementStringAttr(info, HTMLNames::charsetAttr, value);
}

static v8::Handle<v8::Value> coordsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.coords._get");
    return getElementStringAttr(info, HTMLNames::coordsAttr);
}

static void coordsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.coords._set");
    setElementStringAttr(info, HTMLNames::coordsAttr, value);
}

#if ENABLE(DOWNLOAD_ATTRIBUTE)

static v8::Handle<v8::Value> downloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.download._get");
    return getElementStringAttr(info, HTMLNames::downloadAttr);
}

#endif // ENABLE(DOWNLOAD_ATTRIBUTE)

#if ENABLE(DOWNLOAD_ATTRIBUTE)

static void downloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.download._set");
    setElementStringAttr(info, HTMLNames::downloadAttr, value);
}

#endif // ENABLE(DOWNLOAD_ATTRIBUTE)

static v8::Handle<v8::Value> hrefAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.href._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::hrefAttr));
}

static void hrefAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.href._set");
    setElementStringAttr(info, HTMLNames::hrefAttr, value);
}

static v8::Handle<v8::Value> hreflangAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.hreflang._get");
    return getElementStringAttr(info, HTMLNames::hreflangAttr);
}

static void hreflangAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.hreflang._set");
    setElementStringAttr(info, HTMLNames::hreflangAttr, value);
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
}

static v8::Handle<v8::Value> pingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.ping._get");
    return getElementStringAttr(info, HTMLNames::pingAttr);
}

static void pingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.ping._set");
    setElementStringAttr(info, HTMLNames::pingAttr, value);
}

static v8::Handle<v8::Value> relAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.rel._get");
    return getElementStringAttr(info, HTMLNames::relAttr);
}

static void relAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.rel._set");
    setElementStringAttr(info, HTMLNames::relAttr, value);
}

static v8::Handle<v8::Value> revAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.rev._get");
    return getElementStringAttr(info, HTMLNames::revAttr);
}

static void revAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.rev._set");
    setElementStringAttr(info, HTMLNames::revAttr, value);
}

static v8::Handle<v8::Value> shapeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.shape._get");
    return getElementStringAttr(info, HTMLNames::shapeAttr);
}

static void shapeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.shape._set");
    setElementStringAttr(info, HTMLNames::shapeAttr, value);
}

static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.target._get");
    return getElementStringAttr(info, HTMLNames::targetAttr);
}

static void targetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.target._set");
    setElementStringAttr(info, HTMLNames::targetAttr, value);
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.type._get");
    return getElementStringAttr(info, HTMLNames::typeAttr);
}

static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.type._set");
    setElementStringAttr(info, HTMLNames::typeAttr, value);
}

static v8::Handle<v8::Value> hashAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.hash._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->hash());
}

static void hashAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.hash._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setHash(v);
    return;
}

static v8::Handle<v8::Value> hostAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.host._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->host());
}

static void hostAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.host._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setHost(v);
    return;
}

static v8::Handle<v8::Value> hostnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.hostname._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->hostname());
}

static void hostnameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.hostname._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setHostname(v);
    return;
}

static v8::Handle<v8::Value> pathnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.pathname._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->pathname());
}

static void pathnameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.pathname._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setPathname(v);
    return;
}

static v8::Handle<v8::Value> portAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.port._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->port());
}

static void portAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.port._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setPort(v);
    return;
}

static v8::Handle<v8::Value> protocolAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.protocol._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->protocol());
}

static void protocolAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.protocol._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setProtocol(v);
    return;
}

static v8::Handle<v8::Value> searchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.search._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->search());
}

static void searchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.search._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK_VOID(V8Parameter<WithNullCheck>, v, value);
    imp->setSearch(v);
    return;
}

static v8::Handle<v8::Value> originAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.origin._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->origin());
}

static v8::Handle<v8::Value> textAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLAnchorElement.text._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->text());
}

static v8::Handle<v8::Value> getParameterCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLAnchorElement.getParameter");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8String(imp->getParameter(name));
}

static v8::Handle<v8::Value> toStringCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLAnchorElement.toString");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(args.Holder());
    return v8String(imp->toString());
}

} // namespace HTMLAnchorElementInternal

static const BatchedAttribute HTMLAnchorElementAttrs[] = {
    // Attribute 'accessKey' (Type: 'attribute' ExtAttr: 'Reflect')
    {"accessKey", HTMLAnchorElementInternal::accessKeyAttrGetter, HTMLAnchorElementInternal::accessKeyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'charset' (Type: 'attribute' ExtAttr: 'Reflect')
    {"charset", HTMLAnchorElementInternal::charsetAttrGetter, HTMLAnchorElementInternal::charsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'coords' (Type: 'attribute' ExtAttr: 'Reflect')
    {"coords", HTMLAnchorElementInternal::coordsAttrGetter, HTMLAnchorElementInternal::coordsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(DOWNLOAD_ATTRIBUTE)
    // Attribute 'download' (Type: 'attribute' ExtAttr: 'Reflect Conditional')
    {"download", HTMLAnchorElementInternal::downloadAttrGetter, HTMLAnchorElementInternal::downloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(DOWNLOAD_ATTRIBUTE)
    // Attribute 'href' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"href", HTMLAnchorElementInternal::hrefAttrGetter, HTMLAnchorElementInternal::hrefAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'hreflang' (Type: 'attribute' ExtAttr: 'Reflect')
    {"hreflang", HTMLAnchorElementInternal::hreflangAttrGetter, HTMLAnchorElementInternal::hreflangAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLAnchorElementInternal::nameAttrGetter, HTMLAnchorElementInternal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ping' (Type: 'attribute' ExtAttr: 'Reflect')
    {"ping", HTMLAnchorElementInternal::pingAttrGetter, HTMLAnchorElementInternal::pingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rel' (Type: 'attribute' ExtAttr: 'Reflect')
    {"rel", HTMLAnchorElementInternal::relAttrGetter, HTMLAnchorElementInternal::relAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rev' (Type: 'attribute' ExtAttr: 'Reflect')
    {"rev", HTMLAnchorElementInternal::revAttrGetter, HTMLAnchorElementInternal::revAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'shape' (Type: 'attribute' ExtAttr: 'Reflect')
    {"shape", HTMLAnchorElementInternal::shapeAttrGetter, HTMLAnchorElementInternal::shapeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'target' (Type: 'attribute' ExtAttr: 'Reflect')
    {"target", HTMLAnchorElementInternal::targetAttrGetter, HTMLAnchorElementInternal::targetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'attribute' ExtAttr: 'Reflect')
    {"type", HTMLAnchorElementInternal::typeAttrGetter, HTMLAnchorElementInternal::typeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'hash' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"hash", HTMLAnchorElementInternal::hashAttrGetter, HTMLAnchorElementInternal::hashAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'host' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"host", HTMLAnchorElementInternal::hostAttrGetter, HTMLAnchorElementInternal::hostAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'hostname' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"hostname", HTMLAnchorElementInternal::hostnameAttrGetter, HTMLAnchorElementInternal::hostnameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pathname' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"pathname", HTMLAnchorElementInternal::pathnameAttrGetter, HTMLAnchorElementInternal::pathnameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'port' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"port", HTMLAnchorElementInternal::portAttrGetter, HTMLAnchorElementInternal::portAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'protocol' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"protocol", HTMLAnchorElementInternal::protocolAttrGetter, HTMLAnchorElementInternal::protocolAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'search' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
    {"search", HTMLAnchorElementInternal::searchAttrGetter, HTMLAnchorElementInternal::searchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'origin' (Type: 'readonly attribute' ExtAttr: 'ConvertNullToNullString')
    {"origin", HTMLAnchorElementInternal::originAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'text' (Type: 'readonly attribute' ExtAttr: '')
    {"text", HTMLAnchorElementInternal::textAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback HTMLAnchorElementCallbacks[] = {
    {"getParameter", HTMLAnchorElementInternal::getParameterCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLAnchorElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLAnchorElement", V8HTMLElement::GetTemplate(), V8HTMLAnchorElement::internalFieldCount,
        HTMLAnchorElementAttrs, WTF_ARRAY_LENGTH(HTMLAnchorElementAttrs),
        HTMLAnchorElementCallbacks, WTF_ARRAY_LENGTH(HTMLAnchorElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    
    proto->Set(v8::String::New("toString"), v8::FunctionTemplate::New(HTMLAnchorElementInternal::toStringCallback, v8::Handle<v8::Value>(), defaultSignature), static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::DontEnum));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLAnchorElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLAnchorElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLAnchorElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLAnchorElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLAnchorElement::wrapSlow(HTMLAnchorElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLAnchorElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLAnchorElement::derefObject(void* object)
{
    static_cast<HTMLAnchorElement*>(object)->deref();
}

} // namespace WebCore
