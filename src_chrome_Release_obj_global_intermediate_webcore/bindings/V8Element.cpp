/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Element.h"

#include "CSSMutableStyleDeclaration.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Attr.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CSSStyleDeclaration.h"
#include "V8ClientRect.h"
#include "V8ClientRectList.h"
#include "V8DOMStringMap.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8NodeList.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8Element::info = { V8Element::GetTemplate, V8Element::derefObject, 0, &V8Node::info };

namespace ElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> tagNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.tagName._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8StringOrNull(imp->tagName());
}

static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.style._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->style());
}

static v8::Handle<v8::Value> offsetLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.offsetLeft._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetLeft());
}

static v8::Handle<v8::Value> offsetTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.offsetTop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetTop());
}

static v8::Handle<v8::Value> offsetWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.offsetWidth._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetWidth());
}

static v8::Handle<v8::Value> offsetHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.offsetHeight._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetHeight());
}

static v8::Handle<v8::Value> offsetParentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.offsetParent._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->offsetParent());
}

static v8::Handle<v8::Value> clientLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.clientLeft._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientLeft());
}

static v8::Handle<v8::Value> clientTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.clientTop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientTop());
}

static v8::Handle<v8::Value> clientWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.clientWidth._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientWidth());
}

static v8::Handle<v8::Value> clientHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.clientHeight._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientHeight());
}

static v8::Handle<v8::Value> scrollLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.scrollLeft._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollLeft());
}

static void scrollLeftAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.scrollLeft._set");
    Element* imp = V8Element::toNative(info.Holder());
    int v = toInt32(value);
    imp->setScrollLeft(v);
    return;
}

static v8::Handle<v8::Value> scrollTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.scrollTop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollTop());
}

static void scrollTopAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.scrollTop._set");
    Element* imp = V8Element::toNative(info.Holder());
    int v = toInt32(value);
    imp->setScrollTop(v);
    return;
}

static v8::Handle<v8::Value> scrollWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.scrollWidth._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollWidth());
}

static v8::Handle<v8::Value> scrollHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.scrollHeight._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollHeight());
}

static v8::Handle<v8::Value> datasetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.dataset._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->dataset());
}

static v8::Handle<v8::Value> firstElementChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.firstElementChild._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->firstElementChild());
}

static v8::Handle<v8::Value> lastElementChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.lastElementChild._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->lastElementChild());
}

static v8::Handle<v8::Value> previousElementSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.previousElementSibling._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->previousElementSibling());
}

static v8::Handle<v8::Value> nextElementSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.nextElementSibling._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->nextElementSibling());
}

static v8::Handle<v8::Value> childElementCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.childElementCount._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->childElementCount());
}

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onabort._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onabort._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onblur._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onblur._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onchange._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onchange._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onclick._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onclick._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oncontextmenu._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oncontextmenu._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondblclick._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondblclick._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndblclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondrag._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondrag._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndrag(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragend._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragend._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragenter._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragenter._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragenter(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragleave._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragleave._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragleave(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragover._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragover._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragstart._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondragstart._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondrop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ondrop._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndrop(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onerror._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onerror._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onfocus._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onfocus._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oninput._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oninput._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOninput(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oninvalid._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oninvalid._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOninvalid(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onkeydown._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onkeydown._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnkeydown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onkeypress._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onkeypress._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnkeypress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onkeyup._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onkeyup._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnkeyup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onload._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onload._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmousedown._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmousedown._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmousedown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmousemove._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmousemove._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmousemove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmouseout._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmouseout._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmouseout(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmouseover._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmouseover._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmouseover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmouseup._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmouseup._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmouseup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmousewheel._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onmousewheel._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onscroll._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onscroll._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnscroll(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onselect._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onselect._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnselect(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onsubmit._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onsubmit._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnsubmit(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onbeforecut._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforecut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforecutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onbeforecut._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnbeforecut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oncut._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oncut._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOncut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onbeforecopy._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforecopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforecopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onbeforecopy._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnbeforecopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oncopy._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void oncopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.oncopy._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOncopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforepasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onbeforepaste._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforepaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforepaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onbeforepasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onbeforepaste._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnbeforepaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onpaste._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onpaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onpasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onpaste._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnpaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onreset._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onreset._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnreset(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onsearch._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onsearch._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnsearch(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onselectstart._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onselectstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onselectstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onselectstart._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnselectstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchstart._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchstart._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchmove._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchmove._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchmove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchend._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchend._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchcancel._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.ontouchcancel._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> onwebkitfullscreenchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onwebkitfullscreenchange._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onwebkitfullscreenchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitfullscreenchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static void onwebkitfullscreenchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Element.onwebkitfullscreenchange._set");
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnwebkitfullscreenchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> getAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getAttribute");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8StringOrNull(imp->getAttribute(name));
}

static v8::Handle<v8::Value> setAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.setAttribute");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, value, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    imp->setAttribute(name, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> removeAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.removeAttribute");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->removeAttribute(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getAttributeNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getAttributeNode");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getAttributeNode(name));
}

static v8::Handle<v8::Value> setAttributeNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.setAttributeNode");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Attr* newAttr = V8Attr::HasInstance(args[0]) ? V8Attr::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    if (UNLIKELY(!newAttr)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    RefPtr<Attr> result = imp->setAttributeNode(newAttr, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> removeAttributeNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.removeAttributeNode");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Attr* oldAttr = V8Attr::HasInstance(args[0]) ? V8Attr::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    if (UNLIKELY(!oldAttr)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    RefPtr<Attr> result = imp->removeAttributeNode(oldAttr, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getElementsByTagName");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getElementsByTagName(name));
}

static v8::Handle<v8::Value> getAttributeNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getAttributeNS");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, localName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return v8String(imp->getAttributeNS(namespaceURI, localName));
}

static v8::Handle<v8::Value> setAttributeNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.setAttributeNS");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, qualifiedName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, value, MAYBE_MISSING_PARAMETER(args, 2, MissingIsUndefined));
    imp->setAttributeNS(namespaceURI, qualifiedName, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> removeAttributeNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.removeAttributeNS");
    if (args.Length() < 2)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, localName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    imp->removeAttributeNS(namespaceURI, localName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getElementsByTagNameNS");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, localName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return toV8(imp->getElementsByTagNameNS(namespaceURI, localName));
}

static v8::Handle<v8::Value> getAttributeNodeNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getAttributeNodeNS");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, localName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return toV8(imp->getAttributeNodeNS(namespaceURI, localName));
}

static v8::Handle<v8::Value> setAttributeNodeNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.setAttributeNodeNS");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Attr* newAttr = V8Attr::HasInstance(args[0]) ? V8Attr::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    if (UNLIKELY(!newAttr)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    RefPtr<Attr> result = imp->setAttributeNodeNS(newAttr, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> hasAttributeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.hasAttribute");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return v8Boolean(imp->hasAttribute(name));
}

static v8::Handle<v8::Value> hasAttributeNSCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.hasAttributeNS");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, localName, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    return v8Boolean(imp->hasAttributeNS(namespaceURI, localName));
}

static v8::Handle<v8::Value> focusCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.focus");
    Element* imp = V8Element::toNative(args.Holder());
    imp->focus();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> blurCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.blur");
    Element* imp = V8Element::toNative(args.Holder());
    imp->blur();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> scrollIntoViewCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.scrollIntoView");
    Element* imp = V8Element::toNative(args.Holder());
    if (args.Length() <= 0) {
        imp->scrollIntoView();
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, alignWithTop, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->BooleanValue());
    imp->scrollIntoView(alignWithTop);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> scrollIntoViewIfNeededCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.scrollIntoViewIfNeeded");
    Element* imp = V8Element::toNative(args.Holder());
    if (args.Length() <= 0) {
        imp->scrollIntoViewIfNeeded();
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(bool, centerIfNeeded, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)->BooleanValue());
    imp->scrollIntoViewIfNeeded(centerIfNeeded);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> scrollByLinesCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.scrollByLines");
    Element* imp = V8Element::toNative(args.Holder());
    EXCEPTION_BLOCK(int, lines, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->scrollByLines(lines);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> scrollByPagesCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.scrollByPages");
    Element* imp = V8Element::toNative(args.Holder());
    EXCEPTION_BLOCK(int, pages, toInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->scrollByPages(pages);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getElementsByClassName");
    Element* imp = V8Element::toNative(args.Holder());
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    return toV8(imp->getElementsByClassName(name));
}

static v8::Handle<v8::Value> querySelectorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.querySelector");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<Element> result = imp->querySelector(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> querySelectorAllCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.querySelectorAll");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    RefPtr<NodeList> result = imp->querySelectorAll(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitMatchesSelectorCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.webkitMatchesSelector");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    bool result = imp->webkitMatchesSelector(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getClientRectsCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getClientRects");
    Element* imp = V8Element::toNative(args.Holder());
    return toV8(imp->getClientRects());
}

static v8::Handle<v8::Value> getBoundingClientRectCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.getBoundingClientRect");
    Element* imp = V8Element::toNative(args.Holder());
    return toV8(imp->getBoundingClientRect());
}

static v8::Handle<v8::Value> webkitRequestFullScreenCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Element.webkitRequestFullScreen");
    Element* imp = V8Element::toNative(args.Holder());
    EXCEPTION_BLOCK(int, flags, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    imp->webkitRequestFullScreen(flags);
    return v8::Handle<v8::Value>();
}

} // namespace ElementInternal

static const BatchedAttribute ElementAttrs[] = {
    // Attribute 'tagName' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
    {"tagName", ElementInternal::tagNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
    {"style", ElementInternal::styleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetLeft' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetLeft", ElementInternal::offsetLeftAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetTop' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetTop", ElementInternal::offsetTopAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetWidth", ElementInternal::offsetWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetHeight", ElementInternal::offsetHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetParent' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetParent", ElementInternal::offsetParentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientLeft' (Type: 'readonly attribute' ExtAttr: '')
    {"clientLeft", ElementInternal::clientLeftAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientTop' (Type: 'readonly attribute' ExtAttr: '')
    {"clientTop", ElementInternal::clientTopAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"clientWidth", ElementInternal::clientWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"clientHeight", ElementInternal::clientHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollLeft' (Type: 'attribute' ExtAttr: '')
    {"scrollLeft", ElementInternal::scrollLeftAttrGetter, ElementInternal::scrollLeftAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollTop' (Type: 'attribute' ExtAttr: '')
    {"scrollTop", ElementInternal::scrollTopAttrGetter, ElementInternal::scrollTopAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"scrollWidth", ElementInternal::scrollWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"scrollHeight", ElementInternal::scrollHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'dataset' (Type: 'readonly attribute' ExtAttr: '')
    {"dataset", ElementInternal::datasetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'firstElementChild' (Type: 'readonly attribute' ExtAttr: '')
    {"firstElementChild", ElementInternal::firstElementChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastElementChild' (Type: 'readonly attribute' ExtAttr: '')
    {"lastElementChild", ElementInternal::lastElementChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'previousElementSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"previousElementSibling", ElementInternal::previousElementSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nextElementSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"nextElementSibling", ElementInternal::nextElementSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'childElementCount' (Type: 'readonly attribute' ExtAttr: '')
    {"childElementCount", ElementInternal::childElementCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onabort", ElementInternal::onabortAttrGetter, ElementInternal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onblur", ElementInternal::onblurAttrGetter, ElementInternal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onchange", ElementInternal::onchangeAttrGetter, ElementInternal::onchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onclick", ElementInternal::onclickAttrGetter, ElementInternal::onclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oncontextmenu", ElementInternal::oncontextmenuAttrGetter, ElementInternal::oncontextmenuAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondblclick", ElementInternal::ondblclickAttrGetter, ElementInternal::ondblclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondrag", ElementInternal::ondragAttrGetter, ElementInternal::ondragAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragend", ElementInternal::ondragendAttrGetter, ElementInternal::ondragendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragenter", ElementInternal::ondragenterAttrGetter, ElementInternal::ondragenterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragleave", ElementInternal::ondragleaveAttrGetter, ElementInternal::ondragleaveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragover", ElementInternal::ondragoverAttrGetter, ElementInternal::ondragoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondragstart", ElementInternal::ondragstartAttrGetter, ElementInternal::ondragstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"ondrop", ElementInternal::ondropAttrGetter, ElementInternal::ondropAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onerror", ElementInternal::onerrorAttrGetter, ElementInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onfocus", ElementInternal::onfocusAttrGetter, ElementInternal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oninput", ElementInternal::oninputAttrGetter, ElementInternal::oninputAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oninvalid", ElementInternal::oninvalidAttrGetter, ElementInternal::oninvalidAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onkeydown", ElementInternal::onkeydownAttrGetter, ElementInternal::onkeydownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onkeypress", ElementInternal::onkeypressAttrGetter, ElementInternal::onkeypressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onkeyup", ElementInternal::onkeyupAttrGetter, ElementInternal::onkeyupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onload", ElementInternal::onloadAttrGetter, ElementInternal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmousedown", ElementInternal::onmousedownAttrGetter, ElementInternal::onmousedownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmousemove", ElementInternal::onmousemoveAttrGetter, ElementInternal::onmousemoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmouseout", ElementInternal::onmouseoutAttrGetter, ElementInternal::onmouseoutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmouseover", ElementInternal::onmouseoverAttrGetter, ElementInternal::onmouseoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmouseup", ElementInternal::onmouseupAttrGetter, ElementInternal::onmouseupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onmousewheel", ElementInternal::onmousewheelAttrGetter, ElementInternal::onmousewheelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onscroll", ElementInternal::onscrollAttrGetter, ElementInternal::onscrollAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onselect", ElementInternal::onselectAttrGetter, ElementInternal::onselectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onsubmit", ElementInternal::onsubmitAttrGetter, ElementInternal::onsubmitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecut' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onbeforecut", ElementInternal::onbeforecutAttrGetter, ElementInternal::onbeforecutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncut' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oncut", ElementInternal::oncutAttrGetter, ElementInternal::oncutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecopy' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onbeforecopy", ElementInternal::onbeforecopyAttrGetter, ElementInternal::onbeforecopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncopy' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"oncopy", ElementInternal::oncopyAttrGetter, ElementInternal::oncopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforepaste' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onbeforepaste", ElementInternal::onbeforepasteAttrGetter, ElementInternal::onbeforepasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onpaste' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onpaste", ElementInternal::onpasteAttrGetter, ElementInternal::onpasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onreset", ElementInternal::onresetAttrGetter, ElementInternal::onresetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onsearch", ElementInternal::onsearchAttrGetter, ElementInternal::onsearchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselectstart' (Type: 'attribute' ExtAttr: 'DontEnum')
    {"onselectstart", ElementInternal::onselectstartAttrGetter, ElementInternal::onselectstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#if ENABLE(FULLSCREEN_API)
    // Attribute 'onwebkitfullscreenchange' (Type: 'attribute' ExtAttr: 'DontEnum Conditional')
    {"onwebkitfullscreenchange", ElementInternal::onwebkitfullscreenchangeAttrGetter, ElementInternal::onwebkitfullscreenchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(FULLSCREEN_API)
};

static const BatchedCallback ElementCallbacks[] = {
    {"getAttribute", ElementInternal::getAttributeCallback},
    {"setAttribute", ElementInternal::setAttributeCallback},
    {"removeAttribute", ElementInternal::removeAttributeCallback},
    {"getAttributeNode", ElementInternal::getAttributeNodeCallback},
    {"getElementsByTagName", ElementInternal::getElementsByTagNameCallback},
    {"getAttributeNS", ElementInternal::getAttributeNSCallback},
    {"setAttributeNS", ElementInternal::setAttributeNSCallback},
    {"removeAttributeNS", ElementInternal::removeAttributeNSCallback},
    {"getElementsByTagNameNS", ElementInternal::getElementsByTagNameNSCallback},
    {"getAttributeNodeNS", ElementInternal::getAttributeNodeNSCallback},
    {"hasAttribute", ElementInternal::hasAttributeCallback},
    {"hasAttributeNS", ElementInternal::hasAttributeNSCallback},
    {"focus", ElementInternal::focusCallback},
    {"blur", ElementInternal::blurCallback},
    {"scrollIntoView", ElementInternal::scrollIntoViewCallback},
    {"scrollIntoViewIfNeeded", ElementInternal::scrollIntoViewIfNeededCallback},
    {"scrollByLines", ElementInternal::scrollByLinesCallback},
    {"scrollByPages", ElementInternal::scrollByPagesCallback},
    {"getElementsByClassName", ElementInternal::getElementsByClassNameCallback},
    {"querySelector", ElementInternal::querySelectorCallback},
    {"querySelectorAll", ElementInternal::querySelectorAllCallback},
    {"webkitMatchesSelector", ElementInternal::webkitMatchesSelectorCallback},
    {"getClientRects", ElementInternal::getClientRectsCallback},
    {"getBoundingClientRect", ElementInternal::getBoundingClientRectCallback},
};

static const BatchedConstant ElementConsts[] = {
    {"ALLOW_KEYBOARD_INPUT", static_cast<signed int>(1)},
};


COMPILE_ASSERT(1 == Element::ALLOW_KEYBOARD_INPUT, ElementEnumALLOW_KEYBOARD_INPUTIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8ElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Element", V8Node::GetTemplate(), V8Element::internalFieldCount,
        ElementAttrs, WTF_ARRAY_LENGTH(ElementAttrs),
        ElementCallbacks, WTF_ARRAY_LENGTH(ElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchstartEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchstart", ElementInternal::ontouchstartAttrGetter, ElementInternal::ontouchstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchmoveEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchmove", ElementInternal::ontouchmoveAttrGetter, ElementInternal::ontouchmoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchendEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchend", ElementInternal::ontouchendAttrGetter, ElementInternal::ontouchendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::ontouchcancelEnabled()) {
        static const BatchedAttribute attrData =\
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime DontEnum Conditional')
        {"ontouchcancel", ElementInternal::ontouchcancelAttrGetter, ElementInternal::ontouchcancelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

    // Custom Signature 'setAttributeNode'
    const int setAttributeNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> setAttributeNodeArgv[setAttributeNodeArgc] = { V8Attr::GetRawTemplate() };
    v8::Handle<v8::Signature> setAttributeNodeSignature = v8::Signature::New(desc, setAttributeNodeArgc, setAttributeNodeArgv);
    proto->Set(v8::String::New("setAttributeNode"), v8::FunctionTemplate::New(ElementInternal::setAttributeNodeCallback, v8::Handle<v8::Value>(), setAttributeNodeSignature));

    // Custom Signature 'removeAttributeNode'
    const int removeAttributeNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> removeAttributeNodeArgv[removeAttributeNodeArgc] = { V8Attr::GetRawTemplate() };
    v8::Handle<v8::Signature> removeAttributeNodeSignature = v8::Signature::New(desc, removeAttributeNodeArgc, removeAttributeNodeArgv);
    proto->Set(v8::String::New("removeAttributeNode"), v8::FunctionTemplate::New(ElementInternal::removeAttributeNodeCallback, v8::Handle<v8::Value>(), removeAttributeNodeSignature));

    // Custom Signature 'setAttributeNodeNS'
    const int setAttributeNodeNSArgc = 1;
    v8::Handle<v8::FunctionTemplate> setAttributeNodeNSArgv[setAttributeNodeNSArgc] = { V8Attr::GetRawTemplate() };
    v8::Handle<v8::Signature> setAttributeNodeNSSignature = v8::Signature::New(desc, setAttributeNodeNSArgc, setAttributeNodeNSArgv);
    proto->Set(v8::String::New("setAttributeNodeNS"), v8::FunctionTemplate::New(ElementInternal::setAttributeNodeNSCallback, v8::Handle<v8::Value>(), setAttributeNodeNSSignature));
    if (RuntimeEnabledFeatures::webkitRequestFullScreenEnabled())
        proto->Set(v8::String::New("webkitRequestFullScreen"), v8::FunctionTemplate::New(ElementInternal::webkitRequestFullScreenCallback, v8::Handle<v8::Value>(), defaultSignature));
    batchConfigureConstants(desc, proto, ElementConsts, WTF_ARRAY_LENGTH(ElementConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Element::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Element::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8ElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Element::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Element::wrapSlow(Element* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8Element::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8Element::derefObject(void* object)
{
    static_cast<Element*>(object)->deref();
}

} // namespace WebCore
