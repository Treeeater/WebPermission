/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8NodeFilter.h"

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"
#include "V8Node.h"
#include "V8Proxy.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8NodeFilter::info = { V8NodeFilter::GetTemplate, V8NodeFilter::derefObject, 0, 0 };

namespace NodeFilterInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> acceptNodeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.NodeFilter.acceptNode");
    NodeFilter* imp = V8NodeFilter::toNative(args.Holder());
    EXCEPTION_BLOCK(Node*, n, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    EmptyScriptState state;
    int result = imp->acceptNode(&state, n);
    if (state.hadException())
        return throwError(state.exception());
    return v8::Integer::New(result);
}

} // namespace NodeFilterInternal

static const BatchedConstant NodeFilterConsts[] = {
    {"FILTER_ACCEPT", static_cast<signed int>(1)},
    {"FILTER_REJECT", static_cast<signed int>(2)},
    {"FILTER_SKIP", static_cast<signed int>(3)},
    {"SHOW_ALL", static_cast<signed int>(0xFFFFFFFF)},
    {"SHOW_ELEMENT", static_cast<signed int>(0x00000001)},
    {"SHOW_ATTRIBUTE", static_cast<signed int>(0x00000002)},
    {"SHOW_TEXT", static_cast<signed int>(0x00000004)},
    {"SHOW_CDATA_SECTION", static_cast<signed int>(0x00000008)},
    {"SHOW_ENTITY_REFERENCE", static_cast<signed int>(0x00000010)},
    {"SHOW_ENTITY", static_cast<signed int>(0x00000020)},
    {"SHOW_PROCESSING_INSTRUCTION", static_cast<signed int>(0x00000040)},
    {"SHOW_COMMENT", static_cast<signed int>(0x00000080)},
    {"SHOW_DOCUMENT", static_cast<signed int>(0x00000100)},
    {"SHOW_DOCUMENT_TYPE", static_cast<signed int>(0x00000200)},
    {"SHOW_DOCUMENT_FRAGMENT", static_cast<signed int>(0x00000400)},
    {"SHOW_NOTATION", static_cast<signed int>(0x00000800)},
};


COMPILE_ASSERT(1 == NodeFilter::FILTER_ACCEPT, NodeFilterEnumFILTER_ACCEPTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(2 == NodeFilter::FILTER_REJECT, NodeFilterEnumFILTER_REJECTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(3 == NodeFilter::FILTER_SKIP, NodeFilterEnumFILTER_SKIPIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0xFFFFFFFF == NodeFilter::SHOW_ALL, NodeFilterEnumSHOW_ALLIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000001 == NodeFilter::SHOW_ELEMENT, NodeFilterEnumSHOW_ELEMENTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000002 == NodeFilter::SHOW_ATTRIBUTE, NodeFilterEnumSHOW_ATTRIBUTEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000004 == NodeFilter::SHOW_TEXT, NodeFilterEnumSHOW_TEXTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000008 == NodeFilter::SHOW_CDATA_SECTION, NodeFilterEnumSHOW_CDATA_SECTIONIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000010 == NodeFilter::SHOW_ENTITY_REFERENCE, NodeFilterEnumSHOW_ENTITY_REFERENCEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000020 == NodeFilter::SHOW_ENTITY, NodeFilterEnumSHOW_ENTITYIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000040 == NodeFilter::SHOW_PROCESSING_INSTRUCTION, NodeFilterEnumSHOW_PROCESSING_INSTRUCTIONIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000080 == NodeFilter::SHOW_COMMENT, NodeFilterEnumSHOW_COMMENTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000100 == NodeFilter::SHOW_DOCUMENT, NodeFilterEnumSHOW_DOCUMENTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000200 == NodeFilter::SHOW_DOCUMENT_TYPE, NodeFilterEnumSHOW_DOCUMENT_TYPEIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000400 == NodeFilter::SHOW_DOCUMENT_FRAGMENT, NodeFilterEnumSHOW_DOCUMENT_FRAGMENTIsWrongUseDontCheckEnums);
COMPILE_ASSERT(0x00000800 == NodeFilter::SHOW_NOTATION, NodeFilterEnumSHOW_NOTATIONIsWrongUseDontCheckEnums);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NodeFilterTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "NodeFilter", v8::Persistent<v8::FunctionTemplate>(), V8NodeFilter::internalFieldCount,
        0, 0,
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'acceptNode'
    const int acceptNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> acceptNodeArgv[acceptNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> acceptNodeSignature = v8::Signature::New(desc, acceptNodeArgc, acceptNodeArgv);
    proto->Set(v8::String::New("acceptNode"), v8::FunctionTemplate::New(NodeFilterInternal::acceptNodeCallback, v8::Handle<v8::Value>(), acceptNodeSignature));
    batchConfigureConstants(desc, proto, NodeFilterConsts, WTF_ARRAY_LENGTH(NodeFilterConsts));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8NodeFilter::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8NodeFilter::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NodeFilterTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8NodeFilter::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8NodeFilter::wrapSlow(NodeFilter* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8NodeFilter::derefObject(void* object)
{
    static_cast<NodeFilter*>(object)->deref();
}

} // namespace WebCore
