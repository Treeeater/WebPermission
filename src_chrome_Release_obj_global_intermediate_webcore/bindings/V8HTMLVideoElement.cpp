/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLVideoElement.h"

#if ENABLE(VIDEO)

#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8HTMLMediaElement.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8HTMLVideoElement::info = { V8HTMLVideoElement::GetTemplate, V8HTMLVideoElement::derefObject, 0, &V8HTMLMediaElement::info };

namespace HTMLVideoElementInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.width._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(std::max(0, imp->getIntegralAttribute(WebCore::HTMLNames::widthAttr)));
}

static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.width._set");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setUnsignedIntegralAttribute(WebCore::HTMLNames::widthAttr, v);
    return;
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.height._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(std::max(0, imp->getIntegralAttribute(WebCore::HTMLNames::heightAttr)));
}

static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.height._set");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setUnsignedIntegralAttribute(WebCore::HTMLNames::heightAttr, v);
    return;
}

static v8::Handle<v8::Value> videoWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.videoWidth._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->videoWidth());
}

static v8::Handle<v8::Value> videoHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.videoHeight._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->videoHeight());
}

static v8::Handle<v8::Value> posterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.poster._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::posterAttr));
}

static void posterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.poster._set");
    setElementStringAttr(info, HTMLNames::posterAttr, value);
}

static v8::Handle<v8::Value> webkitSupportsFullscreenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.webkitSupportsFullscreen._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8Boolean(imp->webkitSupportsFullscreen());
}

static v8::Handle<v8::Value> webkitDisplayingFullscreenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.webkitDisplayingFullscreen._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8Boolean(imp->webkitDisplayingFullscreen());
}

#if ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> webkitDecodedFrameCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.webkitDecodedFrameCount._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->webkitDecodedFrameCount());
}

#endif // ENABLE(MEDIA_STATISTICS)

#if ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> webkitDroppedFrameCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.HTMLVideoElement.webkitDroppedFrameCount._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->webkitDroppedFrameCount());
}

#endif // ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> webkitEnterFullscreenCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLVideoElement.webkitEnterFullscreen");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->webkitEnterFullscreen(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitExitFullscreenCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLVideoElement.webkitExitFullscreen");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(args.Holder());
    imp->webkitExitFullscreen();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitEnterFullScreenCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLVideoElement.webkitEnterFullScreen");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->webkitEnterFullScreen(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> webkitExitFullScreenCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.HTMLVideoElement.webkitExitFullScreen");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(args.Holder());
    imp->webkitExitFullScreen();
    return v8::Handle<v8::Value>();
}

} // namespace HTMLVideoElementInternal

static const BatchedAttribute HTMLVideoElementAttrs[] = {
    // Attribute 'width' (Type: 'attribute' ExtAttr: 'Reflect')
    {"width", HTMLVideoElementInternal::widthAttrGetter, HTMLVideoElementInternal::widthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'attribute' ExtAttr: 'Reflect')
    {"height", HTMLVideoElementInternal::heightAttrGetter, HTMLVideoElementInternal::heightAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'videoWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"videoWidth", HTMLVideoElementInternal::videoWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'videoHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"videoHeight", HTMLVideoElementInternal::videoHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'poster' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"poster", HTMLVideoElementInternal::posterAttrGetter, HTMLVideoElementInternal::posterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitSupportsFullscreen' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitSupportsFullscreen", HTMLVideoElementInternal::webkitSupportsFullscreenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitDisplayingFullscreen' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitDisplayingFullscreen", HTMLVideoElementInternal::webkitDisplayingFullscreenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(MEDIA_STATISTICS)
    // Attribute 'webkitDecodedFrameCount' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitDecodedFrameCount", HTMLVideoElementInternal::webkitDecodedFrameCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(MEDIA_STATISTICS)
#if ENABLE(MEDIA_STATISTICS)
    // Attribute 'webkitDroppedFrameCount' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitDroppedFrameCount", HTMLVideoElementInternal::webkitDroppedFrameCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(MEDIA_STATISTICS)
};

static const BatchedCallback HTMLVideoElementCallbacks[] = {
    {"webkitEnterFullscreen", HTMLVideoElementInternal::webkitEnterFullscreenCallback},
    {"webkitExitFullscreen", HTMLVideoElementInternal::webkitExitFullscreenCallback},
    {"webkitEnterFullScreen", HTMLVideoElementInternal::webkitEnterFullScreenCallback},
    {"webkitExitFullScreen", HTMLVideoElementInternal::webkitExitFullScreenCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLVideoElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "HTMLVideoElement", V8HTMLMediaElement::GetTemplate(), V8HTMLVideoElement::internalFieldCount,
        HTMLVideoElementAttrs, WTF_ARRAY_LENGTH(HTMLVideoElementAttrs),
        HTMLVideoElementCallbacks, WTF_ARRAY_LENGTH(HTMLVideoElementCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLVideoElement::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLVideoElement::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLVideoElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLVideoElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLVideoElement::wrapSlow(HTMLVideoElement* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    if (impl->document()) {
        proxy = V8Proxy::retrieve(impl->document()->frame());
        if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl)) {
            if (proxy->windowShell()->initContextIfNeeded()) {
                // initContextIfNeeded may have created a wrapper for the object, retry from the start.
                return V8HTMLVideoElement::wrap(impl);
            }
        }
    }


    v8::Handle<v8::Context> context;
    if (proxy)
        context = proxy->context();

    // Enter the node's context and create the wrapper in that context.
    if (!context.IsEmpty())
        context->Enter();
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    // Exit the node's context if it was entered.
    if (!context.IsEmpty())
        context->Exit();
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    wrapperHandle.SetWrapperClassId(v8DOMSubtreeClassId);
    getDOMNodeMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8HTMLVideoElement::derefObject(void* object)
{
    static_cast<HTMLVideoElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(VIDEO)
