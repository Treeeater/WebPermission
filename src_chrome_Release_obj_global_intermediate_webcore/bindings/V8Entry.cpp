/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Entry.h"

#if ENABLE(FILE_SYSTEM)

#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8CustomVoidCallback.h"
#include "V8DOMFileSystem.h"
#include "V8DOMWrapper.h"
#include "V8DirectoryEntry.h"
#include "V8EntryCallback.h"
#include "V8ErrorCallback.h"
#include "V8IsolatedContext.h"
#include "V8MetadataCallback.h"
#include "V8Proxy.h"

namespace WebCore {

WrapperTypeInfo V8Entry::info = { V8Entry::GetTemplate, V8Entry::derefObject, 0, 0 };

namespace EntryInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> isFileAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Entry.isFile._get");
    Entry* imp = V8Entry::toNative(info.Holder());
    return v8Boolean(imp->isFile());
}

static v8::Handle<v8::Value> isDirectoryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Entry.isDirectory._get");
    Entry* imp = V8Entry::toNative(info.Holder());
    return v8Boolean(imp->isDirectory());
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Entry.name._get");
    Entry* imp = V8Entry::toNative(info.Holder());
    return v8String(imp->name());
}

static v8::Handle<v8::Value> fullPathAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Entry.fullPath._get");
    Entry* imp = V8Entry::toNative(info.Holder());
    return v8String(imp->fullPath());
}

static v8::Handle<v8::Value> filesystemAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.Entry.filesystem._get");
    Entry* imp = V8Entry::toNative(info.Holder());
    RefPtr<DOMFileSystem> result = imp->filesystem();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "filesystem", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> getMetadataCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Entry.getMetadata");
    Entry* imp = V8Entry::toNative(args.Holder());
    RefPtr<MetadataCallback> successCallback;
    if (args.Length() > 0 && !args[0]->IsNull() && !args[0]->IsUndefined()) {
        if (!args[0]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        successCallback = V8MetadataCallback::create(args[0], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8ErrorCallback::create(args[1], getScriptExecutionContext());
    }
    imp->getMetadata(successCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> moveToCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Entry.moveTo");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Entry* imp = V8Entry::toNative(args.Holder());
    EXCEPTION_BLOCK(DirectoryEntry*, parent, V8DirectoryEntry::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8DirectoryEntry::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    if (args.Length() <= 1) {
        imp->moveTo(parent);
        return v8::Handle<v8::Value>();
    }
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, name, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    RefPtr<EntryCallback> successCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        successCallback = V8EntryCallback::create(args[2], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 3 && !args[3]->IsNull() && !args[3]->IsUndefined()) {
        if (!args[3]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8ErrorCallback::create(args[3], getScriptExecutionContext());
    }
    imp->moveTo(parent, name, successCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> copyToCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Entry.copyTo");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    Entry* imp = V8Entry::toNative(args.Holder());
    EXCEPTION_BLOCK(DirectoryEntry*, parent, V8DirectoryEntry::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8DirectoryEntry::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    if (args.Length() <= 1) {
        imp->copyTo(parent);
        return v8::Handle<v8::Value>();
    }
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<WithUndefinedOrNullCheck>, name, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    RefPtr<EntryCallback> successCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        successCallback = V8EntryCallback::create(args[2], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 3 && !args[3]->IsNull() && !args[3]->IsUndefined()) {
        if (!args[3]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8ErrorCallback::create(args[3], getScriptExecutionContext());
    }
    imp->copyTo(parent, name, successCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> toURLCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Entry.toURL");
    Entry* imp = V8Entry::toNative(args.Holder());
    return v8String(imp->toURL());
}

static v8::Handle<v8::Value> removeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Entry.remove");
    Entry* imp = V8Entry::toNative(args.Holder());
    RefPtr<VoidCallback> successCallback;
    if (args.Length() > 0 && !args[0]->IsNull() && !args[0]->IsUndefined()) {
        if (!args[0]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        successCallback = V8CustomVoidCallback::create(args[0], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8ErrorCallback::create(args[1], getScriptExecutionContext());
    }
    imp->remove(successCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> getParentCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.Entry.getParent");
    Entry* imp = V8Entry::toNative(args.Holder());
    RefPtr<EntryCallback> successCallback;
    if (args.Length() > 0 && !args[0]->IsNull() && !args[0]->IsUndefined()) {
        if (!args[0]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        successCallback = V8EntryCallback::create(args[0], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsObject())
            return throwError(TYPE_MISMATCH_ERR);
        errorCallback = V8ErrorCallback::create(args[1], getScriptExecutionContext());
    }
    imp->getParent(successCallback, errorCallback);
    return v8::Handle<v8::Value>();
}

} // namespace EntryInternal

static const BatchedAttribute EntryAttrs[] = {
    // Attribute 'isFile' (Type: 'readonly attribute' ExtAttr: '')
    {"isFile", EntryInternal::isFileAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'isDirectory' (Type: 'readonly attribute' ExtAttr: '')
    {"isDirectory", EntryInternal::isDirectoryAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", EntryInternal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fullPath' (Type: 'readonly attribute' ExtAttr: '')
    {"fullPath", EntryInternal::fullPathAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'filesystem' (Type: 'readonly attribute' ExtAttr: '')
    {"filesystem", EntryInternal::filesystemAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback EntryCallbacks[] = {
    {"getMetadata", EntryInternal::getMetadataCallback},
    {"moveTo", EntryInternal::moveToCallback},
    {"copyTo", EntryInternal::copyToCallback},
    {"toURL", EntryInternal::toURLCallback},
    {"remove", EntryInternal::removeCallback},
    {"getParent", EntryInternal::getParentCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8EntryTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "Entry", v8::Persistent<v8::FunctionTemplate>(), V8Entry::internalFieldCount,
        EntryAttrs, WTF_ARRAY_LENGTH(EntryAttrs),
        EntryCallbacks, WTF_ARRAY_LENGTH(EntryCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Entry::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Entry::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8EntryTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Entry::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Entry::wrapSlow(Entry* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8Entry::derefObject(void* object)
{
    static_cast<Entry*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(FILE_SYSTEM)
