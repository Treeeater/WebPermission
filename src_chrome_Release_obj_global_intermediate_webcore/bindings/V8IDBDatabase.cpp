/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBDatabase.h"

#if ENABLE(INDEXED_DATABASE)

#include "EventListener.h"
#include "ExceptionCode.h"
#include "OptionsObject.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8BindingMacros.h"
#include "V8BindingState.h"
#include "V8DOMStringList.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8IDBObjectStore.h"
#include "V8IDBTransaction.h"
#include "V8IDBVersionChangeRequest.h"
#include "V8IsolatedContext.h"
#include "V8Proxy.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>

namespace WebCore {

WrapperTypeInfo V8IDBDatabase::info = { V8IDBDatabase::GetTemplate, V8IDBDatabase::derefObject, 0, 0 };

namespace IDBDatabaseInternal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.name._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    return v8String(imp->name());
}

static v8::Handle<v8::Value> versionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.version._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    return v8String(imp->version());
}

static v8::Handle<v8::Value> objectStoreNamesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.objectStoreNames._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    RefPtr<DOMStringList> result = imp->objectStoreNames();
    v8::Handle<v8::Value> wrapper = result.get() ? getDOMObjectMap().get(result.get()) : v8::Handle<v8::Value>();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "objectStoreNames", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.onabort._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.onabort._set");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8IDBDatabase::eventListenerCacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.onerror._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.onerror._set");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8IDBDatabase::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onversionchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.onversionchange._get");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    return imp->onversionchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onversionchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
}

static void onversionchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    INC_STATS("DOM.IDBDatabase.onversionchange._set");
    IDBDatabase* imp = V8IDBDatabase::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onversionchange(), value, V8IDBDatabase::eventListenerCacheIndex);
    imp->setOnversionchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> createObjectStoreCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.createObjectStore");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    if (args.Length() <= 1) {
        RefPtr<IDBObjectStore> result = imp->createObjectStore(name, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release());
    }
    EXCEPTION_BLOCK(OptionsObject, options, MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined));
    RefPtr<IDBObjectStore> result = imp->createObjectStore(name, options, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> deleteObjectStoreCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.deleteObjectStore");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, name, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    imp->deleteObjectStore(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Handle<v8::Value>();
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> setVersionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.setVersion");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    STRING_TO_V8PARAMETER_EXCEPTION_BLOCK(V8Parameter<>, version, MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    RefPtr<IDBVersionChangeRequest> result = imp->setVersion(scriptContext, version, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> transactionCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.transaction");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(RefPtr<DOMStringList>, storeNames, v8ValueToWebCoreDOMStringList(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)));
    if (args.Length() <= 1) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        if (!scriptContext)
            return v8::Undefined();
        RefPtr<IDBTransaction> result = imp->transaction(scriptContext, storeNames, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release());
    }
    EXCEPTION_BLOCK(int, mode, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, MissingIsUndefined)));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    if (!scriptContext)
        return v8::Undefined();
    RefPtr<IDBTransaction> result = imp->transaction(scriptContext, storeNames, mode, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release());
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.close");
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    imp->close();
    return v8::Handle<v8::Value>();
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.addEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8IDBDatabase::toNative(args.Holder())->addEventListener(v8ValueToAtomicWebCoreString(args[0]), listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8IDBDatabase::eventListenerCacheIndex);
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.removeEventListener()");
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8IDBDatabase::toNative(args.Holder())->removeEventListener(v8ValueToAtomicWebCoreString(args[0]), listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8IDBDatabase::eventListenerCacheIndex);
    }
    return v8::Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    INC_STATS("DOM.IDBDatabase.dispatchEvent");
    if (args.Length() < 1)
        return throwError("Not enough arguments", V8Proxy::TypeError);
    IDBDatabase* imp = V8IDBDatabase::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    EXCEPTION_BLOCK(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, MissingIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result);
    }
    fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
}

} // namespace IDBDatabaseInternal

static const BatchedAttribute IDBDatabaseAttrs[] = {
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", IDBDatabaseInternal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'version' (Type: 'readonly attribute' ExtAttr: '')
    {"version", IDBDatabaseInternal::versionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'objectStoreNames' (Type: 'readonly attribute' ExtAttr: '')
    {"objectStoreNames", IDBDatabaseInternal::objectStoreNamesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: '')
    {"onabort", IDBDatabaseInternal::onabortAttrGetter, IDBDatabaseInternal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
    {"onerror", IDBDatabaseInternal::onerrorAttrGetter, IDBDatabaseInternal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onversionchange' (Type: 'attribute' ExtAttr: '')
    {"onversionchange", IDBDatabaseInternal::onversionchangeAttrGetter, IDBDatabaseInternal::onversionchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const BatchedCallback IDBDatabaseCallbacks[] = {
    {"createObjectStore", IDBDatabaseInternal::createObjectStoreCallback},
    {"deleteObjectStore", IDBDatabaseInternal::deleteObjectStoreCallback},
    {"setVersion", IDBDatabaseInternal::setVersionCallback},
    {"transaction", IDBDatabaseInternal::transactionCallback},
    {"close", IDBDatabaseInternal::closeCallback},
    {"addEventListener", IDBDatabaseInternal::addEventListenerCallback},
    {"removeEventListener", IDBDatabaseInternal::removeEventListenerCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBDatabaseTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature = configureTemplate(desc, "IDBDatabase", v8::Persistent<v8::FunctionTemplate>(), V8IDBDatabase::internalFieldCount,
        IDBDatabaseAttrs, WTF_ARRAY_LENGTH(IDBDatabaseAttrs),
        IDBDatabaseCallbacks, WTF_ARRAY_LENGTH(IDBDatabaseCallbacks));
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(IDBDatabaseInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEventSignature));

    // Custom toString template
    desc->Set(getToStringName(), getToStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBDatabase::GetRawTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8IDBDatabase::GetTemplate()
{
    V8BindingPerIsolateData* data = V8BindingPerIsolateData::current();
    V8BindingPerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->second;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8IDBDatabaseTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8IDBDatabase::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBDatabase::wrapSlow(IDBDatabase* impl)
{
    v8::Handle<v8::Object> wrapper;
    V8Proxy* proxy = 0;
    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl);
    if (wrapper.IsEmpty())
        return wrapper;

    impl->ref();
    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);

    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    getDOMObjectMap().set(impl, wrapperHandle);
    return wrapper;
}

void V8IDBDatabase::derefObject(void* object)
{
    static_cast<IDBDatabase*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
